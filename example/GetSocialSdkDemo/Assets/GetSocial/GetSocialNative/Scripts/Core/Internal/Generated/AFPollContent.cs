#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  /// <summary>
  /// #sdk7
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AFPollContent : TBase
  {
    private List<AFPollOption> _pollOptions;
    private int _voteCount;
    private List<AFPollVote> _knownVoters;
    private bool _allowMultiVotes;
    private long _endsAt;

    public List<AFPollOption> PollOptions
    {
      get
      {
        return _pollOptions;
      }
      set
      {
        __isset.pollOptions = true;
        this._pollOptions = value;
      }
    }

    public int VoteCount
    {
      get
      {
        return _voteCount;
      }
      set
      {
        __isset.voteCount = true;
        this._voteCount = value;
      }
    }

    public List<AFPollVote> KnownVoters
    {
      get
      {
        return _knownVoters;
      }
      set
      {
        __isset.knownVoters = true;
        this._knownVoters = value;
      }
    }

    /// <summary>
    /// at most 3 items
    /// </summary>
    public bool AllowMultiVotes
    {
      get
      {
        return _allowMultiVotes;
      }
      set
      {
        __isset.allowMultiVotes = true;
        this._allowMultiVotes = value;
      }
    }

    public long EndsAt
    {
      get
      {
        return _endsAt;
      }
      set
      {
        __isset.endsAt = true;
        this._endsAt = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pollOptions;
      public bool voteCount;
      public bool knownVoters;
      public bool allowMultiVotes;
      public bool endsAt;
    }

    public AFPollContent() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  PollOptions = new List<AFPollOption>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    AFPollOption _elem6;
                    _elem6 = new AFPollOption();
                    _elem6.Read(iprot);
                    PollOptions.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                VoteCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  KnownVoters = new List<AFPollVote>();
                  TList _list7 = iprot.ReadListBegin();
                  for( int _i8 = 0; _i8 < _list7.Count; ++_i8)
                  {
                    AFPollVote _elem9;
                    _elem9 = new AFPollVote();
                    _elem9.Read(iprot);
                    KnownVoters.Add(_elem9);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                AllowMultiVotes = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                EndsAt = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AFPollContent");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PollOptions != null && __isset.pollOptions) {
          field.Name = "pollOptions";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, PollOptions.Count));
            foreach (AFPollOption _iter10 in PollOptions)
            {
              _iter10.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.voteCount) {
          field.Name = "voteCount";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(VoteCount);
          oprot.WriteFieldEnd();
        }
        if (KnownVoters != null && __isset.knownVoters) {
          field.Name = "knownVoters";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, KnownVoters.Count));
            foreach (AFPollVote _iter11 in KnownVoters)
            {
              _iter11.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.allowMultiVotes) {
          field.Name = "allowMultiVotes";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(AllowMultiVotes);
          oprot.WriteFieldEnd();
        }
        if (__isset.endsAt) {
          field.Name = "endsAt";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(EndsAt);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AFPollContent(");
      bool __first = true;
      if (PollOptions != null && __isset.pollOptions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PollOptions: ");
        __sb.Append(PollOptions.ToDebugString());
      }
      if (__isset.voteCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("VoteCount: ");
        __sb.Append(VoteCount);
      }
      if (KnownVoters != null && __isset.knownVoters) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("KnownVoters: ");
        __sb.Append(KnownVoters.ToDebugString());
      }
      if (__isset.allowMultiVotes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AllowMultiVotes: ");
        __sb.Append(AllowMultiVotes);
      }
      if (__isset.endsAt) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EndsAt: ");
        __sb.Append(EndsAt);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
