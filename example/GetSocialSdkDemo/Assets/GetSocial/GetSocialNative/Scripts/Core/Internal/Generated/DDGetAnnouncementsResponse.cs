#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DDGetAnnouncementsResponse : TBase
  {
    private List<AFAnnouncement> _data;
    private List<AFEntityReference> _entityDetails;
    private string _nextCursor;

    public List<AFAnnouncement> Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }

    public List<AFEntityReference> EntityDetails
    {
      get
      {
        return _entityDetails;
      }
      set
      {
        __isset.entityDetails = true;
        this._entityDetails = value;
      }
    }

    public string NextCursor
    {
      get
      {
        return _nextCursor;
      }
      set
      {
        __isset.nextCursor = true;
        this._nextCursor = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool data;
      public bool entityDetails;
      public bool nextCursor;
    }

    public DDGetAnnouncementsResponse() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Data = new List<AFAnnouncement>();
                  TList _list187 = iprot.ReadListBegin();
                  for( int _i188 = 0; _i188 < _list187.Count; ++_i188)
                  {
                    AFAnnouncement _elem189;
                    _elem189 = new AFAnnouncement();
                    _elem189.Read(iprot);
                    Data.Add(_elem189);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  EntityDetails = new List<AFEntityReference>();
                  TList _list190 = iprot.ReadListBegin();
                  for( int _i191 = 0; _i191 < _list190.Count; ++_i191)
                  {
                    AFEntityReference _elem192;
                    _elem192 = new AFEntityReference();
                    _elem192.Read(iprot);
                    EntityDetails.Add(_elem192);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                NextCursor = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DDGetAnnouncementsResponse");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Data.Count));
            foreach (AFAnnouncement _iter193 in Data)
            {
              _iter193.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (EntityDetails != null && __isset.entityDetails) {
          field.Name = "entityDetails";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, EntityDetails.Count));
            foreach (AFEntityReference _iter194 in EntityDetails)
            {
              _iter194.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (NextCursor != null && __isset.nextCursor) {
          field.Name = "nextCursor";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NextCursor);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DDGetAnnouncementsResponse(");
      bool __first = true;
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data.ToDebugString());
      }
      if (EntityDetails != null && __isset.entityDetails) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EntityDetails: ");
        __sb.Append(EntityDetails.ToDebugString());
      }
      if (NextCursor != null && __isset.nextCursor) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NextCursor: ");
        __sb.Append(NextCursor);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
