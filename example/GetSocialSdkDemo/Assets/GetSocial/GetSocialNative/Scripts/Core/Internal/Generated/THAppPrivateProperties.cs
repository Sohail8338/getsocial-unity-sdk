#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class THAppPrivateProperties : TBase
  {
    private string _inviteDomain;
    private bool _moderationEnabled;
    private Dictionary<string, string> _landingPageDescription;
    private string _landingImage;
    private string _thumbLandingImage;
    private string _suffix;
    private string _fallbackUrl;
    private bool _chatEnabled;
    private bool _moderate;
    private bool _moderateActivity;
    private bool _moderateComment;
    private bool _moderatePrivateChat;
    private bool _moderatePublicChat;
    private string _webhooks;
    private string _googleTagManagerId;
    private string _sharedSecret;
    private bool _pushNotificationsFollow;
    private bool _pushNotificationsNewFriendship;
    private bool _pushNotificationsAcceptedInvite;
    private bool _pushNotificationsRelatedComment;
    private bool _pushNotificationsLike;
    private bool _pushNotificationsChatMessage;
    private bool _pushNotificationsAnnouncement;
    private bool _pushNotificationsComment;
    private bool _preferCustomDomain;
    private bool _dashboardNotificationsRelatedComment;
    private bool _dashboardNotificationsLike;
    private bool _dashboardNotificationsComment;
    private string _youtubeVideo;
    private string _desktopRedirectURL;
    private bool _pushNotificationsMention;
    private bool _dashboardNotificationsMention;
    private bool _appsflyerEnabled;
    private bool _adjustEnabled;
    private string _adjustTrackerId;
    private Dictionary<string, string> _landingPageTitle;
    private bool _redirectUrlWhitelistEnabled;
    private List<string> _redirectUrlWhitelist;
    private bool _pushNotificationsLikeActivity;
    private bool _pushNotificationsLikeComment;
    private bool _pushNotificationsMentionActivity;
    private bool _pushNotificationsMentionComment;
    private bool _pushNotificationsReplyComment;
    private bool _disabled;
    private bool _setReferrerOnAppInstall;
    private bool _addFriendOnAppInstall;
    private bool _isUsingFeeds2;
    private bool _rejectModeratedActivity;
    private bool _activityPendingByDefault;
    private bool _commentPendingByDefault;
    private int _activitiesRateLimit;
    private int _activitiesRateLimitSamplingPeriod;
    private int _commentsRateLimit;
    private int _commentsRateLimitSamplingPeriod;
    private bool _pushNotificationsRequestToJoinGroup;
    private bool _pushNotificationsInviteToJoinGroup;
    private bool _pushNotificationsRequestToJoinGroupApproved;
    private bool _clevertapEnabled;
    private string _clevertapAccountID;
    private string _clevertapPasscode;
    private string _clevertapIdentity;
    private string _clevertapLocation;
    private Dictionary<string, string> _fallbackUrlByCountry;
    private Dictionary<string, string> _desktopRedirectURLByCountry;
    private bool _onlyAllowTrustedIdentities;

    public string InviteDomain
    {
      get
      {
        return _inviteDomain;
      }
      set
      {
        __isset.inviteDomain = true;
        this._inviteDomain = value;
      }
    }

    public bool ModerationEnabled
    {
      get
      {
        return _moderationEnabled;
      }
      set
      {
        __isset.moderationEnabled = true;
        this._moderationEnabled = value;
      }
    }

    public Dictionary<string, string> LandingPageDescription
    {
      get
      {
        return _landingPageDescription;
      }
      set
      {
        __isset.landingPageDescription = true;
        this._landingPageDescription = value;
      }
    }

    public string LandingImage
    {
      get
      {
        return _landingImage;
      }
      set
      {
        __isset.landingImage = true;
        this._landingImage = value;
      }
    }

    public string ThumbLandingImage
    {
      get
      {
        return _thumbLandingImage;
      }
      set
      {
        __isset.thumbLandingImage = true;
        this._thumbLandingImage = value;
      }
    }

    public string Suffix
    {
      get
      {
        return _suffix;
      }
      set
      {
        __isset.suffix = true;
        this._suffix = value;
      }
    }

    /// <summary>
    /// For Smart Invites custom domains
    /// </summary>
    public string FallbackUrl
    {
      get
      {
        return _fallbackUrl;
      }
      set
      {
        __isset.fallbackUrl = true;
        this._fallbackUrl = value;
      }
    }

    public bool ChatEnabled
    {
      get
      {
        return _chatEnabled;
      }
      set
      {
        __isset.chatEnabled = true;
        this._chatEnabled = value;
      }
    }

    public bool Moderate
    {
      get
      {
        return _moderate;
      }
      set
      {
        __isset.moderate = true;
        this._moderate = value;
      }
    }

    public bool ModerateActivity
    {
      get
      {
        return _moderateActivity;
      }
      set
      {
        __isset.moderateActivity = true;
        this._moderateActivity = value;
      }
    }

    public bool ModerateComment
    {
      get
      {
        return _moderateComment;
      }
      set
      {
        __isset.moderateComment = true;
        this._moderateComment = value;
      }
    }

    public bool ModeratePrivateChat
    {
      get
      {
        return _moderatePrivateChat;
      }
      set
      {
        __isset.moderatePrivateChat = true;
        this._moderatePrivateChat = value;
      }
    }

    public bool ModeratePublicChat
    {
      get
      {
        return _moderatePublicChat;
      }
      set
      {
        __isset.moderatePublicChat = true;
        this._moderatePublicChat = value;
      }
    }

    public string Webhooks
    {
      get
      {
        return _webhooks;
      }
      set
      {
        __isset.webhooks = true;
        this._webhooks = value;
      }
    }

    public string GoogleTagManagerId
    {
      get
      {
        return _googleTagManagerId;
      }
      set
      {
        __isset.googleTagManagerId = true;
        this._googleTagManagerId = value;
      }
    }

    public string SharedSecret
    {
      get
      {
        return _sharedSecret;
      }
      set
      {
        __isset.sharedSecret = true;
        this._sharedSecret = value;
      }
    }

    public bool PushNotificationsFollow
    {
      get
      {
        return _pushNotificationsFollow;
      }
      set
      {
        __isset.pushNotificationsFollow = true;
        this._pushNotificationsFollow = value;
      }
    }

    public bool PushNotificationsNewFriendship
    {
      get
      {
        return _pushNotificationsNewFriendship;
      }
      set
      {
        __isset.pushNotificationsNewFriendship = true;
        this._pushNotificationsNewFriendship = value;
      }
    }

    public bool PushNotificationsAcceptedInvite
    {
      get
      {
        return _pushNotificationsAcceptedInvite;
      }
      set
      {
        __isset.pushNotificationsAcceptedInvite = true;
        this._pushNotificationsAcceptedInvite = value;
      }
    }

    public bool PushNotificationsRelatedComment
    {
      get
      {
        return _pushNotificationsRelatedComment;
      }
      set
      {
        __isset.pushNotificationsRelatedComment = true;
        this._pushNotificationsRelatedComment = value;
      }
    }

    public bool PushNotificationsLike
    {
      get
      {
        return _pushNotificationsLike;
      }
      set
      {
        __isset.pushNotificationsLike = true;
        this._pushNotificationsLike = value;
      }
    }

    public bool PushNotificationsChatMessage
    {
      get
      {
        return _pushNotificationsChatMessage;
      }
      set
      {
        __isset.pushNotificationsChatMessage = true;
        this._pushNotificationsChatMessage = value;
      }
    }

    public bool PushNotificationsAnnouncement
    {
      get
      {
        return _pushNotificationsAnnouncement;
      }
      set
      {
        __isset.pushNotificationsAnnouncement = true;
        this._pushNotificationsAnnouncement = value;
      }
    }

    public bool PushNotificationsComment
    {
      get
      {
        return _pushNotificationsComment;
      }
      set
      {
        __isset.pushNotificationsComment = true;
        this._pushNotificationsComment = value;
      }
    }

    public bool PreferCustomDomain
    {
      get
      {
        return _preferCustomDomain;
      }
      set
      {
        __isset.preferCustomDomain = true;
        this._preferCustomDomain = value;
      }
    }

    public bool DashboardNotificationsRelatedComment
    {
      get
      {
        return _dashboardNotificationsRelatedComment;
      }
      set
      {
        __isset.dashboardNotificationsRelatedComment = true;
        this._dashboardNotificationsRelatedComment = value;
      }
    }

    public bool DashboardNotificationsLike
    {
      get
      {
        return _dashboardNotificationsLike;
      }
      set
      {
        __isset.dashboardNotificationsLike = true;
        this._dashboardNotificationsLike = value;
      }
    }

    public bool DashboardNotificationsComment
    {
      get
      {
        return _dashboardNotificationsComment;
      }
      set
      {
        __isset.dashboardNotificationsComment = true;
        this._dashboardNotificationsComment = value;
      }
    }

    public string YoutubeVideo
    {
      get
      {
        return _youtubeVideo;
      }
      set
      {
        __isset.youtubeVideo = true;
        this._youtubeVideo = value;
      }
    }

    public string DesktopRedirectURL
    {
      get
      {
        return _desktopRedirectURL;
      }
      set
      {
        __isset.desktopRedirectURL = true;
        this._desktopRedirectURL = value;
      }
    }

    public bool PushNotificationsMention
    {
      get
      {
        return _pushNotificationsMention;
      }
      set
      {
        __isset.pushNotificationsMention = true;
        this._pushNotificationsMention = value;
      }
    }

    public bool DashboardNotificationsMention
    {
      get
      {
        return _dashboardNotificationsMention;
      }
      set
      {
        __isset.dashboardNotificationsMention = true;
        this._dashboardNotificationsMention = value;
      }
    }

    public bool AppsflyerEnabled
    {
      get
      {
        return _appsflyerEnabled;
      }
      set
      {
        __isset.appsflyerEnabled = true;
        this._appsflyerEnabled = value;
      }
    }

    public bool AdjustEnabled
    {
      get
      {
        return _adjustEnabled;
      }
      set
      {
        __isset.adjustEnabled = true;
        this._adjustEnabled = value;
      }
    }

    public string AdjustTrackerId
    {
      get
      {
        return _adjustTrackerId;
      }
      set
      {
        __isset.adjustTrackerId = true;
        this._adjustTrackerId = value;
      }
    }

    public Dictionary<string, string> LandingPageTitle
    {
      get
      {
        return _landingPageTitle;
      }
      set
      {
        __isset.landingPageTitle = true;
        this._landingPageTitle = value;
      }
    }

    public bool RedirectUrlWhitelistEnabled
    {
      get
      {
        return _redirectUrlWhitelistEnabled;
      }
      set
      {
        __isset.redirectUrlWhitelistEnabled = true;
        this._redirectUrlWhitelistEnabled = value;
      }
    }

    public List<string> RedirectUrlWhitelist
    {
      get
      {
        return _redirectUrlWhitelist;
      }
      set
      {
        __isset.redirectUrlWhitelist = true;
        this._redirectUrlWhitelist = value;
      }
    }

    public bool PushNotificationsLikeActivity
    {
      get
      {
        return _pushNotificationsLikeActivity;
      }
      set
      {
        __isset.pushNotificationsLikeActivity = true;
        this._pushNotificationsLikeActivity = value;
      }
    }

    public bool PushNotificationsLikeComment
    {
      get
      {
        return _pushNotificationsLikeComment;
      }
      set
      {
        __isset.pushNotificationsLikeComment = true;
        this._pushNotificationsLikeComment = value;
      }
    }

    public bool PushNotificationsMentionActivity
    {
      get
      {
        return _pushNotificationsMentionActivity;
      }
      set
      {
        __isset.pushNotificationsMentionActivity = true;
        this._pushNotificationsMentionActivity = value;
      }
    }

    public bool PushNotificationsMentionComment
    {
      get
      {
        return _pushNotificationsMentionComment;
      }
      set
      {
        __isset.pushNotificationsMentionComment = true;
        this._pushNotificationsMentionComment = value;
      }
    }

    public bool PushNotificationsReplyComment
    {
      get
      {
        return _pushNotificationsReplyComment;
      }
      set
      {
        __isset.pushNotificationsReplyComment = true;
        this._pushNotificationsReplyComment = value;
      }
    }

    public bool Disabled
    {
      get
      {
        return _disabled;
      }
      set
      {
        __isset.disabled = true;
        this._disabled = value;
      }
    }

    public bool SetReferrerOnAppInstall
    {
      get
      {
        return _setReferrerOnAppInstall;
      }
      set
      {
        __isset.setReferrerOnAppInstall = true;
        this._setReferrerOnAppInstall = value;
      }
    }

    public bool AddFriendOnAppInstall
    {
      get
      {
        return _addFriendOnAppInstall;
      }
      set
      {
        __isset.addFriendOnAppInstall = true;
        this._addFriendOnAppInstall = value;
      }
    }

    public bool IsUsingFeeds2
    {
      get
      {
        return _isUsingFeeds2;
      }
      set
      {
        __isset.isUsingFeeds2 = true;
        this._isUsingFeeds2 = value;
      }
    }

    public bool RejectModeratedActivity
    {
      get
      {
        return _rejectModeratedActivity;
      }
      set
      {
        __isset.rejectModeratedActivity = true;
        this._rejectModeratedActivity = value;
      }
    }

    public bool ActivityPendingByDefault
    {
      get
      {
        return _activityPendingByDefault;
      }
      set
      {
        __isset.activityPendingByDefault = true;
        this._activityPendingByDefault = value;
      }
    }

    public bool CommentPendingByDefault
    {
      get
      {
        return _commentPendingByDefault;
      }
      set
      {
        __isset.commentPendingByDefault = true;
        this._commentPendingByDefault = value;
      }
    }

    public int ActivitiesRateLimit
    {
      get
      {
        return _activitiesRateLimit;
      }
      set
      {
        __isset.activitiesRateLimit = true;
        this._activitiesRateLimit = value;
      }
    }

    public int ActivitiesRateLimitSamplingPeriod
    {
      get
      {
        return _activitiesRateLimitSamplingPeriod;
      }
      set
      {
        __isset.activitiesRateLimitSamplingPeriod = true;
        this._activitiesRateLimitSamplingPeriod = value;
      }
    }

    public int CommentsRateLimit
    {
      get
      {
        return _commentsRateLimit;
      }
      set
      {
        __isset.commentsRateLimit = true;
        this._commentsRateLimit = value;
      }
    }

    public int CommentsRateLimitSamplingPeriod
    {
      get
      {
        return _commentsRateLimitSamplingPeriod;
      }
      set
      {
        __isset.commentsRateLimitSamplingPeriod = true;
        this._commentsRateLimitSamplingPeriod = value;
      }
    }

    public bool PushNotificationsRequestToJoinGroup
    {
      get
      {
        return _pushNotificationsRequestToJoinGroup;
      }
      set
      {
        __isset.pushNotificationsRequestToJoinGroup = true;
        this._pushNotificationsRequestToJoinGroup = value;
      }
    }

    public bool PushNotificationsInviteToJoinGroup
    {
      get
      {
        return _pushNotificationsInviteToJoinGroup;
      }
      set
      {
        __isset.pushNotificationsInviteToJoinGroup = true;
        this._pushNotificationsInviteToJoinGroup = value;
      }
    }

    public bool PushNotificationsRequestToJoinGroupApproved
    {
      get
      {
        return _pushNotificationsRequestToJoinGroupApproved;
      }
      set
      {
        __isset.pushNotificationsRequestToJoinGroupApproved = true;
        this._pushNotificationsRequestToJoinGroupApproved = value;
      }
    }

    public bool ClevertapEnabled
    {
      get
      {
        return _clevertapEnabled;
      }
      set
      {
        __isset.clevertapEnabled = true;
        this._clevertapEnabled = value;
      }
    }

    public string ClevertapAccountID
    {
      get
      {
        return _clevertapAccountID;
      }
      set
      {
        __isset.clevertapAccountID = true;
        this._clevertapAccountID = value;
      }
    }

    public string ClevertapPasscode
    {
      get
      {
        return _clevertapPasscode;
      }
      set
      {
        __isset.clevertapPasscode = true;
        this._clevertapPasscode = value;
      }
    }

    public string ClevertapIdentity
    {
      get
      {
        return _clevertapIdentity;
      }
      set
      {
        __isset.clevertapIdentity = true;
        this._clevertapIdentity = value;
      }
    }

    public string ClevertapLocation
    {
      get
      {
        return _clevertapLocation;
      }
      set
      {
        __isset.clevertapLocation = true;
        this._clevertapLocation = value;
      }
    }

    public Dictionary<string, string> FallbackUrlByCountry
    {
      get
      {
        return _fallbackUrlByCountry;
      }
      set
      {
        __isset.fallbackUrlByCountry = true;
        this._fallbackUrlByCountry = value;
      }
    }

    public Dictionary<string, string> DesktopRedirectURLByCountry
    {
      get
      {
        return _desktopRedirectURLByCountry;
      }
      set
      {
        __isset.desktopRedirectURLByCountry = true;
        this._desktopRedirectURLByCountry = value;
      }
    }

    public bool OnlyAllowTrustedIdentities
    {
      get
      {
        return _onlyAllowTrustedIdentities;
      }
      set
      {
        __isset.onlyAllowTrustedIdentities = true;
        this._onlyAllowTrustedIdentities = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool inviteDomain;
      public bool moderationEnabled;
      public bool landingPageDescription;
      public bool landingImage;
      public bool thumbLandingImage;
      public bool suffix;
      public bool fallbackUrl;
      public bool chatEnabled;
      public bool moderate;
      public bool moderateActivity;
      public bool moderateComment;
      public bool moderatePrivateChat;
      public bool moderatePublicChat;
      public bool webhooks;
      public bool googleTagManagerId;
      public bool sharedSecret;
      public bool pushNotificationsFollow;
      public bool pushNotificationsNewFriendship;
      public bool pushNotificationsAcceptedInvite;
      public bool pushNotificationsRelatedComment;
      public bool pushNotificationsLike;
      public bool pushNotificationsChatMessage;
      public bool pushNotificationsAnnouncement;
      public bool pushNotificationsComment;
      public bool preferCustomDomain;
      public bool dashboardNotificationsRelatedComment;
      public bool dashboardNotificationsLike;
      public bool dashboardNotificationsComment;
      public bool youtubeVideo;
      public bool desktopRedirectURL;
      public bool pushNotificationsMention;
      public bool dashboardNotificationsMention;
      public bool appsflyerEnabled;
      public bool adjustEnabled;
      public bool adjustTrackerId;
      public bool landingPageTitle;
      public bool redirectUrlWhitelistEnabled;
      public bool redirectUrlWhitelist;
      public bool pushNotificationsLikeActivity;
      public bool pushNotificationsLikeComment;
      public bool pushNotificationsMentionActivity;
      public bool pushNotificationsMentionComment;
      public bool pushNotificationsReplyComment;
      public bool disabled;
      public bool setReferrerOnAppInstall;
      public bool addFriendOnAppInstall;
      public bool isUsingFeeds2;
      public bool rejectModeratedActivity;
      public bool activityPendingByDefault;
      public bool commentPendingByDefault;
      public bool activitiesRateLimit;
      public bool activitiesRateLimitSamplingPeriod;
      public bool commentsRateLimit;
      public bool commentsRateLimitSamplingPeriod;
      public bool pushNotificationsRequestToJoinGroup;
      public bool pushNotificationsInviteToJoinGroup;
      public bool pushNotificationsRequestToJoinGroupApproved;
      public bool clevertapEnabled;
      public bool clevertapAccountID;
      public bool clevertapPasscode;
      public bool clevertapIdentity;
      public bool clevertapLocation;
      public bool fallbackUrlByCountry;
      public bool desktopRedirectURLByCountry;
      public bool onlyAllowTrustedIdentities;
    }

    public THAppPrivateProperties() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                InviteDomain = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                ModerationEnabled = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  LandingPageDescription = new Dictionary<string, string>();
                  TMap _map20 = iprot.ReadMapBegin();
                  for( int _i21 = 0; _i21 < _map20.Count; ++_i21)
                  {
                    string _key22;
                    string _val23;
                    _key22 = iprot.ReadString();
                    _val23 = iprot.ReadString();
                    LandingPageDescription[_key22] = _val23;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                LandingImage = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                ThumbLandingImage = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Suffix = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                FallbackUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                ChatEnabled = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Bool) {
                Moderate = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                ModerateActivity = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Bool) {
                ModerateComment = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Bool) {
                ModeratePrivateChat = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Bool) {
                ModeratePublicChat = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                Webhooks = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.String) {
                GoogleTagManagerId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.String) {
                SharedSecret = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.Bool) {
                PushNotificationsFollow = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.Bool) {
                PushNotificationsNewFriendship = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 19:
              if (field.Type == TType.Bool) {
                PushNotificationsAcceptedInvite = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.Bool) {
                PushNotificationsRelatedComment = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 21:
              if (field.Type == TType.Bool) {
                PushNotificationsLike = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 22:
              if (field.Type == TType.Bool) {
                PushNotificationsChatMessage = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 23:
              if (field.Type == TType.Bool) {
                PushNotificationsAnnouncement = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 24:
              if (field.Type == TType.Bool) {
                PushNotificationsComment = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 25:
              if (field.Type == TType.Bool) {
                PreferCustomDomain = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 26:
              if (field.Type == TType.Bool) {
                DashboardNotificationsRelatedComment = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 27:
              if (field.Type == TType.Bool) {
                DashboardNotificationsLike = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 28:
              if (field.Type == TType.Bool) {
                DashboardNotificationsComment = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 29:
              if (field.Type == TType.String) {
                YoutubeVideo = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.String) {
                DesktopRedirectURL = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 31:
              if (field.Type == TType.Bool) {
                PushNotificationsMention = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 32:
              if (field.Type == TType.Bool) {
                DashboardNotificationsMention = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 33:
              if (field.Type == TType.Bool) {
                AppsflyerEnabled = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 34:
              if (field.Type == TType.Bool) {
                AdjustEnabled = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 35:
              if (field.Type == TType.String) {
                AdjustTrackerId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 36:
              if (field.Type == TType.Map) {
                {
                  LandingPageTitle = new Dictionary<string, string>();
                  TMap _map24 = iprot.ReadMapBegin();
                  for( int _i25 = 0; _i25 < _map24.Count; ++_i25)
                  {
                    string _key26;
                    string _val27;
                    _key26 = iprot.ReadString();
                    _val27 = iprot.ReadString();
                    LandingPageTitle[_key26] = _val27;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 37:
              if (field.Type == TType.Bool) {
                RedirectUrlWhitelistEnabled = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 38:
              if (field.Type == TType.List) {
                {
                  RedirectUrlWhitelist = new List<string>();
                  TList _list28 = iprot.ReadListBegin();
                  for( int _i29 = 0; _i29 < _list28.Count; ++_i29)
                  {
                    string _elem30;
                    _elem30 = iprot.ReadString();
                    RedirectUrlWhitelist.Add(_elem30);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 39:
              if (field.Type == TType.Bool) {
                PushNotificationsLikeActivity = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 40:
              if (field.Type == TType.Bool) {
                PushNotificationsLikeComment = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 41:
              if (field.Type == TType.Bool) {
                PushNotificationsMentionActivity = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 42:
              if (field.Type == TType.Bool) {
                PushNotificationsMentionComment = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 43:
              if (field.Type == TType.Bool) {
                PushNotificationsReplyComment = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 44:
              if (field.Type == TType.Bool) {
                Disabled = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 45:
              if (field.Type == TType.Bool) {
                SetReferrerOnAppInstall = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 46:
              if (field.Type == TType.Bool) {
                AddFriendOnAppInstall = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 47:
              if (field.Type == TType.Bool) {
                IsUsingFeeds2 = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 48:
              if (field.Type == TType.Bool) {
                RejectModeratedActivity = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 49:
              if (field.Type == TType.Bool) {
                ActivityPendingByDefault = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 50:
              if (field.Type == TType.Bool) {
                CommentPendingByDefault = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 51:
              if (field.Type == TType.I32) {
                ActivitiesRateLimit = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 52:
              if (field.Type == TType.I32) {
                ActivitiesRateLimitSamplingPeriod = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 53:
              if (field.Type == TType.I32) {
                CommentsRateLimit = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 54:
              if (field.Type == TType.I32) {
                CommentsRateLimitSamplingPeriod = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 55:
              if (field.Type == TType.Bool) {
                PushNotificationsRequestToJoinGroup = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 56:
              if (field.Type == TType.Bool) {
                PushNotificationsInviteToJoinGroup = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 57:
              if (field.Type == TType.Bool) {
                PushNotificationsRequestToJoinGroupApproved = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 58:
              if (field.Type == TType.Bool) {
                ClevertapEnabled = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 59:
              if (field.Type == TType.String) {
                ClevertapAccountID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 60:
              if (field.Type == TType.String) {
                ClevertapPasscode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 61:
              if (field.Type == TType.String) {
                ClevertapIdentity = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 62:
              if (field.Type == TType.String) {
                ClevertapLocation = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 63:
              if (field.Type == TType.Map) {
                {
                  FallbackUrlByCountry = new Dictionary<string, string>();
                  TMap _map31 = iprot.ReadMapBegin();
                  for( int _i32 = 0; _i32 < _map31.Count; ++_i32)
                  {
                    string _key33;
                    string _val34;
                    _key33 = iprot.ReadString();
                    _val34 = iprot.ReadString();
                    FallbackUrlByCountry[_key33] = _val34;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 64:
              if (field.Type == TType.Map) {
                {
                  DesktopRedirectURLByCountry = new Dictionary<string, string>();
                  TMap _map35 = iprot.ReadMapBegin();
                  for( int _i36 = 0; _i36 < _map35.Count; ++_i36)
                  {
                    string _key37;
                    string _val38;
                    _key37 = iprot.ReadString();
                    _val38 = iprot.ReadString();
                    DesktopRedirectURLByCountry[_key37] = _val38;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 65:
              if (field.Type == TType.Bool) {
                OnlyAllowTrustedIdentities = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("THAppPrivateProperties");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (InviteDomain != null && __isset.inviteDomain) {
          field.Name = "inviteDomain";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InviteDomain);
          oprot.WriteFieldEnd();
        }
        if (__isset.moderationEnabled) {
          field.Name = "moderationEnabled";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(ModerationEnabled);
          oprot.WriteFieldEnd();
        }
        if (LandingPageDescription != null && __isset.landingPageDescription) {
          field.Name = "landingPageDescription";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, LandingPageDescription.Count));
            foreach (string _iter39 in LandingPageDescription.Keys)
            {
              oprot.WriteString(_iter39);
              oprot.WriteString(LandingPageDescription[_iter39]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (LandingImage != null && __isset.landingImage) {
          field.Name = "landingImage";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LandingImage);
          oprot.WriteFieldEnd();
        }
        if (ThumbLandingImage != null && __isset.thumbLandingImage) {
          field.Name = "thumbLandingImage";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ThumbLandingImage);
          oprot.WriteFieldEnd();
        }
        if (Suffix != null && __isset.suffix) {
          field.Name = "suffix";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Suffix);
          oprot.WriteFieldEnd();
        }
        if (FallbackUrl != null && __isset.fallbackUrl) {
          field.Name = "fallbackUrl";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FallbackUrl);
          oprot.WriteFieldEnd();
        }
        if (__isset.chatEnabled) {
          field.Name = "chatEnabled";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(ChatEnabled);
          oprot.WriteFieldEnd();
        }
        if (__isset.moderate) {
          field.Name = "moderate";
          field.Type = TType.Bool;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Moderate);
          oprot.WriteFieldEnd();
        }
        if (__isset.moderateActivity) {
          field.Name = "moderateActivity";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(ModerateActivity);
          oprot.WriteFieldEnd();
        }
        if (__isset.moderateComment) {
          field.Name = "moderateComment";
          field.Type = TType.Bool;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(ModerateComment);
          oprot.WriteFieldEnd();
        }
        if (__isset.moderatePrivateChat) {
          field.Name = "moderatePrivateChat";
          field.Type = TType.Bool;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(ModeratePrivateChat);
          oprot.WriteFieldEnd();
        }
        if (__isset.moderatePublicChat) {
          field.Name = "moderatePublicChat";
          field.Type = TType.Bool;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(ModeratePublicChat);
          oprot.WriteFieldEnd();
        }
        if (Webhooks != null && __isset.webhooks) {
          field.Name = "webhooks";
          field.Type = TType.String;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Webhooks);
          oprot.WriteFieldEnd();
        }
        if (GoogleTagManagerId != null && __isset.googleTagManagerId) {
          field.Name = "googleTagManagerId";
          field.Type = TType.String;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GoogleTagManagerId);
          oprot.WriteFieldEnd();
        }
        if (SharedSecret != null && __isset.sharedSecret) {
          field.Name = "sharedSecret";
          field.Type = TType.String;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SharedSecret);
          oprot.WriteFieldEnd();
        }
        if (__isset.pushNotificationsFollow) {
          field.Name = "pushNotificationsFollow";
          field.Type = TType.Bool;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PushNotificationsFollow);
          oprot.WriteFieldEnd();
        }
        if (__isset.pushNotificationsNewFriendship) {
          field.Name = "pushNotificationsNewFriendship";
          field.Type = TType.Bool;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PushNotificationsNewFriendship);
          oprot.WriteFieldEnd();
        }
        if (__isset.pushNotificationsAcceptedInvite) {
          field.Name = "pushNotificationsAcceptedInvite";
          field.Type = TType.Bool;
          field.ID = 19;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PushNotificationsAcceptedInvite);
          oprot.WriteFieldEnd();
        }
        if (__isset.pushNotificationsRelatedComment) {
          field.Name = "pushNotificationsRelatedComment";
          field.Type = TType.Bool;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PushNotificationsRelatedComment);
          oprot.WriteFieldEnd();
        }
        if (__isset.pushNotificationsLike) {
          field.Name = "pushNotificationsLike";
          field.Type = TType.Bool;
          field.ID = 21;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PushNotificationsLike);
          oprot.WriteFieldEnd();
        }
        if (__isset.pushNotificationsChatMessage) {
          field.Name = "pushNotificationsChatMessage";
          field.Type = TType.Bool;
          field.ID = 22;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PushNotificationsChatMessage);
          oprot.WriteFieldEnd();
        }
        if (__isset.pushNotificationsAnnouncement) {
          field.Name = "pushNotificationsAnnouncement";
          field.Type = TType.Bool;
          field.ID = 23;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PushNotificationsAnnouncement);
          oprot.WriteFieldEnd();
        }
        if (__isset.pushNotificationsComment) {
          field.Name = "pushNotificationsComment";
          field.Type = TType.Bool;
          field.ID = 24;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PushNotificationsComment);
          oprot.WriteFieldEnd();
        }
        if (__isset.preferCustomDomain) {
          field.Name = "preferCustomDomain";
          field.Type = TType.Bool;
          field.ID = 25;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PreferCustomDomain);
          oprot.WriteFieldEnd();
        }
        if (__isset.dashboardNotificationsRelatedComment) {
          field.Name = "dashboardNotificationsRelatedComment";
          field.Type = TType.Bool;
          field.ID = 26;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(DashboardNotificationsRelatedComment);
          oprot.WriteFieldEnd();
        }
        if (__isset.dashboardNotificationsLike) {
          field.Name = "dashboardNotificationsLike";
          field.Type = TType.Bool;
          field.ID = 27;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(DashboardNotificationsLike);
          oprot.WriteFieldEnd();
        }
        if (__isset.dashboardNotificationsComment) {
          field.Name = "dashboardNotificationsComment";
          field.Type = TType.Bool;
          field.ID = 28;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(DashboardNotificationsComment);
          oprot.WriteFieldEnd();
        }
        if (YoutubeVideo != null && __isset.youtubeVideo) {
          field.Name = "youtubeVideo";
          field.Type = TType.String;
          field.ID = 29;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(YoutubeVideo);
          oprot.WriteFieldEnd();
        }
        if (DesktopRedirectURL != null && __isset.desktopRedirectURL) {
          field.Name = "desktopRedirectURL";
          field.Type = TType.String;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DesktopRedirectURL);
          oprot.WriteFieldEnd();
        }
        if (__isset.pushNotificationsMention) {
          field.Name = "pushNotificationsMention";
          field.Type = TType.Bool;
          field.ID = 31;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PushNotificationsMention);
          oprot.WriteFieldEnd();
        }
        if (__isset.dashboardNotificationsMention) {
          field.Name = "dashboardNotificationsMention";
          field.Type = TType.Bool;
          field.ID = 32;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(DashboardNotificationsMention);
          oprot.WriteFieldEnd();
        }
        if (__isset.appsflyerEnabled) {
          field.Name = "appsflyerEnabled";
          field.Type = TType.Bool;
          field.ID = 33;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(AppsflyerEnabled);
          oprot.WriteFieldEnd();
        }
        if (__isset.adjustEnabled) {
          field.Name = "adjustEnabled";
          field.Type = TType.Bool;
          field.ID = 34;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(AdjustEnabled);
          oprot.WriteFieldEnd();
        }
        if (AdjustTrackerId != null && __isset.adjustTrackerId) {
          field.Name = "adjustTrackerId";
          field.Type = TType.String;
          field.ID = 35;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AdjustTrackerId);
          oprot.WriteFieldEnd();
        }
        if (LandingPageTitle != null && __isset.landingPageTitle) {
          field.Name = "landingPageTitle";
          field.Type = TType.Map;
          field.ID = 36;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, LandingPageTitle.Count));
            foreach (string _iter40 in LandingPageTitle.Keys)
            {
              oprot.WriteString(_iter40);
              oprot.WriteString(LandingPageTitle[_iter40]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.redirectUrlWhitelistEnabled) {
          field.Name = "redirectUrlWhitelistEnabled";
          field.Type = TType.Bool;
          field.ID = 37;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(RedirectUrlWhitelistEnabled);
          oprot.WriteFieldEnd();
        }
        if (RedirectUrlWhitelist != null && __isset.redirectUrlWhitelist) {
          field.Name = "redirectUrlWhitelist";
          field.Type = TType.List;
          field.ID = 38;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, RedirectUrlWhitelist.Count));
            foreach (string _iter41 in RedirectUrlWhitelist)
            {
              oprot.WriteString(_iter41);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.pushNotificationsLikeActivity) {
          field.Name = "pushNotificationsLikeActivity";
          field.Type = TType.Bool;
          field.ID = 39;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PushNotificationsLikeActivity);
          oprot.WriteFieldEnd();
        }
        if (__isset.pushNotificationsLikeComment) {
          field.Name = "pushNotificationsLikeComment";
          field.Type = TType.Bool;
          field.ID = 40;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PushNotificationsLikeComment);
          oprot.WriteFieldEnd();
        }
        if (__isset.pushNotificationsMentionActivity) {
          field.Name = "pushNotificationsMentionActivity";
          field.Type = TType.Bool;
          field.ID = 41;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PushNotificationsMentionActivity);
          oprot.WriteFieldEnd();
        }
        if (__isset.pushNotificationsMentionComment) {
          field.Name = "pushNotificationsMentionComment";
          field.Type = TType.Bool;
          field.ID = 42;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PushNotificationsMentionComment);
          oprot.WriteFieldEnd();
        }
        if (__isset.pushNotificationsReplyComment) {
          field.Name = "pushNotificationsReplyComment";
          field.Type = TType.Bool;
          field.ID = 43;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PushNotificationsReplyComment);
          oprot.WriteFieldEnd();
        }
        if (__isset.disabled) {
          field.Name = "disabled";
          field.Type = TType.Bool;
          field.ID = 44;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Disabled);
          oprot.WriteFieldEnd();
        }
        if (__isset.setReferrerOnAppInstall) {
          field.Name = "setReferrerOnAppInstall";
          field.Type = TType.Bool;
          field.ID = 45;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(SetReferrerOnAppInstall);
          oprot.WriteFieldEnd();
        }
        if (__isset.addFriendOnAppInstall) {
          field.Name = "addFriendOnAppInstall";
          field.Type = TType.Bool;
          field.ID = 46;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(AddFriendOnAppInstall);
          oprot.WriteFieldEnd();
        }
        if (__isset.isUsingFeeds2) {
          field.Name = "isUsingFeeds2";
          field.Type = TType.Bool;
          field.ID = 47;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsUsingFeeds2);
          oprot.WriteFieldEnd();
        }
        if (__isset.rejectModeratedActivity) {
          field.Name = "rejectModeratedActivity";
          field.Type = TType.Bool;
          field.ID = 48;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(RejectModeratedActivity);
          oprot.WriteFieldEnd();
        }
        if (__isset.activityPendingByDefault) {
          field.Name = "activityPendingByDefault";
          field.Type = TType.Bool;
          field.ID = 49;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(ActivityPendingByDefault);
          oprot.WriteFieldEnd();
        }
        if (__isset.commentPendingByDefault) {
          field.Name = "commentPendingByDefault";
          field.Type = TType.Bool;
          field.ID = 50;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(CommentPendingByDefault);
          oprot.WriteFieldEnd();
        }
        if (__isset.activitiesRateLimit) {
          field.Name = "activitiesRateLimit";
          field.Type = TType.I32;
          field.ID = 51;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ActivitiesRateLimit);
          oprot.WriteFieldEnd();
        }
        if (__isset.activitiesRateLimitSamplingPeriod) {
          field.Name = "activitiesRateLimitSamplingPeriod";
          field.Type = TType.I32;
          field.ID = 52;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ActivitiesRateLimitSamplingPeriod);
          oprot.WriteFieldEnd();
        }
        if (__isset.commentsRateLimit) {
          field.Name = "commentsRateLimit";
          field.Type = TType.I32;
          field.ID = 53;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(CommentsRateLimit);
          oprot.WriteFieldEnd();
        }
        if (__isset.commentsRateLimitSamplingPeriod) {
          field.Name = "commentsRateLimitSamplingPeriod";
          field.Type = TType.I32;
          field.ID = 54;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(CommentsRateLimitSamplingPeriod);
          oprot.WriteFieldEnd();
        }
        if (__isset.pushNotificationsRequestToJoinGroup) {
          field.Name = "pushNotificationsRequestToJoinGroup";
          field.Type = TType.Bool;
          field.ID = 55;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PushNotificationsRequestToJoinGroup);
          oprot.WriteFieldEnd();
        }
        if (__isset.pushNotificationsInviteToJoinGroup) {
          field.Name = "pushNotificationsInviteToJoinGroup";
          field.Type = TType.Bool;
          field.ID = 56;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PushNotificationsInviteToJoinGroup);
          oprot.WriteFieldEnd();
        }
        if (__isset.pushNotificationsRequestToJoinGroupApproved) {
          field.Name = "pushNotificationsRequestToJoinGroupApproved";
          field.Type = TType.Bool;
          field.ID = 57;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PushNotificationsRequestToJoinGroupApproved);
          oprot.WriteFieldEnd();
        }
        if (__isset.clevertapEnabled) {
          field.Name = "clevertapEnabled";
          field.Type = TType.Bool;
          field.ID = 58;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(ClevertapEnabled);
          oprot.WriteFieldEnd();
        }
        if (ClevertapAccountID != null && __isset.clevertapAccountID) {
          field.Name = "clevertapAccountID";
          field.Type = TType.String;
          field.ID = 59;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ClevertapAccountID);
          oprot.WriteFieldEnd();
        }
        if (ClevertapPasscode != null && __isset.clevertapPasscode) {
          field.Name = "clevertapPasscode";
          field.Type = TType.String;
          field.ID = 60;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ClevertapPasscode);
          oprot.WriteFieldEnd();
        }
        if (ClevertapIdentity != null && __isset.clevertapIdentity) {
          field.Name = "clevertapIdentity";
          field.Type = TType.String;
          field.ID = 61;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ClevertapIdentity);
          oprot.WriteFieldEnd();
        }
        if (ClevertapLocation != null && __isset.clevertapLocation) {
          field.Name = "clevertapLocation";
          field.Type = TType.String;
          field.ID = 62;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ClevertapLocation);
          oprot.WriteFieldEnd();
        }
        if (FallbackUrlByCountry != null && __isset.fallbackUrlByCountry) {
          field.Name = "fallbackUrlByCountry";
          field.Type = TType.Map;
          field.ID = 63;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, FallbackUrlByCountry.Count));
            foreach (string _iter42 in FallbackUrlByCountry.Keys)
            {
              oprot.WriteString(_iter42);
              oprot.WriteString(FallbackUrlByCountry[_iter42]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (DesktopRedirectURLByCountry != null && __isset.desktopRedirectURLByCountry) {
          field.Name = "desktopRedirectURLByCountry";
          field.Type = TType.Map;
          field.ID = 64;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, DesktopRedirectURLByCountry.Count));
            foreach (string _iter43 in DesktopRedirectURLByCountry.Keys)
            {
              oprot.WriteString(_iter43);
              oprot.WriteString(DesktopRedirectURLByCountry[_iter43]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.onlyAllowTrustedIdentities) {
          field.Name = "onlyAllowTrustedIdentities";
          field.Type = TType.Bool;
          field.ID = 65;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(OnlyAllowTrustedIdentities);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("THAppPrivateProperties(");
      bool __first = true;
      if (InviteDomain != null && __isset.inviteDomain) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InviteDomain: ");
        __sb.Append(InviteDomain);
      }
      if (__isset.moderationEnabled) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ModerationEnabled: ");
        __sb.Append(ModerationEnabled);
      }
      if (LandingPageDescription != null && __isset.landingPageDescription) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LandingPageDescription: ");
        __sb.Append(LandingPageDescription.ToDebugString());
      }
      if (LandingImage != null && __isset.landingImage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LandingImage: ");
        __sb.Append(LandingImage);
      }
      if (ThumbLandingImage != null && __isset.thumbLandingImage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ThumbLandingImage: ");
        __sb.Append(ThumbLandingImage);
      }
      if (Suffix != null && __isset.suffix) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Suffix: ");
        __sb.Append(Suffix);
      }
      if (FallbackUrl != null && __isset.fallbackUrl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FallbackUrl: ");
        __sb.Append(FallbackUrl);
      }
      if (__isset.chatEnabled) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatEnabled: ");
        __sb.Append(ChatEnabled);
      }
      if (__isset.moderate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Moderate: ");
        __sb.Append(Moderate);
      }
      if (__isset.moderateActivity) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ModerateActivity: ");
        __sb.Append(ModerateActivity);
      }
      if (__isset.moderateComment) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ModerateComment: ");
        __sb.Append(ModerateComment);
      }
      if (__isset.moderatePrivateChat) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ModeratePrivateChat: ");
        __sb.Append(ModeratePrivateChat);
      }
      if (__isset.moderatePublicChat) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ModeratePublicChat: ");
        __sb.Append(ModeratePublicChat);
      }
      if (Webhooks != null && __isset.webhooks) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Webhooks: ");
        __sb.Append(Webhooks);
      }
      if (GoogleTagManagerId != null && __isset.googleTagManagerId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GoogleTagManagerId: ");
        __sb.Append(GoogleTagManagerId);
      }
      if (SharedSecret != null && __isset.sharedSecret) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SharedSecret: ");
        __sb.Append(SharedSecret);
      }
      if (__isset.pushNotificationsFollow) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushNotificationsFollow: ");
        __sb.Append(PushNotificationsFollow);
      }
      if (__isset.pushNotificationsNewFriendship) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushNotificationsNewFriendship: ");
        __sb.Append(PushNotificationsNewFriendship);
      }
      if (__isset.pushNotificationsAcceptedInvite) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushNotificationsAcceptedInvite: ");
        __sb.Append(PushNotificationsAcceptedInvite);
      }
      if (__isset.pushNotificationsRelatedComment) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushNotificationsRelatedComment: ");
        __sb.Append(PushNotificationsRelatedComment);
      }
      if (__isset.pushNotificationsLike) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushNotificationsLike: ");
        __sb.Append(PushNotificationsLike);
      }
      if (__isset.pushNotificationsChatMessage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushNotificationsChatMessage: ");
        __sb.Append(PushNotificationsChatMessage);
      }
      if (__isset.pushNotificationsAnnouncement) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushNotificationsAnnouncement: ");
        __sb.Append(PushNotificationsAnnouncement);
      }
      if (__isset.pushNotificationsComment) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushNotificationsComment: ");
        __sb.Append(PushNotificationsComment);
      }
      if (__isset.preferCustomDomain) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PreferCustomDomain: ");
        __sb.Append(PreferCustomDomain);
      }
      if (__isset.dashboardNotificationsRelatedComment) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DashboardNotificationsRelatedComment: ");
        __sb.Append(DashboardNotificationsRelatedComment);
      }
      if (__isset.dashboardNotificationsLike) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DashboardNotificationsLike: ");
        __sb.Append(DashboardNotificationsLike);
      }
      if (__isset.dashboardNotificationsComment) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DashboardNotificationsComment: ");
        __sb.Append(DashboardNotificationsComment);
      }
      if (YoutubeVideo != null && __isset.youtubeVideo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("YoutubeVideo: ");
        __sb.Append(YoutubeVideo);
      }
      if (DesktopRedirectURL != null && __isset.desktopRedirectURL) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DesktopRedirectURL: ");
        __sb.Append(DesktopRedirectURL);
      }
      if (__isset.pushNotificationsMention) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushNotificationsMention: ");
        __sb.Append(PushNotificationsMention);
      }
      if (__isset.dashboardNotificationsMention) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DashboardNotificationsMention: ");
        __sb.Append(DashboardNotificationsMention);
      }
      if (__isset.appsflyerEnabled) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppsflyerEnabled: ");
        __sb.Append(AppsflyerEnabled);
      }
      if (__isset.adjustEnabled) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AdjustEnabled: ");
        __sb.Append(AdjustEnabled);
      }
      if (AdjustTrackerId != null && __isset.adjustTrackerId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AdjustTrackerId: ");
        __sb.Append(AdjustTrackerId);
      }
      if (LandingPageTitle != null && __isset.landingPageTitle) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LandingPageTitle: ");
        __sb.Append(LandingPageTitle.ToDebugString());
      }
      if (__isset.redirectUrlWhitelistEnabled) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RedirectUrlWhitelistEnabled: ");
        __sb.Append(RedirectUrlWhitelistEnabled);
      }
      if (RedirectUrlWhitelist != null && __isset.redirectUrlWhitelist) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RedirectUrlWhitelist: ");
        __sb.Append(RedirectUrlWhitelist.ToDebugString());
      }
      if (__isset.pushNotificationsLikeActivity) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushNotificationsLikeActivity: ");
        __sb.Append(PushNotificationsLikeActivity);
      }
      if (__isset.pushNotificationsLikeComment) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushNotificationsLikeComment: ");
        __sb.Append(PushNotificationsLikeComment);
      }
      if (__isset.pushNotificationsMentionActivity) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushNotificationsMentionActivity: ");
        __sb.Append(PushNotificationsMentionActivity);
      }
      if (__isset.pushNotificationsMentionComment) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushNotificationsMentionComment: ");
        __sb.Append(PushNotificationsMentionComment);
      }
      if (__isset.pushNotificationsReplyComment) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushNotificationsReplyComment: ");
        __sb.Append(PushNotificationsReplyComment);
      }
      if (__isset.disabled) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Disabled: ");
        __sb.Append(Disabled);
      }
      if (__isset.setReferrerOnAppInstall) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SetReferrerOnAppInstall: ");
        __sb.Append(SetReferrerOnAppInstall);
      }
      if (__isset.addFriendOnAppInstall) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AddFriendOnAppInstall: ");
        __sb.Append(AddFriendOnAppInstall);
      }
      if (__isset.isUsingFeeds2) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsUsingFeeds2: ");
        __sb.Append(IsUsingFeeds2);
      }
      if (__isset.rejectModeratedActivity) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RejectModeratedActivity: ");
        __sb.Append(RejectModeratedActivity);
      }
      if (__isset.activityPendingByDefault) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ActivityPendingByDefault: ");
        __sb.Append(ActivityPendingByDefault);
      }
      if (__isset.commentPendingByDefault) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CommentPendingByDefault: ");
        __sb.Append(CommentPendingByDefault);
      }
      if (__isset.activitiesRateLimit) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ActivitiesRateLimit: ");
        __sb.Append(ActivitiesRateLimit);
      }
      if (__isset.activitiesRateLimitSamplingPeriod) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ActivitiesRateLimitSamplingPeriod: ");
        __sb.Append(ActivitiesRateLimitSamplingPeriod);
      }
      if (__isset.commentsRateLimit) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CommentsRateLimit: ");
        __sb.Append(CommentsRateLimit);
      }
      if (__isset.commentsRateLimitSamplingPeriod) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CommentsRateLimitSamplingPeriod: ");
        __sb.Append(CommentsRateLimitSamplingPeriod);
      }
      if (__isset.pushNotificationsRequestToJoinGroup) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushNotificationsRequestToJoinGroup: ");
        __sb.Append(PushNotificationsRequestToJoinGroup);
      }
      if (__isset.pushNotificationsInviteToJoinGroup) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushNotificationsInviteToJoinGroup: ");
        __sb.Append(PushNotificationsInviteToJoinGroup);
      }
      if (__isset.pushNotificationsRequestToJoinGroupApproved) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushNotificationsRequestToJoinGroupApproved: ");
        __sb.Append(PushNotificationsRequestToJoinGroupApproved);
      }
      if (__isset.clevertapEnabled) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClevertapEnabled: ");
        __sb.Append(ClevertapEnabled);
      }
      if (ClevertapAccountID != null && __isset.clevertapAccountID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClevertapAccountID: ");
        __sb.Append(ClevertapAccountID);
      }
      if (ClevertapPasscode != null && __isset.clevertapPasscode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClevertapPasscode: ");
        __sb.Append(ClevertapPasscode);
      }
      if (ClevertapIdentity != null && __isset.clevertapIdentity) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClevertapIdentity: ");
        __sb.Append(ClevertapIdentity);
      }
      if (ClevertapLocation != null && __isset.clevertapLocation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClevertapLocation: ");
        __sb.Append(ClevertapLocation);
      }
      if (FallbackUrlByCountry != null && __isset.fallbackUrlByCountry) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FallbackUrlByCountry: ");
        __sb.Append(FallbackUrlByCountry.ToDebugString());
      }
      if (DesktopRedirectURLByCountry != null && __isset.desktopRedirectURLByCountry) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DesktopRedirectURLByCountry: ");
        __sb.Append(DesktopRedirectURLByCountry.ToDebugString());
      }
      if (__isset.onlyAllowTrustedIdentities) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OnlyAllowTrustedIdentities: ");
        __sb.Append(OnlyAllowTrustedIdentities);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
