#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SFActionConfig : TBase
  {
    private long _limit;
    private Dictionary<string, string> _publicProperties;
    private Dictionary<string, string> _privateProperties;
    private string _templateName;
    private string _whEventName;
    private Dictionary<string, string> _whCustomData;
    private long _count;
    private string _referrerEvent;
    private long _banPeriod;
    private string _banReason;

    /// <summary>
    /// Zero means no limit
    /// </summary>
    public long Limit
    {
      get
      {
        return _limit;
      }
      set
      {
        __isset.limit = true;
        this._limit = value;
      }
    }

    /// <summary>
    /// Key/value pairs for type=CustomProp
    /// </summary>
    public Dictionary<string, string> PublicProperties
    {
      get
      {
        return _publicProperties;
      }
      set
      {
        __isset.publicProperties = true;
        this._publicProperties = value;
      }
    }

    public Dictionary<string, string> PrivateProperties
    {
      get
      {
        return _privateProperties;
      }
      set
      {
        __isset.privateProperties = true;
        this._privateProperties = value;
      }
    }

    /// <summary>
    /// Template name for push notifications
    /// </summary>
    public string TemplateName
    {
      get
      {
        return _templateName;
      }
      set
      {
        __isset.templateName = true;
        this._templateName = value;
      }
    }

    /// <summary>
    /// Custom webhook event name
    /// </summary>
    public string WhEventName
    {
      get
      {
        return _whEventName;
      }
      set
      {
        __isset.whEventName = true;
        this._whEventName = value;
      }
    }

    /// <summary>
    /// Custom data for webhook
    /// </summary>
    public Dictionary<string, string> WhCustomData
    {
      get
      {
        return _whCustomData;
      }
      set
      {
        __isset.whCustomData = true;
        this._whCustomData = value;
      }
    }

    /// <summary>
    /// How many events per target to wait before taking action
    /// </summary>
    public long Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.count = true;
        this._count = value;
      }
    }

    /// <summary>
    /// Which specific referrer (based on the event) is configured as target, empty for all
    /// </summary>
    public string ReferrerEvent
    {
      get
      {
        return _referrerEvent;
      }
      set
      {
        __isset.referrerEvent = true;
        this._referrerEvent = value;
      }
    }

    /// <summary>
    /// Period in seconds from now that user will be banned for. If 0, then user will be unbanned
    /// </summary>
    public long BanPeriod
    {
      get
      {
        return _banPeriod;
      }
      set
      {
        __isset.banPeriod = true;
        this._banPeriod = value;
      }
    }

    /// <summary>
    /// Reason for banning the user
    /// </summary>
    public string BanReason
    {
      get
      {
        return _banReason;
      }
      set
      {
        __isset.banReason = true;
        this._banReason = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool limit;
      public bool publicProperties;
      public bool privateProperties;
      public bool templateName;
      public bool whEventName;
      public bool whCustomData;
      public bool count;
      public bool referrerEvent;
      public bool banPeriod;
      public bool banReason;
    }

    public SFActionConfig() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Limit = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  PublicProperties = new Dictionary<string, string>();
                  TMap _map4 = iprot.ReadMapBegin();
                  for( int _i5 = 0; _i5 < _map4.Count; ++_i5)
                  {
                    string _key6;
                    string _val7;
                    _key6 = iprot.ReadString();
                    _val7 = iprot.ReadString();
                    PublicProperties[_key6] = _val7;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  PrivateProperties = new Dictionary<string, string>();
                  TMap _map8 = iprot.ReadMapBegin();
                  for( int _i9 = 0; _i9 < _map8.Count; ++_i9)
                  {
                    string _key10;
                    string _val11;
                    _key10 = iprot.ReadString();
                    _val11 = iprot.ReadString();
                    PrivateProperties[_key10] = _val11;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                TemplateName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                WhEventName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Map) {
                {
                  WhCustomData = new Dictionary<string, string>();
                  TMap _map12 = iprot.ReadMapBegin();
                  for( int _i13 = 0; _i13 < _map12.Count; ++_i13)
                  {
                    string _key14;
                    string _val15;
                    _key14 = iprot.ReadString();
                    _val15 = iprot.ReadString();
                    WhCustomData[_key14] = _val15;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Count = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                ReferrerEvent = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I64) {
                BanPeriod = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                BanReason = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SFActionConfig");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.limit) {
          field.Name = "limit";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Limit);
          oprot.WriteFieldEnd();
        }
        if (PublicProperties != null && __isset.publicProperties) {
          field.Name = "publicProperties";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, PublicProperties.Count));
            foreach (string _iter16 in PublicProperties.Keys)
            {
              oprot.WriteString(_iter16);
              oprot.WriteString(PublicProperties[_iter16]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (PrivateProperties != null && __isset.privateProperties) {
          field.Name = "privateProperties";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, PrivateProperties.Count));
            foreach (string _iter17 in PrivateProperties.Keys)
            {
              oprot.WriteString(_iter17);
              oprot.WriteString(PrivateProperties[_iter17]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (TemplateName != null && __isset.templateName) {
          field.Name = "templateName";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TemplateName);
          oprot.WriteFieldEnd();
        }
        if (WhEventName != null && __isset.whEventName) {
          field.Name = "whEventName";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(WhEventName);
          oprot.WriteFieldEnd();
        }
        if (WhCustomData != null && __isset.whCustomData) {
          field.Name = "whCustomData";
          field.Type = TType.Map;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, WhCustomData.Count));
            foreach (string _iter18 in WhCustomData.Keys)
            {
              oprot.WriteString(_iter18);
              oprot.WriteString(WhCustomData[_iter18]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Count);
          oprot.WriteFieldEnd();
        }
        if (ReferrerEvent != null && __isset.referrerEvent) {
          field.Name = "referrerEvent";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ReferrerEvent);
          oprot.WriteFieldEnd();
        }
        if (__isset.banPeriod) {
          field.Name = "banPeriod";
          field.Type = TType.I64;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(BanPeriod);
          oprot.WriteFieldEnd();
        }
        if (BanReason != null && __isset.banReason) {
          field.Name = "banReason";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BanReason);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SFActionConfig(");
      bool __first = true;
      if (__isset.limit) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Limit: ");
        __sb.Append(Limit);
      }
      if (PublicProperties != null && __isset.publicProperties) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PublicProperties: ");
        __sb.Append(PublicProperties.ToDebugString());
      }
      if (PrivateProperties != null && __isset.privateProperties) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PrivateProperties: ");
        __sb.Append(PrivateProperties.ToDebugString());
      }
      if (TemplateName != null && __isset.templateName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TemplateName: ");
        __sb.Append(TemplateName);
      }
      if (WhEventName != null && __isset.whEventName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("WhEventName: ");
        __sb.Append(WhEventName);
      }
      if (WhCustomData != null && __isset.whCustomData) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("WhCustomData: ");
        __sb.Append(WhCustomData.ToDebugString());
      }
      if (__isset.count) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Count: ");
        __sb.Append(Count);
      }
      if (ReferrerEvent != null && __isset.referrerEvent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReferrerEvent: ");
        __sb.Append(ReferrerEvent);
      }
      if (__isset.banPeriod) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BanPeriod: ");
        __sb.Append(BanPeriod);
      }
      if (BanReason != null && __isset.banReason) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BanReason: ");
        __sb.Append(BanReason);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
