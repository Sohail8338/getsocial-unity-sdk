#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  /// <summary>
  /// #sdk7
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AFActivity : TBase
  {
    private string _id;
    private Dictionary<string, AFContent> _content;
    private string _contentType;
    private AFUserReactions _reactions;
    private Dictionary<string, string> _properties;
    private THCreator _author;
    private long _createdAt;
    private bool _isAnnouncement;
    private Dictionary<string, List<AFMention>> _mentions;
    private AFEntityReference _source;
    private string _status;
    private long _statusUpdatedAt;
    private AFPollContent _poll;
    private bool _allowMultiReactions;
    private double _score;
    private List<string> _labels;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public Dictionary<string, AFContent> Content
    {
      get
      {
        return _content;
      }
      set
      {
        __isset.content = true;
        this._content = value;
      }
    }

    public string ContentType
    {
      get
      {
        return _contentType;
      }
      set
      {
        __isset.contentType = true;
        this._contentType = value;
      }
    }

    /// <summary>
    /// post, comment, friend_rel_created, custom
    /// </summary>
    public AFUserReactions Reactions
    {
      get
      {
        return _reactions;
      }
      set
      {
        __isset.reactions = true;
        this._reactions = value;
      }
    }

    public Dictionary<string, string> Properties
    {
      get
      {
        return _properties;
      }
      set
      {
        __isset.properties = true;
        this._properties = value;
      }
    }

    public THCreator Author
    {
      get
      {
        return _author;
      }
      set
      {
        __isset.author = true;
        this._author = value;
      }
    }

    public long CreatedAt
    {
      get
      {
        return _createdAt;
      }
      set
      {
        __isset.createdAt = true;
        this._createdAt = value;
      }
    }

    public bool IsAnnouncement
    {
      get
      {
        return _isAnnouncement;
      }
      set
      {
        __isset.isAnnouncement = true;
        this._isAnnouncement = value;
      }
    }

    public Dictionary<string, List<AFMention>> Mentions
    {
      get
      {
        return _mentions;
      }
      set
      {
        __isset.mentions = true;
        this._mentions = value;
      }
    }

    public AFEntityReference Source
    {
      get
      {
        return _source;
      }
      set
      {
        __isset.source = true;
        this._source = value;
      }
    }

    /// <summary>
    /// Pending post should be returned only to the author.
    /// </summary>
    public string Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public long StatusUpdatedAt
    {
      get
      {
        return _statusUpdatedAt;
      }
      set
      {
        __isset.statusUpdatedAt = true;
        this._statusUpdatedAt = value;
      }
    }

    public AFPollContent Poll
    {
      get
      {
        return _poll;
      }
      set
      {
        __isset.poll = true;
        this._poll = value;
      }
    }

    public bool AllowMultiReactions
    {
      get
      {
        return _allowMultiReactions;
      }
      set
      {
        __isset.allowMultiReactions = true;
        this._allowMultiReactions = value;
      }
    }

    public double Score
    {
      get
      {
        return _score;
      }
      set
      {
        __isset.score = true;
        this._score = value;
      }
    }

    public List<string> Labels
    {
      get
      {
        return _labels;
      }
      set
      {
        __isset.labels = true;
        this._labels = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool content;
      public bool contentType;
      public bool reactions;
      public bool properties;
      public bool author;
      public bool createdAt;
      public bool isAnnouncement;
      public bool mentions;
      public bool source;
      public bool status;
      public bool statusUpdatedAt;
      public bool poll;
      public bool allowMultiReactions;
      public bool score;
      public bool labels;
    }

    public AFActivity() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Content = new Dictionary<string, AFContent>();
                  TMap _map46 = iprot.ReadMapBegin();
                  for( int _i47 = 0; _i47 < _map46.Count; ++_i47)
                  {
                    string _key48;
                    AFContent _val49;
                    _key48 = iprot.ReadString();
                    _val49 = new AFContent();
                    _val49.Read(iprot);
                    Content[_key48] = _val49;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                ContentType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Reactions = new AFUserReactions();
                Reactions.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Map) {
                {
                  Properties = new Dictionary<string, string>();
                  TMap _map50 = iprot.ReadMapBegin();
                  for( int _i51 = 0; _i51 < _map50.Count; ++_i51)
                  {
                    string _key52;
                    string _val53;
                    _key52 = iprot.ReadString();
                    _val53 = iprot.ReadString();
                    Properties[_key52] = _val53;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                Author = new THCreator();
                Author.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                CreatedAt = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Bool) {
                IsAnnouncement = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Map) {
                {
                  Mentions = new Dictionary<string, List<AFMention>>();
                  TMap _map54 = iprot.ReadMapBegin();
                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)
                  {
                    string _key56;
                    List<AFMention> _val57;
                    _key56 = iprot.ReadString();
                    {
                      _val57 = new List<AFMention>();
                      TList _list58 = iprot.ReadListBegin();
                      for( int _i59 = 0; _i59 < _list58.Count; ++_i59)
                      {
                        AFMention _elem60;
                        _elem60 = new AFMention();
                        _elem60.Read(iprot);
                        _val57.Add(_elem60);
                      }
                      iprot.ReadListEnd();
                    }
                    Mentions[_key56] = _val57;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Struct) {
                Source = new AFEntityReference();
                Source.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                Status = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.I64) {
                StatusUpdatedAt = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.Struct) {
                Poll = new AFPollContent();
                Poll.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.Bool) {
                AllowMultiReactions = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.Double) {
                Score = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.List) {
                {
                  Labels = new List<string>();
                  TList _list61 = iprot.ReadListBegin();
                  for( int _i62 = 0; _i62 < _list61.Count; ++_i62)
                  {
                    string _elem63;
                    _elem63 = iprot.ReadString();
                    Labels.Add(_elem63);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AFActivity");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Content != null && __isset.content) {
          field.Name = "content";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Content.Count));
            foreach (string _iter64 in Content.Keys)
            {
              oprot.WriteString(_iter64);
              Content[_iter64].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ContentType != null && __isset.contentType) {
          field.Name = "contentType";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ContentType);
          oprot.WriteFieldEnd();
        }
        if (Reactions != null && __isset.reactions) {
          field.Name = "reactions";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Reactions.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Properties != null && __isset.properties) {
          field.Name = "properties";
          field.Type = TType.Map;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
            foreach (string _iter65 in Properties.Keys)
            {
              oprot.WriteString(_iter65);
              oprot.WriteString(Properties[_iter65]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Author != null && __isset.author) {
          field.Name = "author";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          Author.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.createdAt) {
          field.Name = "createdAt";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(CreatedAt);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAnnouncement) {
          field.Name = "isAnnouncement";
          field.Type = TType.Bool;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsAnnouncement);
          oprot.WriteFieldEnd();
        }
        if (Mentions != null && __isset.mentions) {
          field.Name = "mentions";
          field.Type = TType.Map;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.List, Mentions.Count));
            foreach (string _iter66 in Mentions.Keys)
            {
              oprot.WriteString(_iter66);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Mentions[_iter66].Count));
                foreach (AFMention _iter67 in Mentions[_iter66])
                {
                  _iter67.Write(oprot);
                }
                oprot.WriteListEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Source != null && __isset.source) {
          field.Name = "source";
          field.Type = TType.Struct;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          Source.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Status != null && __isset.status) {
          field.Name = "status";
          field.Type = TType.String;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Status);
          oprot.WriteFieldEnd();
        }
        if (__isset.statusUpdatedAt) {
          field.Name = "statusUpdatedAt";
          field.Type = TType.I64;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(StatusUpdatedAt);
          oprot.WriteFieldEnd();
        }
        if (Poll != null && __isset.poll) {
          field.Name = "poll";
          field.Type = TType.Struct;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          Poll.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.allowMultiReactions) {
          field.Name = "allowMultiReactions";
          field.Type = TType.Bool;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(AllowMultiReactions);
          oprot.WriteFieldEnd();
        }
        if (__isset.score) {
          field.Name = "score";
          field.Type = TType.Double;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Score);
          oprot.WriteFieldEnd();
        }
        if (Labels != null && __isset.labels) {
          field.Name = "labels";
          field.Type = TType.List;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Labels.Count));
            foreach (string _iter68 in Labels)
            {
              oprot.WriteString(_iter68);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AFActivity(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Content != null && __isset.content) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Content: ");
        __sb.Append(Content.ToDebugString());
      }
      if (ContentType != null && __isset.contentType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContentType: ");
        __sb.Append(ContentType);
      }
      if (Reactions != null && __isset.reactions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Reactions: ");
        __sb.Append(Reactions== null ? "<null>" : Reactions.ToString());
      }
      if (Properties != null && __isset.properties) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Properties: ");
        __sb.Append(Properties.ToDebugString());
      }
      if (Author != null && __isset.author) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Author: ");
        __sb.Append(Author== null ? "<null>" : Author.ToString());
      }
      if (__isset.createdAt) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CreatedAt: ");
        __sb.Append(CreatedAt);
      }
      if (__isset.isAnnouncement) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsAnnouncement: ");
        __sb.Append(IsAnnouncement);
      }
      if (Mentions != null && __isset.mentions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mentions: ");
        __sb.Append(Mentions.ToDebugString());
      }
      if (Source != null && __isset.source) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Source: ");
        __sb.Append(Source);
      }
      if (Status != null && __isset.status) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Status: ");
        __sb.Append(Status);
      }
      if (__isset.statusUpdatedAt) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StatusUpdatedAt: ");
        __sb.Append(StatusUpdatedAt);
      }
      if (Poll != null && __isset.poll) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Poll: ");
        __sb.Append(Poll== null ? "<null>" : Poll.ToString());
      }
      if (__isset.allowMultiReactions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AllowMultiReactions: ");
        __sb.Append(AllowMultiReactions);
      }
      if (__isset.score) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Score: ");
        __sb.Append(Score);
      }
      if (Labels != null && __isset.labels) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Labels: ");
        __sb.Append(Labels.ToDebugString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
