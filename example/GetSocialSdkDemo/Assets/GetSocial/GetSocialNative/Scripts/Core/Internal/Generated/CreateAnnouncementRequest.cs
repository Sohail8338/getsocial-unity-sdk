#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  /// <summary>
  /// #sdk7
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CreateAnnouncementRequest : TBase
  {
    private string _sessionId;
    private Dictionary<string, AFContent> _content;
    private long _startDate;
    private long _endDate;
    private Dictionary<string, string> _properties;
    private SGEntity _target;
    private AFPollContent _poll;
    private bool _allowMultiReactions;
    private List<string> _labels;

    public string SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }

    public Dictionary<string, AFContent> Content
    {
      get
      {
        return _content;
      }
      set
      {
        __isset.content = true;
        this._content = value;
      }
    }

    public long StartDate
    {
      get
      {
        return _startDate;
      }
      set
      {
        __isset.startDate = true;
        this._startDate = value;
      }
    }

    public long EndDate
    {
      get
      {
        return _endDate;
      }
      set
      {
        __isset.endDate = true;
        this._endDate = value;
      }
    }

    public Dictionary<string, string> Properties
    {
      get
      {
        return _properties;
      }
      set
      {
        __isset.properties = true;
        this._properties = value;
      }
    }

    public SGEntity Target
    {
      get
      {
        return _target;
      }
      set
      {
        __isset.target = true;
        this._target = value;
      }
    }

    public AFPollContent Poll
    {
      get
      {
        return _poll;
      }
      set
      {
        __isset.poll = true;
        this._poll = value;
      }
    }

    public bool AllowMultiReactions
    {
      get
      {
        return _allowMultiReactions;
      }
      set
      {
        __isset.allowMultiReactions = true;
        this._allowMultiReactions = value;
      }
    }

    public List<string> Labels
    {
      get
      {
        return _labels;
      }
      set
      {
        __isset.labels = true;
        this._labels = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
      public bool content;
      public bool startDate;
      public bool endDate;
      public bool properties;
      public bool target;
      public bool poll;
      public bool allowMultiReactions;
      public bool labels;
    }

    public CreateAnnouncementRequest() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Content = new Dictionary<string, AFContent>();
                  TMap _map259 = iprot.ReadMapBegin();
                  for( int _i260 = 0; _i260 < _map259.Count; ++_i260)
                  {
                    string _key261;
                    AFContent _val262;
                    _key261 = iprot.ReadString();
                    _val262 = new AFContent();
                    _val262.Read(iprot);
                    Content[_key261] = _val262;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                StartDate = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                EndDate = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Map) {
                {
                  Properties = new Dictionary<string, string>();
                  TMap _map263 = iprot.ReadMapBegin();
                  for( int _i264 = 0; _i264 < _map263.Count; ++_i264)
                  {
                    string _key265;
                    string _val266;
                    _key265 = iprot.ReadString();
                    _val266 = iprot.ReadString();
                    Properties[_key265] = _val266;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                Target = new SGEntity();
                Target.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                Poll = new AFPollContent();
                Poll.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                AllowMultiReactions = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  Labels = new List<string>();
                  TList _list267 = iprot.ReadListBegin();
                  for( int _i268 = 0; _i268 < _list267.Count; ++_i268)
                  {
                    string _elem269;
                    _elem269 = iprot.ReadString();
                    Labels.Add(_elem269);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CreateAnnouncementRequest");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        if (Content != null && __isset.content) {
          field.Name = "content";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Content.Count));
            foreach (string _iter270 in Content.Keys)
            {
              oprot.WriteString(_iter270);
              Content[_iter270].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.startDate) {
          field.Name = "startDate";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(StartDate);
          oprot.WriteFieldEnd();
        }
        if (__isset.endDate) {
          field.Name = "endDate";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(EndDate);
          oprot.WriteFieldEnd();
        }
        if (Properties != null && __isset.properties) {
          field.Name = "properties";
          field.Type = TType.Map;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
            foreach (string _iter271 in Properties.Keys)
            {
              oprot.WriteString(_iter271);
              oprot.WriteString(Properties[_iter271]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Target != null && __isset.target) {
          field.Name = "target";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          Target.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Poll != null && __isset.poll) {
          field.Name = "poll";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          Poll.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.allowMultiReactions) {
          field.Name = "allowMultiReactions";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(AllowMultiReactions);
          oprot.WriteFieldEnd();
        }
        if (Labels != null && __isset.labels) {
          field.Name = "labels";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Labels.Count));
            foreach (string _iter272 in Labels)
            {
              oprot.WriteString(_iter272);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CreateAnnouncementRequest(");
      bool __first = true;
      if (SessionId != null && __isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      if (Content != null && __isset.content) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Content: ");
        __sb.Append(Content.ToDebugString());
      }
      if (__isset.startDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StartDate: ");
        __sb.Append(StartDate);
      }
      if (__isset.endDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EndDate: ");
        __sb.Append(EndDate);
      }
      if (Properties != null && __isset.properties) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Properties: ");
        __sb.Append(Properties.ToDebugString());
      }
      if (Target != null && __isset.target) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Target: ");
        __sb.Append(Target== null ? "<null>" : Target.ToString());
      }
      if (Poll != null && __isset.poll) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Poll: ");
        __sb.Append(Poll== null ? "<null>" : Poll.ToString());
      }
      if (__isset.allowMultiReactions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AllowMultiReactions: ");
        __sb.Append(AllowMultiReactions);
      }
      if (Labels != null && __isset.labels) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Labels: ");
        __sb.Append(Labels.ToDebugString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
