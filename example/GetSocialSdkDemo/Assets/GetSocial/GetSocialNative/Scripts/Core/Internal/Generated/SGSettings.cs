#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  /// <summary>
  /// #sdk7
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SGSettings : TBase
  {
    private Dictionary<int, int> _permissions;
    private Dictionary<int, bool> _allowedActions;
    private Dictionary<string, string> _properties;
    private bool _isDiscoverable;
    private bool _isPrivate;
    private List<string> _labels;

    public Dictionary<int, int> Permissions
    {
      get
      {
        return _permissions;
      }
      set
      {
        __isset.permissions = true;
        this._permissions = value;
      }
    }

    /// <summary>
    /// feed.post = admin, feed.post.interact = everyone, check SGAction and SGRole for possible keys and values
    /// </summary>
    public Dictionary<int, bool> AllowedActions
    {
      get
      {
        return _allowedActions;
      }
      set
      {
        __isset.allowedActions = true;
        this._allowedActions = value;
      }
    }

    /// <summary>
    /// feed.post = false, feed.post.interact = true, check SGAction for possible values
    /// </summary>
    public Dictionary<string, string> Properties
    {
      get
      {
        return _properties;
      }
      set
      {
        __isset.properties = true;
        this._properties = value;
      }
    }

    public bool IsDiscoverable
    {
      get
      {
        return _isDiscoverable;
      }
      set
      {
        __isset.isDiscoverable = true;
        this._isDiscoverable = value;
      }
    }

    public bool IsPrivate
    {
      get
      {
        return _isPrivate;
      }
      set
      {
        __isset.isPrivate = true;
        this._isPrivate = value;
      }
    }

    public List<string> Labels
    {
      get
      {
        return _labels;
      }
      set
      {
        __isset.labels = true;
        this._labels = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool permissions;
      public bool allowedActions;
      public bool properties;
      public bool isDiscoverable;
      public bool isPrivate;
      public bool labels;
    }

    public SGSettings() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  Permissions = new Dictionary<int, int>();
                  TMap _map0 = iprot.ReadMapBegin();
                  for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                  {
                    int _key2;
                    int _val3;
                    _key2 = iprot.ReadI32();
                    _val3 = iprot.ReadI32();
                    Permissions[_key2] = _val3;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  AllowedActions = new Dictionary<int, bool>();
                  TMap _map4 = iprot.ReadMapBegin();
                  for( int _i5 = 0; _i5 < _map4.Count; ++_i5)
                  {
                    int _key6;
                    bool _val7;
                    _key6 = iprot.ReadI32();
                    _val7 = iprot.ReadBool();
                    AllowedActions[_key6] = _val7;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  Properties = new Dictionary<string, string>();
                  TMap _map8 = iprot.ReadMapBegin();
                  for( int _i9 = 0; _i9 < _map8.Count; ++_i9)
                  {
                    string _key10;
                    string _val11;
                    _key10 = iprot.ReadString();
                    _val11 = iprot.ReadString();
                    Properties[_key10] = _val11;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                IsDiscoverable = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                IsPrivate = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  Labels = new List<string>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    string _elem14;
                    _elem14 = iprot.ReadString();
                    Labels.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SGSettings");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Permissions != null && __isset.permissions) {
          field.Name = "permissions";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.I32, Permissions.Count));
            foreach (int _iter15 in Permissions.Keys)
            {
              oprot.WriteI32(_iter15);
              oprot.WriteI32(Permissions[_iter15]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (AllowedActions != null && __isset.allowedActions) {
          field.Name = "allowedActions";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Bool, AllowedActions.Count));
            foreach (int _iter16 in AllowedActions.Keys)
            {
              oprot.WriteI32(_iter16);
              oprot.WriteBool(AllowedActions[_iter16]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Properties != null && __isset.properties) {
          field.Name = "properties";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
            foreach (string _iter17 in Properties.Keys)
            {
              oprot.WriteString(_iter17);
              oprot.WriteString(Properties[_iter17]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.isDiscoverable) {
          field.Name = "isDiscoverable";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsDiscoverable);
          oprot.WriteFieldEnd();
        }
        if (__isset.isPrivate) {
          field.Name = "isPrivate";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsPrivate);
          oprot.WriteFieldEnd();
        }
        if (Labels != null && __isset.labels) {
          field.Name = "labels";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Labels.Count));
            foreach (string _iter18 in Labels)
            {
              oprot.WriteString(_iter18);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SGSettings(");
      bool __first = true;
      if (Permissions != null && __isset.permissions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Permissions: ");
        __sb.Append(Permissions.ToDebugString());
      }
      if (AllowedActions != null && __isset.allowedActions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AllowedActions: ");
        __sb.Append(AllowedActions.ToDebugString());
      }
      if (Properties != null && __isset.properties) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Properties: ");
        __sb.Append(Properties.ToDebugString());
      }
      if (__isset.isDiscoverable) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsDiscoverable: ");
        __sb.Append(IsDiscoverable);
      }
      if (__isset.isPrivate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsPrivate: ");
        __sb.Append(IsPrivate);
      }
      if (Labels != null && __isset.labels) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Labels: ");
        __sb.Append(Labels.ToDebugString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
