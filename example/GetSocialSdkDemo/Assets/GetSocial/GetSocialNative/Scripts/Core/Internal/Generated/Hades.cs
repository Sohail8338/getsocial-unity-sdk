#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{
  public partial class Hades {
    public interface ISync {
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="text"></param>
      string echo(string text);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="request"></param>
      THSdkAuthResponse authenticateSdk(THSdkAuthRequest request);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="request"></param>
      THSdkAuthResponseAllInOne authenticateSdkAllInOne(THSdkAuthRequestAllInOne request);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="superProperties"></param>
      bool updateSession(string sessionId, THSuperProperties superProperties);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="request"></param>
      THPrivateUser updateUser(string sessionId, THPrivateUser request);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="identity"></param>
      THPrivateUser addIdentity(string sessionId, THIdentity identity);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="identity"></param>
      THPrivateUser removeIdentity(string sessionId, THIdentity identity);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="identity"></param>
      THPrivateUser getPrivateUserByIdentity(string sessionId, THIdentity identity);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="id"></param>
      THPublicUser getPublicUser(string sessionId, string id);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      GetUsersResponse getUsers(GetUsersRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      GetUsersResponseById getUsersById(GetUsersRequestById request);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="provider"></param>
      /// <param name="providerIds"></param>
      Dictionary<string, THPublicUser> getPublicUsersByIdentity(string sessionId, string provider, List<string> providerIds);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="query"></param>
      List<THUserReference> findUsers(string sessionId, THUsersQuery query);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="userId"></param>
      int addFriend(string sessionId, string userId);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      AddFriendsResponse addFriends(AddFriendsRequest request);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="provider"></param>
      /// <param name="providerIds"></param>
      int addFriendsByIdentity(string sessionId, string provider, List<string> providerIds);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="userId"></param>
      int removeFriend(string sessionId, string userId);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      RemoveFriendsResponse removeFriends(RemoveFriendsRequest request);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="userIds"></param>
      int setFriends(string sessionId, List<string> userIds);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="provider"></param>
      /// <param name="providerIds"></param>
      int removeFriendsByIdentity(string sessionId, string provider, List<string> providerIds);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="provider"></param>
      /// <param name="providerIds"></param>
      int setFriendsByIdentity(string sessionId, string provider, List<string> providerIds);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="userId"></param>
      bool isFriend(string sessionId, string userId);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      AreFriendsResponse areFriends(AreFriendsRequest request);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      int getFriendsCount(string sessionId);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="offset"></param>
      /// <param name="limit"></param>
      List<THPublicUser> getFriends(string sessionId, int offset, int limit);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      GetFriendsResponse getFriendsV2(GetFriendsRequest request);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="offset"></param>
      /// <param name="limit"></param>
      List<THSuggestedFriend> getSuggestedFriends(string sessionId, int offset, int limit);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      GetSuggestedFriendsResponse getSuggestedFriendsV2(GetSuggestedFriendsRequest request);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      List<THUserReference> getMentionFriends(string sessionId);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      GetTopicsResponse getTopics(GetTopicsRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      GetTopicResponse getTopic(GetTopicRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      FollowEntitiesResponse followEntities(FollowEntitiesRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      UnfollowEntitiesResponse unfollowEntities(UnfollowEntitiesRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      GetEntityFollowersResponse getEntityFollowers(GetEntityFollowersRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      IsFollowingResponse isFollowing(IsFollowingRequest request);
      /// <summary>
      /// topics dashboard
      /// </summary>
      /// <param name="request"></param>
      DDGetTopicsResponse ddGetTopics(DDGetTopicsRequest request);
      DDGetTopicResponse ddGetTopic(DDGetTopicRequest request);
      DDCreateTopicResponse ddCreateTopic(DDCreateTopicRequest request);
      DDUpdateTopicResponse ddUpdateTopic(DDUpdateTopicRequest request);
      DDDeleteTopicsResponse ddDeleteTopics(DDDeleteTopicsRequest request);
      DDGetEntityFollowersResponse ddGetEntityFollowers(DDGetEntityFollowersRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      CreateGroupResponse createGroup(CreateGroupRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      UpdateGroupResponse updateGroup(UpdateGroupRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      DeleteGroupsResponse deleteGroups(DeleteGroupsRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      GetGroupsResponse getGroups(GetGroupsRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      GetGroupResponse getGroup(GetGroupRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      UpdateGroupMembersResponse updateGroupMembers(UpdateGroupMembersRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      RemoveGroupMembersResponse removeGroupMembers(RemoveGroupMembersRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      AreGroupMembersResponse areGroupMembers(AreGroupMembersRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      GetGroupMembersResponse getGroupMembers(GetGroupMembersRequest request);
      /// <summary>
      /// groups DD
      /// </summary>
      /// <param name="request"></param>
      DDCreateGroupResponse ddCreateGroup(DDCreateGroupRequest request);
      DDUpdateGroupResponse ddUpdateGroup(DDUpdateGroupRequest request);
      DDDeleteGroupsResponse ddDeleteGroups(DDDeleteGroupsRequest request);
      DDGetGroupResponse ddGetGroup(DDGetGroupRequest request);
      DDGetGroupsResponse ddGetGroups(DDGetGroupsRequest request);
      DDGetGroupMembersResponse ddGetGroupMembers(DDGetGroupMembersRequest request);
      DDUpdateGroupMembersResponse ddUpdateGroupMembers(DDUpdateGroupMembersRequest request);
      DDRemoveGroupMembersResponse ddRemoveGroupMembers(DDRemoveGroupMembersRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      GetChatsResponse getChats(GetChatsRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      GetChatResponse getChat(GetChatRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      GetChatMessagesResponse getChatMessages(GetChatMessagesRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      SendChatMessageResponse sendChatMessage(SendChatMessageRequest request);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="request"></param>
      THCreateTokenResponse createInviteUrl(string sessionId, THCreateTokenRequest request);
      /// <summary>
      /// #todo_sdk7 creates invite url and merges default invite content with custom one
      /// </summary>
      /// <param name="request"></param>
      CreateInviteResponse createInvite(CreateInviteRequest request);
      THInviteProviders getInviteProviders(string sessionId);
      /// <summary>
      /// #todo_sdk7 returns the list of available invite providers, sdk will check these providers if they're available on the device or not
      /// </summary>
      /// <param name="request"></param>
      GetAvailableInviteChannelsResponse getAvailableInviteChannels(GetAvailableInviteChannelsRequest request);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="request"></param>
      THTokenInfo processAppOpen(string sessionId, THProcessAppOpenRequest request);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      List<THPublicUser> getReferredUsers(string sessionId);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="event"></param>
      /// <param name="offset"></param>
      /// <param name="limit"></param>
      List<THReferralUser> getReferredUsersV2(string sessionId, string @event, int offset, int limit);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="event"></param>
      /// <param name="offset"></param>
      /// <param name="limit"></param>
      List<THReferralUser> getReferrerUsers(string sessionId, string @event, int offset, int limit);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="referrerId"></param>
      /// <param name="event"></param>
      /// <param name="customData"></param>
      bool setReferrer(string sessionId, string referrerId, string @event, Dictionary<string, string> customData);
      /// <summary>
      /// DD
      /// </summary>
      /// <param name="request"></param>
      DDGetReferralUsersResponse ddGetReferredUsers(DDGetReferralUsersRequest request);
      DDGetReferralUsersResponse ddGetReferrerUsers(DDGetReferralUsersRequest request);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="link"></param>
      string processCrossPromoClick(string sessionId, string link);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="feed"></param>
      /// <param name="query"></param>
      List<THActivityPost> getActivities(string sessionId, string feed, THActivitiesQuery query);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="feed"></param>
      List<THActivityPost> getStickyActivities(string sessionId, string feed);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="activityId"></param>
      /// <param name="query"></param>
      List<THActivityPost> getComments(string sessionId, string activityId, THActivitiesQuery query);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="query"></param>
      List<string> findTags(string sessionId, THTagsQuery query);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      FindTagsResponse findTagsV2(FindTagsRequest request);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="activityId"></param>
      THActivityPost getActivity(string sessionId, string activityId);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="feed"></param>
      /// <param name="activityPostContent"></param>
      THActivityPost postActivity(string sessionId, string feed, THActivityPostContent activityPostContent);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="activityId"></param>
      /// <param name="activityPostContent"></param>
      THActivityPost postComment(string sessionId, string activityId, THActivityPostContent activityPostContent);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="activityId"></param>
      /// <param name="isLiked"></param>
      THActivityPost likeActivity(string sessionId, string activityId, bool isLiked);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="activityId"></param>
      /// <param name="offset"></param>
      /// <param name="limit"></param>
      List<THPostAuthor> getActivityLikers(string sessionId, string activityId, int offset, int limit);
      bool deleteActivity(string sessionId, string activityId);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="activityIds"></param>
      bool removeActivities(string sessionId, List<string> activityIds);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="activityId"></param>
      /// <param name="reportingReason"></param>
      bool reportActivity(string sessionId, string activityId, THReportingReason reportingReason);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="commonProperties"></param>
      /// <param name="events"></param>
      bool trackAnalyticsEvents(string sessionId, THSuperProperties commonProperties, List<THAnalyticsBaseEvent> events);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="pushTargetData"></param>
      bool registerPushTarget(string sessionId, THPushTarget pushTargetData);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="enabled"></param>
      bool setPushNotificationsEnabled(string sessionId, bool enabled);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      bool isPushNotificationsEnabled(string sessionId);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="notification"></param>
      THNotificationsSummary sendPushNotification(string sessionId, THCustomNotification notification);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      SendNotificationResponse sendNotification(SendNotificationRequest request);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="query"></param>
      List<THNotification> getNotificationsList(string sessionId, THNotificationsQuery query);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="query"></param>
      int getNotificationsCount(string sessionId, THNotificationsQuery query);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="query"></param>
      bool setNotificationsStatus(string sessionId, THNotificationsSetStatusParams query);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      GetNotificationsResponse getNotifications(GetNotificationsRequest request);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="code"></param>
      THPromoCode claimPromoCode(string sessionId, string code);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="code"></param>
      THPromoCode getPromoCode(string sessionId, string code);
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="code"></param>
      THPromoCode setPromoCode(string sessionId, THPromoCode code);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      CreatePromoCodeResponse createPromoCode(CreatePromoCodeRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      GetPromoCodeResponse getPromoCodeV2(GetPromoCodeRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      ClaimPromoCodeResponse claimPromoCodeV2(ClaimPromoCodeRequest request);
      /// <summary>
      /// #ignored
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      THInviteProviders getInviteProvidersByApp(string sessionId, string appId);
      /// <summary>
      /// #ignored
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="token"></param>
      THTokenInfo getTokenInfo(string sessionId, string token);
      /// <summary>
      /// #deprecated
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="event"></param>
      bool trackAnalyticsEvent(string sessionId, THAnalyticsEvent @event);
      /// <summary>
      /// #deprecated
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="fingerprint"></param>
      /// <param name="referrer"></param>
      string trackInstall(string sessionId, THFingerprint fingerprint, string referrer);
      /// <summary>
      /// #deprecated
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="uploadParams"></param>
      string getUploadURL(string sessionId, THUploadParams uploadParams);
      /// <summary>
      /// Login
      /// </summary>
      /// <param name="email"></param>
      /// <param name="password"></param>
      THLoginResponse login(string email, string password);
      THLoginResponse loginWithSession(string sessionId);
      string getOAuthLoginURL(string provider);
      THLoginOrRegisterResponse loginWithOAuthCode(string provider, string code, string referrer);
      string loginETLOnly(string appId, string token);
      void logout(string sessionId);
      /// <summary>
      /// deprecated, use register instead
      /// </summary>
      /// <param name="email"></param>
      /// <param name="password"></param>
      /// <param name="companyName"></param>
      /// <param name="referrer"></param>
      THRegistrationResponse registerAccount(string email, string password, string companyName, string referrer);
      THRegistrationResponse registerUser(string email, string password, string referrer);
      /// <summary>
      /// General
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="companyId"></param>
      /// <param name="name"></param>
      THApplication createApplication(string sessionId, string companyId, string name);
      THApplication updateApplication(string sessionId, THApplication app);
      bool deleteApplication(string sessionId, string appId);
      THAppPlatform addAppPlatform(string sessionId, string appId, THAppPlatform platform);
      List<THAppPlatform> getAppPlatforms(string sessionId, string appId);
      THAppPlatform updateAppPlatform(string sessionId, string appId, THAppPlatform platform);
      bool deleteAppPlatform(string sessionId, string appId, string platformId);
      THAppAndPlatformsResponse getAppAndPlatforms(string sessionId, string appId);
      THCompanyTeamMember createTeamMember(string sessionId, THCompanyTeamMember member);
      List<THCompanyTeamMember> getAllTeamMembers(string sessionId, string companyId);
      THCompanyTeamMember updateTeamMember(string sessionId, THCompanyTeamMember member);
      bool deleteTeamMember(string sessionId, string memberId);
      THCompany getCompany(string sessionId, string companyId);
      THCompany updateCompany(string sessionId, THCompany company);
      bool sendPasswordResetEmail(string email);
      bool resetPassword(string token, string email, string password, string passwordRepeat);
      THLoginResponse createPassword(string token, string email, string password, string passwordRepeat);
      bool extendSession(string sessionId);
      long getRemainingSessionTime(string sessionId);
      bool validatePasswordLink(string email, string hash);
      List<THPublicUser> getPublicUsers(string sessionId, List<string> ids);
      List<THUserReference> findAppUsers(string sessionId, string appId, THUsersQuery query);
      THPrivateUser updateAppUser(string sessionId, string userId, THPrivateUser request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="userId"></param>
      THPrivateUser getPrivateUser(string sessionId, string userId);
      /// <summary>
      /// Smart Invites
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="prefix"></param>
      /// <param name="inviteDomain"></param>
      bool updateAppleAppSiteAssociation(string sessionId, string prefix, string inviteDomain);
      bool updateAndroidAppLinks(string sessionId, string prefix, string inviteDomain);
      bool processCustomDomain(string sessionId, string appId, string domain);
      bool removeCustomDomain(string sessionId, string appId);
      ValidateDomainResponse validateDomain(string sessionId, string appId, string domain);
      List<string> getDomainNameServers(string sessionId, string appId, string domain);
      /// <summary>
      /// Name, public and private properties cannot be updated with this RPC and are ignored by Hades.
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      /// <param name="providers"></param>
      List<THInviteProvider> updateInviteProviders(string sessionId, string appId, List<THInviteProvider> providers);
      THLinkDetails inspectLink(string sessionId, string linkUrl);
      /// <summary>
      /// Push Notifications
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="request"></param>
      THAppPlatform setPushCertificate(string sessionId, THSetPushCertificateRequest request);
      bool sendDeviceNotifications(string sessionId, string appId, THCustomNotification data, List<string> deviceIds);
      List<THDeviceNotificationsInfo> getDeviceNotificationsInfo(string sessionId, string appId, List<string> deviceIds);
      /// <summary>
      /// Activity Feed
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      /// <param name="feed"></param>
      /// <param name="query"></param>
      List<THActivityPost> getAppActivities(string sessionId, string appId, string feed, THActivitiesQuery query);
      List<THActivityPost> getAppComments(string sessionId, string appId, string activityId, THActivitiesQuery query);
      THActivityPost getAppActivity(string sessionId, string appId, string activityId);
      THActivityPost postAppActivity(string sessionId, string appId, string feed, THActivityPostContent activityPostContent);
      THActivityPost updateAppActivity(string sessionId, string appId, string activityId, THActivityPostContent activityPostContent);
      List<string> findAppTags(string sessionId, string appId, THTagsQuery query);
      /// <summary>
      /// feed-level sticky activities
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      /// <param name="feed"></param>
      List<THActivityPost> getAppFeedStickyActivities(string sessionId, string appId, string feed);
      THActivityPost postAppFeedStickyActivity(string sessionId, string appId, string feed, THActivityPostContent activityPostContent, int stickyStart, int stickyEnd);
      THActivityPost updateAppFeedStickyActivity(string sessionId, string appId, string activityId, THActivityPostContent activityPostContent, int stickyStart, int stickyEnd);
      THActivityPost postAppComment(string sessionId, string appId, string activityId, THActivityPostContent activityPostContent);
      THActivityPost likeAppActivity(string sessionId, string appId, string activityId, bool isLiked);
      bool deleteAppActivities(string sessionId, string appId, List<string> activityIds);
      List<string> getAppActivityFeedList(string sessionId, string appId);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      GetActivitiesV2Response getActivitiesV2(GetActivitiesV2Request request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      GetActivityByIDResponse getActivityByID(GetActivityByIDRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      GetAnnouncementsResponse getAnnouncements(GetAnnouncementsRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      CreateActivityResponse createActivity(CreateActivityRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      UpdateActivityResponse updateActivity(UpdateActivityRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      DeleteActivitiesResponse deleteActivities(DeleteActivitiesRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      CreateAnnouncementResponse createAnnouncement(CreateAnnouncementRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      UpdateAnnouncementResponse updateAnnouncement(UpdateAnnouncementRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      GetReactionsResponse getReactions(GetReactionsRequest request);
      /// <summary>
      /// #sdk7 - works as set, existing reaction is replaced
      /// </summary>
      /// <param name="request"></param>
      CreateReactionResponse createReaction(CreateReactionRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      DeleteReactionResponse deleteReaction(DeleteReactionRequest request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      ReportEntityV2Response reportEntityV2(ReportEntityV2Request request);
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      ActivityTrackViewResponse activityTrackView(ActivityTrackViewRequest request);
      /// <summary>
      /// activity feed dashboard
      /// </summary>
      /// <param name="request"></param>
      DDGetActivitiesResponse ddGetActivities(DDGetActivitiesRequest request);
      DDGetActivityByIDResponse ddGetActivityByID(DDGetActivityByIDRequest request);
      DDFindTagsResponse ddFindTags(DDFindTagsRequest request);
      DDCreateActivityResponse ddCreateActivity(DDCreateActivityRequest request);
      DDUpdateActivityResponse ddUpdateActivity(DDUpdateActivityRequest request);
      DDUpdateActivitiesStatusResponse ddUpdateActivitiesStatus(DDUpdateActivitiesStatusRequest request);
      DDGetAnnouncementsResponse ddGetAnnouncements(DDGetAnnouncementsRequest request);
      DDCreateAnnouncementResponse ddCreateAnnouncement(DDCreateAnnouncementRequest request);
      DDUpdateAnnouncementResponse ddUpdateAnnouncement(DDUpdateAnnouncementRequest request);
      DDGetReactionsResponse ddGetReactions(DDGetReactionsRequest request);
      DDCreateReactionsResponse ddCreateReactions(DDCreateReactionsRequest request);
      DDDeleteReactionsResponse ddDeleteReactions(DDDeleteReactionsRequest request);
      DDPurgeActivitiesResponse ddPurgeActivities(DDPurgeActivitiesRequest request);
      DDGetActivitiesForModerationResponse ddGetActivitiesForModeration(DDGetActivitiesForModerationRequest request);
      /// <summary>
      /// If query is successfully started, returns queryId string. This can be used to call getETLQueryResult.
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      /// <param name="queries"></param>
      List<string> runETLQuery(string sessionId, string appId, List<Query> queries);
      /// <summary>
      /// DD should *not* call this RPC if it already has the results for that query.
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="queryId"></param>
      string getETLQueryResults(string sessionId, List<string> queryId);
      /// <summary>
      /// Marketing Links
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      /// <param name="name"></param>
      Campaign createCampaign(string sessionId, string appId, string name);
      Campaign updateCampaign(string sessionId, Campaign campaign);
      MarketingLink setMarketingLink(string sessionId, MarketingLink link);
      MarketingLink getMarketingLink(string sessionId, string id);
      List<Campaign> getCampaigns(string sessionId, string appId, LinkStatus status);
      /// <summary>
      /// Banner Links
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="link"></param>
      BannerLink setBannerLink(string sessionId, BannerLink link);
      BannerLink getBannerLink(string sessionId, string id);
      List<BannerLink> getBannerLinks(string sessionId, string appId, LinkStatus status);
      /// <summary>
      /// Content moderation
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      /// <param name="query"></param>
      List<THReportedActivityPost> getReportedActivities(string sessionId, string appId, THReportedActivitiesQuery query);
      bool closeReports(string sessionId, string appId, List<string> activityIds);
      /// <summary>
      /// User moderation
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      /// <param name="userIds"></param>
      /// <param name="banExpiry"></param>
      /// <param name="reason"></param>
      bool banUsers(string sessionId, string appId, List<string> userIds, long banExpiry, string reason);
      bool unbanUsers(string sessionId, string appId, List<string> userIds);
      List<THBannedPublicUser> getBannedUsers(string sessionId, string appId);
      /// <summary>
      /// Audiences
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      List<Audience> getAudiences(string sessionId, string appId);
      Audience setAudience(string sessionId, Audience audience);
      Audience getAudience(string sessionId, string audienceId);
      bool deleteAudience(string sessionId, string audienceId);
      /// <summary>
      /// Webhooks
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      List<WebhookEvent> getWebhookEvents(string sessionId, string appId);
      WebhookSettings getWebhookSettings(string sessionId, string appId);
      WebhookSettings updateWebhookSettings(string sessionId, string appId, WebhookSettings settings);
      /// <summary>
      /// Test Devices
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="companyId"></param>
      /// <param name="device"></param>
      THTestDevice setTestDevice(string sessionId, string companyId, THTestDevice device);
      List<THTestDevice> getTestDevices(string sessionId, string companyId);
      GetTestDeviceRemoteLogsResponse getTestDeviceRemoteLogs(GetTestDeviceRemoteLogsRequest request);
      bool deleteTestDevice(string sessionId, string id);
      /// <summary>
      /// Smart Targeting
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      /// <param name="query"></param>
      Dictionary<int, THNotificationSpec> describeNotifications(string sessionId, string appId, THListNotificationsTextsQuery query);
      Dictionary<int, Dictionary<string, string>> getNotificationsTexts(string sessionId, THListNotificationsTextsQuery query);
      List<THTargetedNotification> getTargetedNotifications(string sessionId, string appId);
      THTargetedNotification setTargetedNotification(string sessionId, THTargetedNotification notification);
      bool cancelTargetedNotification(string sessionId, string appId, string notificationId, bool @remove);
      /// <summary>
      /// Templates
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="tmpl"></param>
      THNotificationTemplate setTemplate(string sessionId, THNotificationTemplate tmpl);
      bool deleteTemplate(string sessionId, string appId, string tmplId);
      List<THNotificationTemplate> getTemplates(string sessionId, string appId);
      /// <summary>
      /// Company Api Keys
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="companyId"></param>
      List<THCompanyApiKey> getCompanyApiKeys(string sessionId, string companyId);
      THCompanyApiKey setCompanyApiKey(string sessionId, THCompanyApiKey apiKey);
      /// <summary>
      /// Mercury
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="companyId"></param>
      CalculationResult getEstimatedBalance(string sessionId, string companyId);
      List<Invoice> getInvoices(string sessionId, string companyId);
      PaymentMethodDetails getPaymentMethod(string sessionId, string companyId);
      PaymentMethodDetails setCreditCard(string sessionId, string companyId, string stripeResponse);
      string getPaymentIntentClientSecret(string sessionId, string companyId);
      /// <summary>
      /// Styx
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      List<SFTrigger> getSFTriggers(string sessionId, string appId);
      SFTrigger setSFTrigger(string sessionId, SFTrigger trigger);
      bool deleteSFTrigger(string sessionId, long triggerId);
      List<SFAction> getSFActions(string sessionId, long triggerId);
      SFAction setSFAction(string sessionId, SFAction action);
      bool deleteSFAction(string sessionId, long actionId);
      bool notificationTemplateInUse(string sessionId, string appId, string tpl);
      bool audienceInUse(string sessionId, string appId, long audienceId);
      /// <summary>
      /// Promo Codes
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      /// <param name="offsetId"></param>
      /// <param name="limit"></param>
      List<THPromoCode> getPromoCodes(string sessionId, string appId, string offsetId, int limit);
      bool deletePromoCode(string sessionId, string id);
      /// <summary>
      /// Users
      /// </summary>
      /// <param name="request"></param>
      DDFindUsersResponse ddFindUsers(DDFindUsersRequest request);
      /// <summary>
      /// deprecated, use validateIAP
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="receipt"></param>
      List<THReceiptOld> parseIAP(string sessionId, byte[] receipt);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="receipt"></param>
      /// <param name="signature"></param>
      /// <param name="checkpoint"></param>
      /// <param name="isSubscription"></param>
      /// <param name="validateOnline"></param>
      THReceipt validateIAP(string sessionId, byte[] receipt, byte[] signature, string checkpoint, bool isSubscription, bool validateOnline);
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="request"></param>
      bool trackLatency(TrackLatencyRequest request);
    }

    public interface Iface : ISync {
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="text"></param>
      public string echo(string text)
      {
        send_echo(text);
        return recv_echo();

      }
      public void send_echo(string text)
      {
        oprot_.WriteMessageBegin(new TMessage("echo", TMessageType.Call, seqid_));
        echo_args args = new echo_args();
        args.Text = text;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_echo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        echo_result result = new echo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "echo failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="request"></param>
      public THSdkAuthResponse authenticateSdk(THSdkAuthRequest request)
      {
        send_authenticateSdk(request);
        return recv_authenticateSdk();

      }
      public void send_authenticateSdk(THSdkAuthRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("authenticateSdk", TMessageType.Call, seqid_));
        authenticateSdk_args args = new authenticateSdk_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THSdkAuthResponse recv_authenticateSdk()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        authenticateSdk_result result = new authenticateSdk_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "authenticateSdk failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="request"></param>
      public THSdkAuthResponseAllInOne authenticateSdkAllInOne(THSdkAuthRequestAllInOne request)
      {
        send_authenticateSdkAllInOne(request);
        return recv_authenticateSdkAllInOne();

      }
      public void send_authenticateSdkAllInOne(THSdkAuthRequestAllInOne request)
      {
        oprot_.WriteMessageBegin(new TMessage("authenticateSdkAllInOne", TMessageType.Call, seqid_));
        authenticateSdkAllInOne_args args = new authenticateSdkAllInOne_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THSdkAuthResponseAllInOne recv_authenticateSdkAllInOne()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        authenticateSdkAllInOne_result result = new authenticateSdkAllInOne_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "authenticateSdkAllInOne failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="superProperties"></param>
      public bool updateSession(string sessionId, THSuperProperties superProperties)
      {
        send_updateSession(sessionId, superProperties);
        return recv_updateSession();

      }
      public void send_updateSession(string sessionId, THSuperProperties superProperties)
      {
        oprot_.WriteMessageBegin(new TMessage("updateSession", TMessageType.Call, seqid_));
        updateSession_args args = new updateSession_args();
        args.SessionId = sessionId;
        args.SuperProperties = superProperties;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_updateSession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateSession_result result = new updateSession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateSession failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="request"></param>
      public THPrivateUser updateUser(string sessionId, THPrivateUser request)
      {
        send_updateUser(sessionId, request);
        return recv_updateUser();

      }
      public void send_updateUser(string sessionId, THPrivateUser request)
      {
        oprot_.WriteMessageBegin(new TMessage("updateUser", TMessageType.Call, seqid_));
        updateUser_args args = new updateUser_args();
        args.SessionId = sessionId;
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THPrivateUser recv_updateUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateUser_result result = new updateUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateUser failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="identity"></param>
      public THPrivateUser addIdentity(string sessionId, THIdentity identity)
      {
        send_addIdentity(sessionId, identity);
        return recv_addIdentity();

      }
      public void send_addIdentity(string sessionId, THIdentity identity)
      {
        oprot_.WriteMessageBegin(new TMessage("addIdentity", TMessageType.Call, seqid_));
        addIdentity_args args = new addIdentity_args();
        args.SessionId = sessionId;
        args.Identity = identity;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THPrivateUser recv_addIdentity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addIdentity_result result = new addIdentity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addIdentity failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="identity"></param>
      public THPrivateUser removeIdentity(string sessionId, THIdentity identity)
      {
        send_removeIdentity(sessionId, identity);
        return recv_removeIdentity();

      }
      public void send_removeIdentity(string sessionId, THIdentity identity)
      {
        oprot_.WriteMessageBegin(new TMessage("removeIdentity", TMessageType.Call, seqid_));
        removeIdentity_args args = new removeIdentity_args();
        args.SessionId = sessionId;
        args.Identity = identity;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THPrivateUser recv_removeIdentity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeIdentity_result result = new removeIdentity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeIdentity failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="identity"></param>
      public THPrivateUser getPrivateUserByIdentity(string sessionId, THIdentity identity)
      {
        send_getPrivateUserByIdentity(sessionId, identity);
        return recv_getPrivateUserByIdentity();

      }
      public void send_getPrivateUserByIdentity(string sessionId, THIdentity identity)
      {
        oprot_.WriteMessageBegin(new TMessage("getPrivateUserByIdentity", TMessageType.Call, seqid_));
        getPrivateUserByIdentity_args args = new getPrivateUserByIdentity_args();
        args.SessionId = sessionId;
        args.Identity = identity;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THPrivateUser recv_getPrivateUserByIdentity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPrivateUserByIdentity_result result = new getPrivateUserByIdentity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPrivateUserByIdentity failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="id"></param>
      public THPublicUser getPublicUser(string sessionId, string id)
      {
        send_getPublicUser(sessionId, id);
        return recv_getPublicUser();

      }
      public void send_getPublicUser(string sessionId, string id)
      {
        oprot_.WriteMessageBegin(new TMessage("getPublicUser", TMessageType.Call, seqid_));
        getPublicUser_args args = new getPublicUser_args();
        args.SessionId = sessionId;
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THPublicUser recv_getPublicUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPublicUser_result result = new getPublicUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPublicUser failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public GetUsersResponse getUsers(GetUsersRequest request)
      {
        send_getUsers(request);
        return recv_getUsers();

      }
      public void send_getUsers(GetUsersRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("getUsers", TMessageType.Call, seqid_));
        getUsers_args args = new getUsers_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetUsersResponse recv_getUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUsers_result result = new getUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUsers failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public GetUsersResponseById getUsersById(GetUsersRequestById request)
      {
        send_getUsersById(request);
        return recv_getUsersById();

      }
      public void send_getUsersById(GetUsersRequestById request)
      {
        oprot_.WriteMessageBegin(new TMessage("getUsersById", TMessageType.Call, seqid_));
        getUsersById_args args = new getUsersById_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetUsersResponseById recv_getUsersById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUsersById_result result = new getUsersById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUsersById failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="provider"></param>
      /// <param name="providerIds"></param>
      public Dictionary<string, THPublicUser> getPublicUsersByIdentity(string sessionId, string provider, List<string> providerIds)
      {
        send_getPublicUsersByIdentity(sessionId, provider, providerIds);
        return recv_getPublicUsersByIdentity();

      }
      public void send_getPublicUsersByIdentity(string sessionId, string provider, List<string> providerIds)
      {
        oprot_.WriteMessageBegin(new TMessage("getPublicUsersByIdentity", TMessageType.Call, seqid_));
        getPublicUsersByIdentity_args args = new getPublicUsersByIdentity_args();
        args.SessionId = sessionId;
        args.Provider = provider;
        args.ProviderIds = providerIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Dictionary<string, THPublicUser> recv_getPublicUsersByIdentity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPublicUsersByIdentity_result result = new getPublicUsersByIdentity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPublicUsersByIdentity failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="query"></param>
      public List<THUserReference> findUsers(string sessionId, THUsersQuery query)
      {
        send_findUsers(sessionId, query);
        return recv_findUsers();

      }
      public void send_findUsers(string sessionId, THUsersQuery query)
      {
        oprot_.WriteMessageBegin(new TMessage("findUsers", TMessageType.Call, seqid_));
        findUsers_args args = new findUsers_args();
        args.SessionId = sessionId;
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THUserReference> recv_findUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findUsers_result result = new findUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findUsers failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="userId"></param>
      public int addFriend(string sessionId, string userId)
      {
        send_addFriend(sessionId, userId);
        return recv_addFriend();

      }
      public void send_addFriend(string sessionId, string userId)
      {
        oprot_.WriteMessageBegin(new TMessage("addFriend", TMessageType.Call, seqid_));
        addFriend_args args = new addFriend_args();
        args.SessionId = sessionId;
        args.UserId = userId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_addFriend()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addFriend_result result = new addFriend_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addFriend failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public AddFriendsResponse addFriends(AddFriendsRequest request)
      {
        send_addFriends(request);
        return recv_addFriends();

      }
      public void send_addFriends(AddFriendsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("addFriends", TMessageType.Call, seqid_));
        addFriends_args args = new addFriends_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AddFriendsResponse recv_addFriends()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addFriends_result result = new addFriends_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addFriends failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="provider"></param>
      /// <param name="providerIds"></param>
      public int addFriendsByIdentity(string sessionId, string provider, List<string> providerIds)
      {
        send_addFriendsByIdentity(sessionId, provider, providerIds);
        return recv_addFriendsByIdentity();

      }
      public void send_addFriendsByIdentity(string sessionId, string provider, List<string> providerIds)
      {
        oprot_.WriteMessageBegin(new TMessage("addFriendsByIdentity", TMessageType.Call, seqid_));
        addFriendsByIdentity_args args = new addFriendsByIdentity_args();
        args.SessionId = sessionId;
        args.Provider = provider;
        args.ProviderIds = providerIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_addFriendsByIdentity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addFriendsByIdentity_result result = new addFriendsByIdentity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addFriendsByIdentity failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="userId"></param>
      public int removeFriend(string sessionId, string userId)
      {
        send_removeFriend(sessionId, userId);
        return recv_removeFriend();

      }
      public void send_removeFriend(string sessionId, string userId)
      {
        oprot_.WriteMessageBegin(new TMessage("removeFriend", TMessageType.Call, seqid_));
        removeFriend_args args = new removeFriend_args();
        args.SessionId = sessionId;
        args.UserId = userId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_removeFriend()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeFriend_result result = new removeFriend_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeFriend failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public RemoveFriendsResponse removeFriends(RemoveFriendsRequest request)
      {
        send_removeFriends(request);
        return recv_removeFriends();

      }
      public void send_removeFriends(RemoveFriendsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("removeFriends", TMessageType.Call, seqid_));
        removeFriends_args args = new removeFriends_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public RemoveFriendsResponse recv_removeFriends()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeFriends_result result = new removeFriends_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeFriends failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="userIds"></param>
      public int setFriends(string sessionId, List<string> userIds)
      {
        send_setFriends(sessionId, userIds);
        return recv_setFriends();

      }
      public void send_setFriends(string sessionId, List<string> userIds)
      {
        oprot_.WriteMessageBegin(new TMessage("setFriends", TMessageType.Call, seqid_));
        setFriends_args args = new setFriends_args();
        args.SessionId = sessionId;
        args.UserIds = userIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_setFriends()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setFriends_result result = new setFriends_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setFriends failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="provider"></param>
      /// <param name="providerIds"></param>
      public int removeFriendsByIdentity(string sessionId, string provider, List<string> providerIds)
      {
        send_removeFriendsByIdentity(sessionId, provider, providerIds);
        return recv_removeFriendsByIdentity();

      }
      public void send_removeFriendsByIdentity(string sessionId, string provider, List<string> providerIds)
      {
        oprot_.WriteMessageBegin(new TMessage("removeFriendsByIdentity", TMessageType.Call, seqid_));
        removeFriendsByIdentity_args args = new removeFriendsByIdentity_args();
        args.SessionId = sessionId;
        args.Provider = provider;
        args.ProviderIds = providerIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_removeFriendsByIdentity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeFriendsByIdentity_result result = new removeFriendsByIdentity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeFriendsByIdentity failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="provider"></param>
      /// <param name="providerIds"></param>
      public int setFriendsByIdentity(string sessionId, string provider, List<string> providerIds)
      {
        send_setFriendsByIdentity(sessionId, provider, providerIds);
        return recv_setFriendsByIdentity();

      }
      public void send_setFriendsByIdentity(string sessionId, string provider, List<string> providerIds)
      {
        oprot_.WriteMessageBegin(new TMessage("setFriendsByIdentity", TMessageType.Call, seqid_));
        setFriendsByIdentity_args args = new setFriendsByIdentity_args();
        args.SessionId = sessionId;
        args.Provider = provider;
        args.ProviderIds = providerIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_setFriendsByIdentity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setFriendsByIdentity_result result = new setFriendsByIdentity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setFriendsByIdentity failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="userId"></param>
      public bool isFriend(string sessionId, string userId)
      {
        send_isFriend(sessionId, userId);
        return recv_isFriend();

      }
      public void send_isFriend(string sessionId, string userId)
      {
        oprot_.WriteMessageBegin(new TMessage("isFriend", TMessageType.Call, seqid_));
        isFriend_args args = new isFriend_args();
        args.SessionId = sessionId;
        args.UserId = userId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_isFriend()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        isFriend_result result = new isFriend_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isFriend failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public AreFriendsResponse areFriends(AreFriendsRequest request)
      {
        send_areFriends(request);
        return recv_areFriends();

      }
      public void send_areFriends(AreFriendsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("areFriends", TMessageType.Call, seqid_));
        areFriends_args args = new areFriends_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AreFriendsResponse recv_areFriends()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        areFriends_result result = new areFriends_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "areFriends failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      public int getFriendsCount(string sessionId)
      {
        send_getFriendsCount(sessionId);
        return recv_getFriendsCount();

      }
      public void send_getFriendsCount(string sessionId)
      {
        oprot_.WriteMessageBegin(new TMessage("getFriendsCount", TMessageType.Call, seqid_));
        getFriendsCount_args args = new getFriendsCount_args();
        args.SessionId = sessionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_getFriendsCount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getFriendsCount_result result = new getFriendsCount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFriendsCount failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="offset"></param>
      /// <param name="limit"></param>
      public List<THPublicUser> getFriends(string sessionId, int offset, int limit)
      {
        send_getFriends(sessionId, offset, limit);
        return recv_getFriends();

      }
      public void send_getFriends(string sessionId, int offset, int limit)
      {
        oprot_.WriteMessageBegin(new TMessage("getFriends", TMessageType.Call, seqid_));
        getFriends_args args = new getFriends_args();
        args.SessionId = sessionId;
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THPublicUser> recv_getFriends()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getFriends_result result = new getFriends_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFriends failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public GetFriendsResponse getFriendsV2(GetFriendsRequest request)
      {
        send_getFriendsV2(request);
        return recv_getFriendsV2();

      }
      public void send_getFriendsV2(GetFriendsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("getFriendsV2", TMessageType.Call, seqid_));
        getFriendsV2_args args = new getFriendsV2_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetFriendsResponse recv_getFriendsV2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getFriendsV2_result result = new getFriendsV2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFriendsV2 failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="offset"></param>
      /// <param name="limit"></param>
      public List<THSuggestedFriend> getSuggestedFriends(string sessionId, int offset, int limit)
      {
        send_getSuggestedFriends(sessionId, offset, limit);
        return recv_getSuggestedFriends();

      }
      public void send_getSuggestedFriends(string sessionId, int offset, int limit)
      {
        oprot_.WriteMessageBegin(new TMessage("getSuggestedFriends", TMessageType.Call, seqid_));
        getSuggestedFriends_args args = new getSuggestedFriends_args();
        args.SessionId = sessionId;
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THSuggestedFriend> recv_getSuggestedFriends()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSuggestedFriends_result result = new getSuggestedFriends_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSuggestedFriends failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public GetSuggestedFriendsResponse getSuggestedFriendsV2(GetSuggestedFriendsRequest request)
      {
        send_getSuggestedFriendsV2(request);
        return recv_getSuggestedFriendsV2();

      }
      public void send_getSuggestedFriendsV2(GetSuggestedFriendsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("getSuggestedFriendsV2", TMessageType.Call, seqid_));
        getSuggestedFriendsV2_args args = new getSuggestedFriendsV2_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetSuggestedFriendsResponse recv_getSuggestedFriendsV2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSuggestedFriendsV2_result result = new getSuggestedFriendsV2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSuggestedFriendsV2 failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      public List<THUserReference> getMentionFriends(string sessionId)
      {
        send_getMentionFriends(sessionId);
        return recv_getMentionFriends();

      }
      public void send_getMentionFriends(string sessionId)
      {
        oprot_.WriteMessageBegin(new TMessage("getMentionFriends", TMessageType.Call, seqid_));
        getMentionFriends_args args = new getMentionFriends_args();
        args.SessionId = sessionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THUserReference> recv_getMentionFriends()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getMentionFriends_result result = new getMentionFriends_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMentionFriends failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public GetTopicsResponse getTopics(GetTopicsRequest request)
      {
        send_getTopics(request);
        return recv_getTopics();

      }
      public void send_getTopics(GetTopicsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("getTopics", TMessageType.Call, seqid_));
        getTopics_args args = new getTopics_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetTopicsResponse recv_getTopics()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTopics_result result = new getTopics_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopics failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public GetTopicResponse getTopic(GetTopicRequest request)
      {
        send_getTopic(request);
        return recv_getTopic();

      }
      public void send_getTopic(GetTopicRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("getTopic", TMessageType.Call, seqid_));
        getTopic_args args = new getTopic_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetTopicResponse recv_getTopic()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTopic_result result = new getTopic_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopic failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public FollowEntitiesResponse followEntities(FollowEntitiesRequest request)
      {
        send_followEntities(request);
        return recv_followEntities();

      }
      public void send_followEntities(FollowEntitiesRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("followEntities", TMessageType.Call, seqid_));
        followEntities_args args = new followEntities_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public FollowEntitiesResponse recv_followEntities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        followEntities_result result = new followEntities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "followEntities failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public UnfollowEntitiesResponse unfollowEntities(UnfollowEntitiesRequest request)
      {
        send_unfollowEntities(request);
        return recv_unfollowEntities();

      }
      public void send_unfollowEntities(UnfollowEntitiesRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("unfollowEntities", TMessageType.Call, seqid_));
        unfollowEntities_args args = new unfollowEntities_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public UnfollowEntitiesResponse recv_unfollowEntities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        unfollowEntities_result result = new unfollowEntities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "unfollowEntities failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public GetEntityFollowersResponse getEntityFollowers(GetEntityFollowersRequest request)
      {
        send_getEntityFollowers(request);
        return recv_getEntityFollowers();

      }
      public void send_getEntityFollowers(GetEntityFollowersRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("getEntityFollowers", TMessageType.Call, seqid_));
        getEntityFollowers_args args = new getEntityFollowers_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetEntityFollowersResponse recv_getEntityFollowers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getEntityFollowers_result result = new getEntityFollowers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getEntityFollowers failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public IsFollowingResponse isFollowing(IsFollowingRequest request)
      {
        send_isFollowing(request);
        return recv_isFollowing();

      }
      public void send_isFollowing(IsFollowingRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("isFollowing", TMessageType.Call, seqid_));
        isFollowing_args args = new isFollowing_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public IsFollowingResponse recv_isFollowing()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        isFollowing_result result = new isFollowing_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isFollowing failed: unknown result");
      }

      
      /// <summary>
      /// topics dashboard
      /// </summary>
      /// <param name="request"></param>
      public DDGetTopicsResponse ddGetTopics(DDGetTopicsRequest request)
      {
        send_ddGetTopics(request);
        return recv_ddGetTopics();

      }
      public void send_ddGetTopics(DDGetTopicsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddGetTopics", TMessageType.Call, seqid_));
        ddGetTopics_args args = new ddGetTopics_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDGetTopicsResponse recv_ddGetTopics()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddGetTopics_result result = new ddGetTopics_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddGetTopics failed: unknown result");
      }

      
      public DDGetTopicResponse ddGetTopic(DDGetTopicRequest request)
      {
        send_ddGetTopic(request);
        return recv_ddGetTopic();

      }
      public void send_ddGetTopic(DDGetTopicRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddGetTopic", TMessageType.Call, seqid_));
        ddGetTopic_args args = new ddGetTopic_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDGetTopicResponse recv_ddGetTopic()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddGetTopic_result result = new ddGetTopic_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddGetTopic failed: unknown result");
      }

      
      public DDCreateTopicResponse ddCreateTopic(DDCreateTopicRequest request)
      {
        send_ddCreateTopic(request);
        return recv_ddCreateTopic();

      }
      public void send_ddCreateTopic(DDCreateTopicRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddCreateTopic", TMessageType.Call, seqid_));
        ddCreateTopic_args args = new ddCreateTopic_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDCreateTopicResponse recv_ddCreateTopic()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddCreateTopic_result result = new ddCreateTopic_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddCreateTopic failed: unknown result");
      }

      
      public DDUpdateTopicResponse ddUpdateTopic(DDUpdateTopicRequest request)
      {
        send_ddUpdateTopic(request);
        return recv_ddUpdateTopic();

      }
      public void send_ddUpdateTopic(DDUpdateTopicRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddUpdateTopic", TMessageType.Call, seqid_));
        ddUpdateTopic_args args = new ddUpdateTopic_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDUpdateTopicResponse recv_ddUpdateTopic()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddUpdateTopic_result result = new ddUpdateTopic_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddUpdateTopic failed: unknown result");
      }

      
      public DDDeleteTopicsResponse ddDeleteTopics(DDDeleteTopicsRequest request)
      {
        send_ddDeleteTopics(request);
        return recv_ddDeleteTopics();

      }
      public void send_ddDeleteTopics(DDDeleteTopicsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddDeleteTopics", TMessageType.Call, seqid_));
        ddDeleteTopics_args args = new ddDeleteTopics_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDDeleteTopicsResponse recv_ddDeleteTopics()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddDeleteTopics_result result = new ddDeleteTopics_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddDeleteTopics failed: unknown result");
      }

      
      public DDGetEntityFollowersResponse ddGetEntityFollowers(DDGetEntityFollowersRequest request)
      {
        send_ddGetEntityFollowers(request);
        return recv_ddGetEntityFollowers();

      }
      public void send_ddGetEntityFollowers(DDGetEntityFollowersRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddGetEntityFollowers", TMessageType.Call, seqid_));
        ddGetEntityFollowers_args args = new ddGetEntityFollowers_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDGetEntityFollowersResponse recv_ddGetEntityFollowers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddGetEntityFollowers_result result = new ddGetEntityFollowers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddGetEntityFollowers failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public CreateGroupResponse createGroup(CreateGroupRequest request)
      {
        send_createGroup(request);
        return recv_createGroup();

      }
      public void send_createGroup(CreateGroupRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("createGroup", TMessageType.Call, seqid_));
        createGroup_args args = new createGroup_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public CreateGroupResponse recv_createGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createGroup_result result = new createGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createGroup failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public UpdateGroupResponse updateGroup(UpdateGroupRequest request)
      {
        send_updateGroup(request);
        return recv_updateGroup();

      }
      public void send_updateGroup(UpdateGroupRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("updateGroup", TMessageType.Call, seqid_));
        updateGroup_args args = new updateGroup_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public UpdateGroupResponse recv_updateGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateGroup_result result = new updateGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateGroup failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public DeleteGroupsResponse deleteGroups(DeleteGroupsRequest request)
      {
        send_deleteGroups(request);
        return recv_deleteGroups();

      }
      public void send_deleteGroups(DeleteGroupsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteGroups", TMessageType.Call, seqid_));
        deleteGroups_args args = new deleteGroups_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DeleteGroupsResponse recv_deleteGroups()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteGroups_result result = new deleteGroups_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteGroups failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public GetGroupsResponse getGroups(GetGroupsRequest request)
      {
        send_getGroups(request);
        return recv_getGroups();

      }
      public void send_getGroups(GetGroupsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("getGroups", TMessageType.Call, seqid_));
        getGroups_args args = new getGroups_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetGroupsResponse recv_getGroups()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getGroups_result result = new getGroups_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroups failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public GetGroupResponse getGroup(GetGroupRequest request)
      {
        send_getGroup(request);
        return recv_getGroup();

      }
      public void send_getGroup(GetGroupRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("getGroup", TMessageType.Call, seqid_));
        getGroup_args args = new getGroup_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetGroupResponse recv_getGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getGroup_result result = new getGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroup failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public UpdateGroupMembersResponse updateGroupMembers(UpdateGroupMembersRequest request)
      {
        send_updateGroupMembers(request);
        return recv_updateGroupMembers();

      }
      public void send_updateGroupMembers(UpdateGroupMembersRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("updateGroupMembers", TMessageType.Call, seqid_));
        updateGroupMembers_args args = new updateGroupMembers_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public UpdateGroupMembersResponse recv_updateGroupMembers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateGroupMembers_result result = new updateGroupMembers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateGroupMembers failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public RemoveGroupMembersResponse removeGroupMembers(RemoveGroupMembersRequest request)
      {
        send_removeGroupMembers(request);
        return recv_removeGroupMembers();

      }
      public void send_removeGroupMembers(RemoveGroupMembersRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("removeGroupMembers", TMessageType.Call, seqid_));
        removeGroupMembers_args args = new removeGroupMembers_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public RemoveGroupMembersResponse recv_removeGroupMembers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeGroupMembers_result result = new removeGroupMembers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeGroupMembers failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public AreGroupMembersResponse areGroupMembers(AreGroupMembersRequest request)
      {
        send_areGroupMembers(request);
        return recv_areGroupMembers();

      }
      public void send_areGroupMembers(AreGroupMembersRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("areGroupMembers", TMessageType.Call, seqid_));
        areGroupMembers_args args = new areGroupMembers_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AreGroupMembersResponse recv_areGroupMembers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        areGroupMembers_result result = new areGroupMembers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "areGroupMembers failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public GetGroupMembersResponse getGroupMembers(GetGroupMembersRequest request)
      {
        send_getGroupMembers(request);
        return recv_getGroupMembers();

      }
      public void send_getGroupMembers(GetGroupMembersRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("getGroupMembers", TMessageType.Call, seqid_));
        getGroupMembers_args args = new getGroupMembers_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetGroupMembersResponse recv_getGroupMembers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getGroupMembers_result result = new getGroupMembers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroupMembers failed: unknown result");
      }

      
      /// <summary>
      /// groups DD
      /// </summary>
      /// <param name="request"></param>
      public DDCreateGroupResponse ddCreateGroup(DDCreateGroupRequest request)
      {
        send_ddCreateGroup(request);
        return recv_ddCreateGroup();

      }
      public void send_ddCreateGroup(DDCreateGroupRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddCreateGroup", TMessageType.Call, seqid_));
        ddCreateGroup_args args = new ddCreateGroup_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDCreateGroupResponse recv_ddCreateGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddCreateGroup_result result = new ddCreateGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddCreateGroup failed: unknown result");
      }

      
      public DDUpdateGroupResponse ddUpdateGroup(DDUpdateGroupRequest request)
      {
        send_ddUpdateGroup(request);
        return recv_ddUpdateGroup();

      }
      public void send_ddUpdateGroup(DDUpdateGroupRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddUpdateGroup", TMessageType.Call, seqid_));
        ddUpdateGroup_args args = new ddUpdateGroup_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDUpdateGroupResponse recv_ddUpdateGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddUpdateGroup_result result = new ddUpdateGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddUpdateGroup failed: unknown result");
      }

      
      public DDDeleteGroupsResponse ddDeleteGroups(DDDeleteGroupsRequest request)
      {
        send_ddDeleteGroups(request);
        return recv_ddDeleteGroups();

      }
      public void send_ddDeleteGroups(DDDeleteGroupsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddDeleteGroups", TMessageType.Call, seqid_));
        ddDeleteGroups_args args = new ddDeleteGroups_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDDeleteGroupsResponse recv_ddDeleteGroups()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddDeleteGroups_result result = new ddDeleteGroups_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddDeleteGroups failed: unknown result");
      }

      
      public DDGetGroupResponse ddGetGroup(DDGetGroupRequest request)
      {
        send_ddGetGroup(request);
        return recv_ddGetGroup();

      }
      public void send_ddGetGroup(DDGetGroupRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddGetGroup", TMessageType.Call, seqid_));
        ddGetGroup_args args = new ddGetGroup_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDGetGroupResponse recv_ddGetGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddGetGroup_result result = new ddGetGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddGetGroup failed: unknown result");
      }

      
      public DDGetGroupsResponse ddGetGroups(DDGetGroupsRequest request)
      {
        send_ddGetGroups(request);
        return recv_ddGetGroups();

      }
      public void send_ddGetGroups(DDGetGroupsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddGetGroups", TMessageType.Call, seqid_));
        ddGetGroups_args args = new ddGetGroups_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDGetGroupsResponse recv_ddGetGroups()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddGetGroups_result result = new ddGetGroups_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddGetGroups failed: unknown result");
      }

      
      public DDGetGroupMembersResponse ddGetGroupMembers(DDGetGroupMembersRequest request)
      {
        send_ddGetGroupMembers(request);
        return recv_ddGetGroupMembers();

      }
      public void send_ddGetGroupMembers(DDGetGroupMembersRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddGetGroupMembers", TMessageType.Call, seqid_));
        ddGetGroupMembers_args args = new ddGetGroupMembers_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDGetGroupMembersResponse recv_ddGetGroupMembers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddGetGroupMembers_result result = new ddGetGroupMembers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddGetGroupMembers failed: unknown result");
      }

      
      public DDUpdateGroupMembersResponse ddUpdateGroupMembers(DDUpdateGroupMembersRequest request)
      {
        send_ddUpdateGroupMembers(request);
        return recv_ddUpdateGroupMembers();

      }
      public void send_ddUpdateGroupMembers(DDUpdateGroupMembersRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddUpdateGroupMembers", TMessageType.Call, seqid_));
        ddUpdateGroupMembers_args args = new ddUpdateGroupMembers_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDUpdateGroupMembersResponse recv_ddUpdateGroupMembers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddUpdateGroupMembers_result result = new ddUpdateGroupMembers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddUpdateGroupMembers failed: unknown result");
      }

      
      public DDRemoveGroupMembersResponse ddRemoveGroupMembers(DDRemoveGroupMembersRequest request)
      {
        send_ddRemoveGroupMembers(request);
        return recv_ddRemoveGroupMembers();

      }
      public void send_ddRemoveGroupMembers(DDRemoveGroupMembersRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddRemoveGroupMembers", TMessageType.Call, seqid_));
        ddRemoveGroupMembers_args args = new ddRemoveGroupMembers_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDRemoveGroupMembersResponse recv_ddRemoveGroupMembers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddRemoveGroupMembers_result result = new ddRemoveGroupMembers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddRemoveGroupMembers failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public GetChatsResponse getChats(GetChatsRequest request)
      {
        send_getChats(request);
        return recv_getChats();

      }
      public void send_getChats(GetChatsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("getChats", TMessageType.Call, seqid_));
        getChats_args args = new getChats_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetChatsResponse recv_getChats()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getChats_result result = new getChats_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChats failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public GetChatResponse getChat(GetChatRequest request)
      {
        send_getChat(request);
        return recv_getChat();

      }
      public void send_getChat(GetChatRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("getChat", TMessageType.Call, seqid_));
        getChat_args args = new getChat_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetChatResponse recv_getChat()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getChat_result result = new getChat_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChat failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public GetChatMessagesResponse getChatMessages(GetChatMessagesRequest request)
      {
        send_getChatMessages(request);
        return recv_getChatMessages();

      }
      public void send_getChatMessages(GetChatMessagesRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("getChatMessages", TMessageType.Call, seqid_));
        getChatMessages_args args = new getChatMessages_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetChatMessagesResponse recv_getChatMessages()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getChatMessages_result result = new getChatMessages_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChatMessages failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public SendChatMessageResponse sendChatMessage(SendChatMessageRequest request)
      {
        send_sendChatMessage(request);
        return recv_sendChatMessage();

      }
      public void send_sendChatMessage(SendChatMessageRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("sendChatMessage", TMessageType.Call, seqid_));
        sendChatMessage_args args = new sendChatMessage_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public SendChatMessageResponse recv_sendChatMessage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendChatMessage_result result = new sendChatMessage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendChatMessage failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="request"></param>
      public THCreateTokenResponse createInviteUrl(string sessionId, THCreateTokenRequest request)
      {
        send_createInviteUrl(sessionId, request);
        return recv_createInviteUrl();

      }
      public void send_createInviteUrl(string sessionId, THCreateTokenRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("createInviteUrl", TMessageType.Call, seqid_));
        createInviteUrl_args args = new createInviteUrl_args();
        args.SessionId = sessionId;
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THCreateTokenResponse recv_createInviteUrl()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createInviteUrl_result result = new createInviteUrl_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createInviteUrl failed: unknown result");
      }

      
      /// <summary>
      /// #todo_sdk7 creates invite url and merges default invite content with custom one
      /// </summary>
      /// <param name="request"></param>
      public CreateInviteResponse createInvite(CreateInviteRequest request)
      {
        send_createInvite(request);
        return recv_createInvite();

      }
      public void send_createInvite(CreateInviteRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("createInvite", TMessageType.Call, seqid_));
        createInvite_args args = new createInvite_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public CreateInviteResponse recv_createInvite()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createInvite_result result = new createInvite_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createInvite failed: unknown result");
      }

      
      public THInviteProviders getInviteProviders(string sessionId)
      {
        send_getInviteProviders(sessionId);
        return recv_getInviteProviders();

      }
      public void send_getInviteProviders(string sessionId)
      {
        oprot_.WriteMessageBegin(new TMessage("getInviteProviders", TMessageType.Call, seqid_));
        getInviteProviders_args args = new getInviteProviders_args();
        args.SessionId = sessionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THInviteProviders recv_getInviteProviders()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getInviteProviders_result result = new getInviteProviders_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getInviteProviders failed: unknown result");
      }

      
      /// <summary>
      /// #todo_sdk7 returns the list of available invite providers, sdk will check these providers if they're available on the device or not
      /// </summary>
      /// <param name="request"></param>
      public GetAvailableInviteChannelsResponse getAvailableInviteChannels(GetAvailableInviteChannelsRequest request)
      {
        send_getAvailableInviteChannels(request);
        return recv_getAvailableInviteChannels();

      }
      public void send_getAvailableInviteChannels(GetAvailableInviteChannelsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("getAvailableInviteChannels", TMessageType.Call, seqid_));
        getAvailableInviteChannels_args args = new getAvailableInviteChannels_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetAvailableInviteChannelsResponse recv_getAvailableInviteChannels()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAvailableInviteChannels_result result = new getAvailableInviteChannels_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAvailableInviteChannels failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="request"></param>
      public THTokenInfo processAppOpen(string sessionId, THProcessAppOpenRequest request)
      {
        send_processAppOpen(sessionId, request);
        return recv_processAppOpen();

      }
      public void send_processAppOpen(string sessionId, THProcessAppOpenRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("processAppOpen", TMessageType.Call, seqid_));
        processAppOpen_args args = new processAppOpen_args();
        args.SessionId = sessionId;
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THTokenInfo recv_processAppOpen()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        processAppOpen_result result = new processAppOpen_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "processAppOpen failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      public List<THPublicUser> getReferredUsers(string sessionId)
      {
        send_getReferredUsers(sessionId);
        return recv_getReferredUsers();

      }
      public void send_getReferredUsers(string sessionId)
      {
        oprot_.WriteMessageBegin(new TMessage("getReferredUsers", TMessageType.Call, seqid_));
        getReferredUsers_args args = new getReferredUsers_args();
        args.SessionId = sessionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THPublicUser> recv_getReferredUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getReferredUsers_result result = new getReferredUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getReferredUsers failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="event"></param>
      /// <param name="offset"></param>
      /// <param name="limit"></param>
      public List<THReferralUser> getReferredUsersV2(string sessionId, string @event, int offset, int limit)
      {
        send_getReferredUsersV2(sessionId, @event, offset, limit);
        return recv_getReferredUsersV2();

      }
      public void send_getReferredUsersV2(string sessionId, string @event, int offset, int limit)
      {
        oprot_.WriteMessageBegin(new TMessage("getReferredUsersV2", TMessageType.Call, seqid_));
        getReferredUsersV2_args args = new getReferredUsersV2_args();
        args.SessionId = sessionId;
        args.Event = @event;
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THReferralUser> recv_getReferredUsersV2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getReferredUsersV2_result result = new getReferredUsersV2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getReferredUsersV2 failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="event"></param>
      /// <param name="offset"></param>
      /// <param name="limit"></param>
      public List<THReferralUser> getReferrerUsers(string sessionId, string @event, int offset, int limit)
      {
        send_getReferrerUsers(sessionId, @event, offset, limit);
        return recv_getReferrerUsers();

      }
      public void send_getReferrerUsers(string sessionId, string @event, int offset, int limit)
      {
        oprot_.WriteMessageBegin(new TMessage("getReferrerUsers", TMessageType.Call, seqid_));
        getReferrerUsers_args args = new getReferrerUsers_args();
        args.SessionId = sessionId;
        args.Event = @event;
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THReferralUser> recv_getReferrerUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getReferrerUsers_result result = new getReferrerUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getReferrerUsers failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="referrerId"></param>
      /// <param name="event"></param>
      /// <param name="customData"></param>
      public bool setReferrer(string sessionId, string referrerId, string @event, Dictionary<string, string> customData)
      {
        send_setReferrer(sessionId, referrerId, @event, customData);
        return recv_setReferrer();

      }
      public void send_setReferrer(string sessionId, string referrerId, string @event, Dictionary<string, string> customData)
      {
        oprot_.WriteMessageBegin(new TMessage("setReferrer", TMessageType.Call, seqid_));
        setReferrer_args args = new setReferrer_args();
        args.SessionId = sessionId;
        args.ReferrerId = referrerId;
        args.Event = @event;
        args.CustomData = customData;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_setReferrer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setReferrer_result result = new setReferrer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setReferrer failed: unknown result");
      }

      
      /// <summary>
      /// DD
      /// </summary>
      /// <param name="request"></param>
      public DDGetReferralUsersResponse ddGetReferredUsers(DDGetReferralUsersRequest request)
      {
        send_ddGetReferredUsers(request);
        return recv_ddGetReferredUsers();

      }
      public void send_ddGetReferredUsers(DDGetReferralUsersRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddGetReferredUsers", TMessageType.Call, seqid_));
        ddGetReferredUsers_args args = new ddGetReferredUsers_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDGetReferralUsersResponse recv_ddGetReferredUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddGetReferredUsers_result result = new ddGetReferredUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddGetReferredUsers failed: unknown result");
      }

      
      public DDGetReferralUsersResponse ddGetReferrerUsers(DDGetReferralUsersRequest request)
      {
        send_ddGetReferrerUsers(request);
        return recv_ddGetReferrerUsers();

      }
      public void send_ddGetReferrerUsers(DDGetReferralUsersRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddGetReferrerUsers", TMessageType.Call, seqid_));
        ddGetReferrerUsers_args args = new ddGetReferrerUsers_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDGetReferralUsersResponse recv_ddGetReferrerUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddGetReferrerUsers_result result = new ddGetReferrerUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddGetReferrerUsers failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="link"></param>
      public string processCrossPromoClick(string sessionId, string link)
      {
        send_processCrossPromoClick(sessionId, link);
        return recv_processCrossPromoClick();

      }
      public void send_processCrossPromoClick(string sessionId, string link)
      {
        oprot_.WriteMessageBegin(new TMessage("processCrossPromoClick", TMessageType.Call, seqid_));
        processCrossPromoClick_args args = new processCrossPromoClick_args();
        args.SessionId = sessionId;
        args.Link = link;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_processCrossPromoClick()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        processCrossPromoClick_result result = new processCrossPromoClick_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "processCrossPromoClick failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="feed"></param>
      /// <param name="query"></param>
      public List<THActivityPost> getActivities(string sessionId, string feed, THActivitiesQuery query)
      {
        send_getActivities(sessionId, feed, query);
        return recv_getActivities();

      }
      public void send_getActivities(string sessionId, string feed, THActivitiesQuery query)
      {
        oprot_.WriteMessageBegin(new TMessage("getActivities", TMessageType.Call, seqid_));
        getActivities_args args = new getActivities_args();
        args.SessionId = sessionId;
        args.Feed = feed;
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THActivityPost> recv_getActivities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getActivities_result result = new getActivities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getActivities failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="feed"></param>
      public List<THActivityPost> getStickyActivities(string sessionId, string feed)
      {
        send_getStickyActivities(sessionId, feed);
        return recv_getStickyActivities();

      }
      public void send_getStickyActivities(string sessionId, string feed)
      {
        oprot_.WriteMessageBegin(new TMessage("getStickyActivities", TMessageType.Call, seqid_));
        getStickyActivities_args args = new getStickyActivities_args();
        args.SessionId = sessionId;
        args.Feed = feed;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THActivityPost> recv_getStickyActivities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getStickyActivities_result result = new getStickyActivities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getStickyActivities failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="activityId"></param>
      /// <param name="query"></param>
      public List<THActivityPost> getComments(string sessionId, string activityId, THActivitiesQuery query)
      {
        send_getComments(sessionId, activityId, query);
        return recv_getComments();

      }
      public void send_getComments(string sessionId, string activityId, THActivitiesQuery query)
      {
        oprot_.WriteMessageBegin(new TMessage("getComments", TMessageType.Call, seqid_));
        getComments_args args = new getComments_args();
        args.SessionId = sessionId;
        args.ActivityId = activityId;
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THActivityPost> recv_getComments()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getComments_result result = new getComments_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getComments failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="query"></param>
      public List<string> findTags(string sessionId, THTagsQuery query)
      {
        send_findTags(sessionId, query);
        return recv_findTags();

      }
      public void send_findTags(string sessionId, THTagsQuery query)
      {
        oprot_.WriteMessageBegin(new TMessage("findTags", TMessageType.Call, seqid_));
        findTags_args args = new findTags_args();
        args.SessionId = sessionId;
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<string> recv_findTags()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findTags_result result = new findTags_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findTags failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public FindTagsResponse findTagsV2(FindTagsRequest request)
      {
        send_findTagsV2(request);
        return recv_findTagsV2();

      }
      public void send_findTagsV2(FindTagsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("findTagsV2", TMessageType.Call, seqid_));
        findTagsV2_args args = new findTagsV2_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public FindTagsResponse recv_findTagsV2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findTagsV2_result result = new findTagsV2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findTagsV2 failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="activityId"></param>
      public THActivityPost getActivity(string sessionId, string activityId)
      {
        send_getActivity(sessionId, activityId);
        return recv_getActivity();

      }
      public void send_getActivity(string sessionId, string activityId)
      {
        oprot_.WriteMessageBegin(new TMessage("getActivity", TMessageType.Call, seqid_));
        getActivity_args args = new getActivity_args();
        args.SessionId = sessionId;
        args.ActivityId = activityId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THActivityPost recv_getActivity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getActivity_result result = new getActivity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getActivity failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="feed"></param>
      /// <param name="activityPostContent"></param>
      public THActivityPost postActivity(string sessionId, string feed, THActivityPostContent activityPostContent)
      {
        send_postActivity(sessionId, feed, activityPostContent);
        return recv_postActivity();

      }
      public void send_postActivity(string sessionId, string feed, THActivityPostContent activityPostContent)
      {
        oprot_.WriteMessageBegin(new TMessage("postActivity", TMessageType.Call, seqid_));
        postActivity_args args = new postActivity_args();
        args.SessionId = sessionId;
        args.Feed = feed;
        args.ActivityPostContent = activityPostContent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THActivityPost recv_postActivity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        postActivity_result result = new postActivity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "postActivity failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="activityId"></param>
      /// <param name="activityPostContent"></param>
      public THActivityPost postComment(string sessionId, string activityId, THActivityPostContent activityPostContent)
      {
        send_postComment(sessionId, activityId, activityPostContent);
        return recv_postComment();

      }
      public void send_postComment(string sessionId, string activityId, THActivityPostContent activityPostContent)
      {
        oprot_.WriteMessageBegin(new TMessage("postComment", TMessageType.Call, seqid_));
        postComment_args args = new postComment_args();
        args.SessionId = sessionId;
        args.ActivityId = activityId;
        args.ActivityPostContent = activityPostContent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THActivityPost recv_postComment()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        postComment_result result = new postComment_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "postComment failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="activityId"></param>
      /// <param name="isLiked"></param>
      public THActivityPost likeActivity(string sessionId, string activityId, bool isLiked)
      {
        send_likeActivity(sessionId, activityId, isLiked);
        return recv_likeActivity();

      }
      public void send_likeActivity(string sessionId, string activityId, bool isLiked)
      {
        oprot_.WriteMessageBegin(new TMessage("likeActivity", TMessageType.Call, seqid_));
        likeActivity_args args = new likeActivity_args();
        args.SessionId = sessionId;
        args.ActivityId = activityId;
        args.IsLiked = isLiked;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THActivityPost recv_likeActivity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        likeActivity_result result = new likeActivity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "likeActivity failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="activityId"></param>
      /// <param name="offset"></param>
      /// <param name="limit"></param>
      public List<THPostAuthor> getActivityLikers(string sessionId, string activityId, int offset, int limit)
      {
        send_getActivityLikers(sessionId, activityId, offset, limit);
        return recv_getActivityLikers();

      }
      public void send_getActivityLikers(string sessionId, string activityId, int offset, int limit)
      {
        oprot_.WriteMessageBegin(new TMessage("getActivityLikers", TMessageType.Call, seqid_));
        getActivityLikers_args args = new getActivityLikers_args();
        args.SessionId = sessionId;
        args.ActivityId = activityId;
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THPostAuthor> recv_getActivityLikers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getActivityLikers_result result = new getActivityLikers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getActivityLikers failed: unknown result");
      }

      
      public bool deleteActivity(string sessionId, string activityId)
      {
        send_deleteActivity(sessionId, activityId);
        return recv_deleteActivity();

      }
      public void send_deleteActivity(string sessionId, string activityId)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteActivity", TMessageType.Call, seqid_));
        deleteActivity_args args = new deleteActivity_args();
        args.SessionId = sessionId;
        args.ActivityId = activityId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_deleteActivity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteActivity_result result = new deleteActivity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteActivity failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="activityIds"></param>
      public bool removeActivities(string sessionId, List<string> activityIds)
      {
        send_removeActivities(sessionId, activityIds);
        return recv_removeActivities();

      }
      public void send_removeActivities(string sessionId, List<string> activityIds)
      {
        oprot_.WriteMessageBegin(new TMessage("removeActivities", TMessageType.Call, seqid_));
        removeActivities_args args = new removeActivities_args();
        args.SessionId = sessionId;
        args.ActivityIds = activityIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_removeActivities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeActivities_result result = new removeActivities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeActivities failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="activityId"></param>
      /// <param name="reportingReason"></param>
      public bool reportActivity(string sessionId, string activityId, THReportingReason reportingReason)
      {
        send_reportActivity(sessionId, activityId, reportingReason);
        return recv_reportActivity();

      }
      public void send_reportActivity(string sessionId, string activityId, THReportingReason reportingReason)
      {
        oprot_.WriteMessageBegin(new TMessage("reportActivity", TMessageType.Call, seqid_));
        reportActivity_args args = new reportActivity_args();
        args.SessionId = sessionId;
        args.ActivityId = activityId;
        args.ReportingReason = reportingReason;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_reportActivity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reportActivity_result result = new reportActivity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reportActivity failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="commonProperties"></param>
      /// <param name="events"></param>
      public bool trackAnalyticsEvents(string sessionId, THSuperProperties commonProperties, List<THAnalyticsBaseEvent> events)
      {
        send_trackAnalyticsEvents(sessionId, commonProperties, events);
        return recv_trackAnalyticsEvents();

      }
      public void send_trackAnalyticsEvents(string sessionId, THSuperProperties commonProperties, List<THAnalyticsBaseEvent> events)
      {
        oprot_.WriteMessageBegin(new TMessage("trackAnalyticsEvents", TMessageType.Call, seqid_));
        trackAnalyticsEvents_args args = new trackAnalyticsEvents_args();
        args.SessionId = sessionId;
        args.CommonProperties = commonProperties;
        args.Events = events;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_trackAnalyticsEvents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        trackAnalyticsEvents_result result = new trackAnalyticsEvents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "trackAnalyticsEvents failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="pushTargetData"></param>
      public bool registerPushTarget(string sessionId, THPushTarget pushTargetData)
      {
        send_registerPushTarget(sessionId, pushTargetData);
        return recv_registerPushTarget();

      }
      public void send_registerPushTarget(string sessionId, THPushTarget pushTargetData)
      {
        oprot_.WriteMessageBegin(new TMessage("registerPushTarget", TMessageType.Call, seqid_));
        registerPushTarget_args args = new registerPushTarget_args();
        args.SessionId = sessionId;
        args.PushTargetData = pushTargetData;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_registerPushTarget()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        registerPushTarget_result result = new registerPushTarget_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerPushTarget failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="enabled"></param>
      public bool setPushNotificationsEnabled(string sessionId, bool enabled)
      {
        send_setPushNotificationsEnabled(sessionId, enabled);
        return recv_setPushNotificationsEnabled();

      }
      public void send_setPushNotificationsEnabled(string sessionId, bool enabled)
      {
        oprot_.WriteMessageBegin(new TMessage("setPushNotificationsEnabled", TMessageType.Call, seqid_));
        setPushNotificationsEnabled_args args = new setPushNotificationsEnabled_args();
        args.SessionId = sessionId;
        args.Enabled = enabled;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_setPushNotificationsEnabled()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setPushNotificationsEnabled_result result = new setPushNotificationsEnabled_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setPushNotificationsEnabled failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      public bool isPushNotificationsEnabled(string sessionId)
      {
        send_isPushNotificationsEnabled(sessionId);
        return recv_isPushNotificationsEnabled();

      }
      public void send_isPushNotificationsEnabled(string sessionId)
      {
        oprot_.WriteMessageBegin(new TMessage("isPushNotificationsEnabled", TMessageType.Call, seqid_));
        isPushNotificationsEnabled_args args = new isPushNotificationsEnabled_args();
        args.SessionId = sessionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_isPushNotificationsEnabled()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        isPushNotificationsEnabled_result result = new isPushNotificationsEnabled_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isPushNotificationsEnabled failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="notification"></param>
      public THNotificationsSummary sendPushNotification(string sessionId, THCustomNotification notification)
      {
        send_sendPushNotification(sessionId, notification);
        return recv_sendPushNotification();

      }
      public void send_sendPushNotification(string sessionId, THCustomNotification notification)
      {
        oprot_.WriteMessageBegin(new TMessage("sendPushNotification", TMessageType.Call, seqid_));
        sendPushNotification_args args = new sendPushNotification_args();
        args.SessionId = sessionId;
        args.Notification = notification;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THNotificationsSummary recv_sendPushNotification()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendPushNotification_result result = new sendPushNotification_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendPushNotification failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public SendNotificationResponse sendNotification(SendNotificationRequest request)
      {
        send_sendNotification(request);
        return recv_sendNotification();

      }
      public void send_sendNotification(SendNotificationRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("sendNotification", TMessageType.Call, seqid_));
        sendNotification_args args = new sendNotification_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public SendNotificationResponse recv_sendNotification()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendNotification_result result = new sendNotification_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendNotification failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="query"></param>
      public List<THNotification> getNotificationsList(string sessionId, THNotificationsQuery query)
      {
        send_getNotificationsList(sessionId, query);
        return recv_getNotificationsList();

      }
      public void send_getNotificationsList(string sessionId, THNotificationsQuery query)
      {
        oprot_.WriteMessageBegin(new TMessage("getNotificationsList", TMessageType.Call, seqid_));
        getNotificationsList_args args = new getNotificationsList_args();
        args.SessionId = sessionId;
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THNotification> recv_getNotificationsList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNotificationsList_result result = new getNotificationsList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNotificationsList failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="query"></param>
      public int getNotificationsCount(string sessionId, THNotificationsQuery query)
      {
        send_getNotificationsCount(sessionId, query);
        return recv_getNotificationsCount();

      }
      public void send_getNotificationsCount(string sessionId, THNotificationsQuery query)
      {
        oprot_.WriteMessageBegin(new TMessage("getNotificationsCount", TMessageType.Call, seqid_));
        getNotificationsCount_args args = new getNotificationsCount_args();
        args.SessionId = sessionId;
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_getNotificationsCount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNotificationsCount_result result = new getNotificationsCount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNotificationsCount failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="query"></param>
      public bool setNotificationsStatus(string sessionId, THNotificationsSetStatusParams query)
      {
        send_setNotificationsStatus(sessionId, query);
        return recv_setNotificationsStatus();

      }
      public void send_setNotificationsStatus(string sessionId, THNotificationsSetStatusParams query)
      {
        oprot_.WriteMessageBegin(new TMessage("setNotificationsStatus", TMessageType.Call, seqid_));
        setNotificationsStatus_args args = new setNotificationsStatus_args();
        args.SessionId = sessionId;
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_setNotificationsStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setNotificationsStatus_result result = new setNotificationsStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setNotificationsStatus failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public GetNotificationsResponse getNotifications(GetNotificationsRequest request)
      {
        send_getNotifications(request);
        return recv_getNotifications();

      }
      public void send_getNotifications(GetNotificationsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("getNotifications", TMessageType.Call, seqid_));
        getNotifications_args args = new getNotifications_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetNotificationsResponse recv_getNotifications()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNotifications_result result = new getNotifications_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNotifications failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="code"></param>
      public THPromoCode claimPromoCode(string sessionId, string code)
      {
        send_claimPromoCode(sessionId, code);
        return recv_claimPromoCode();

      }
      public void send_claimPromoCode(string sessionId, string code)
      {
        oprot_.WriteMessageBegin(new TMessage("claimPromoCode", TMessageType.Call, seqid_));
        claimPromoCode_args args = new claimPromoCode_args();
        args.SessionId = sessionId;
        args.Code = code;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THPromoCode recv_claimPromoCode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        claimPromoCode_result result = new claimPromoCode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "claimPromoCode failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="code"></param>
      public THPromoCode getPromoCode(string sessionId, string code)
      {
        send_getPromoCode(sessionId, code);
        return recv_getPromoCode();

      }
      public void send_getPromoCode(string sessionId, string code)
      {
        oprot_.WriteMessageBegin(new TMessage("getPromoCode", TMessageType.Call, seqid_));
        getPromoCode_args args = new getPromoCode_args();
        args.SessionId = sessionId;
        args.Code = code;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THPromoCode recv_getPromoCode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPromoCode_result result = new getPromoCode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPromoCode failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="code"></param>
      public THPromoCode setPromoCode(string sessionId, THPromoCode code)
      {
        send_setPromoCode(sessionId, code);
        return recv_setPromoCode();

      }
      public void send_setPromoCode(string sessionId, THPromoCode code)
      {
        oprot_.WriteMessageBegin(new TMessage("setPromoCode", TMessageType.Call, seqid_));
        setPromoCode_args args = new setPromoCode_args();
        args.SessionId = sessionId;
        args.Code = code;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THPromoCode recv_setPromoCode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setPromoCode_result result = new setPromoCode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setPromoCode failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public CreatePromoCodeResponse createPromoCode(CreatePromoCodeRequest request)
      {
        send_createPromoCode(request);
        return recv_createPromoCode();

      }
      public void send_createPromoCode(CreatePromoCodeRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("createPromoCode", TMessageType.Call, seqid_));
        createPromoCode_args args = new createPromoCode_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public CreatePromoCodeResponse recv_createPromoCode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createPromoCode_result result = new createPromoCode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createPromoCode failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public GetPromoCodeResponse getPromoCodeV2(GetPromoCodeRequest request)
      {
        send_getPromoCodeV2(request);
        return recv_getPromoCodeV2();

      }
      public void send_getPromoCodeV2(GetPromoCodeRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("getPromoCodeV2", TMessageType.Call, seqid_));
        getPromoCodeV2_args args = new getPromoCodeV2_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetPromoCodeResponse recv_getPromoCodeV2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPromoCodeV2_result result = new getPromoCodeV2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPromoCodeV2 failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public ClaimPromoCodeResponse claimPromoCodeV2(ClaimPromoCodeRequest request)
      {
        send_claimPromoCodeV2(request);
        return recv_claimPromoCodeV2();

      }
      public void send_claimPromoCodeV2(ClaimPromoCodeRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("claimPromoCodeV2", TMessageType.Call, seqid_));
        claimPromoCodeV2_args args = new claimPromoCodeV2_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ClaimPromoCodeResponse recv_claimPromoCodeV2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        claimPromoCodeV2_result result = new claimPromoCodeV2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "claimPromoCodeV2 failed: unknown result");
      }

      
      /// <summary>
      /// #ignored
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      public THInviteProviders getInviteProvidersByApp(string sessionId, string appId)
      {
        send_getInviteProvidersByApp(sessionId, appId);
        return recv_getInviteProvidersByApp();

      }
      public void send_getInviteProvidersByApp(string sessionId, string appId)
      {
        oprot_.WriteMessageBegin(new TMessage("getInviteProvidersByApp", TMessageType.Call, seqid_));
        getInviteProvidersByApp_args args = new getInviteProvidersByApp_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THInviteProviders recv_getInviteProvidersByApp()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getInviteProvidersByApp_result result = new getInviteProvidersByApp_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getInviteProvidersByApp failed: unknown result");
      }

      
      /// <summary>
      /// #ignored
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="token"></param>
      public THTokenInfo getTokenInfo(string sessionId, string token)
      {
        send_getTokenInfo(sessionId, token);
        return recv_getTokenInfo();

      }
      public void send_getTokenInfo(string sessionId, string token)
      {
        oprot_.WriteMessageBegin(new TMessage("getTokenInfo", TMessageType.Call, seqid_));
        getTokenInfo_args args = new getTokenInfo_args();
        args.SessionId = sessionId;
        args.Token = token;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THTokenInfo recv_getTokenInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTokenInfo_result result = new getTokenInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTokenInfo failed: unknown result");
      }

      
      /// <summary>
      /// #deprecated
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="event"></param>
      public bool trackAnalyticsEvent(string sessionId, THAnalyticsEvent @event)
      {
        send_trackAnalyticsEvent(sessionId, @event);
        return recv_trackAnalyticsEvent();

      }
      public void send_trackAnalyticsEvent(string sessionId, THAnalyticsEvent @event)
      {
        oprot_.WriteMessageBegin(new TMessage("trackAnalyticsEvent", TMessageType.Call, seqid_));
        trackAnalyticsEvent_args args = new trackAnalyticsEvent_args();
        args.SessionId = sessionId;
        args.Event = @event;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_trackAnalyticsEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        trackAnalyticsEvent_result result = new trackAnalyticsEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "trackAnalyticsEvent failed: unknown result");
      }

      
      /// <summary>
      /// #deprecated
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="fingerprint"></param>
      /// <param name="referrer"></param>
      public string trackInstall(string sessionId, THFingerprint fingerprint, string referrer)
      {
        send_trackInstall(sessionId, fingerprint, referrer);
        return recv_trackInstall();

      }
      public void send_trackInstall(string sessionId, THFingerprint fingerprint, string referrer)
      {
        oprot_.WriteMessageBegin(new TMessage("trackInstall", TMessageType.Call, seqid_));
        trackInstall_args args = new trackInstall_args();
        args.SessionId = sessionId;
        args.Fingerprint = fingerprint;
        args.Referrer = referrer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_trackInstall()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        trackInstall_result result = new trackInstall_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "trackInstall failed: unknown result");
      }

      
      /// <summary>
      /// #deprecated
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="uploadParams"></param>
      public string getUploadURL(string sessionId, THUploadParams uploadParams)
      {
        send_getUploadURL(sessionId, uploadParams);
        return recv_getUploadURL();

      }
      public void send_getUploadURL(string sessionId, THUploadParams uploadParams)
      {
        oprot_.WriteMessageBegin(new TMessage("getUploadURL", TMessageType.Call, seqid_));
        getUploadURL_args args = new getUploadURL_args();
        args.SessionId = sessionId;
        args.UploadParams = uploadParams;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_getUploadURL()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUploadURL_result result = new getUploadURL_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUploadURL failed: unknown result");
      }

      
      /// <summary>
      /// Login
      /// </summary>
      /// <param name="email"></param>
      /// <param name="password"></param>
      public THLoginResponse login(string email, string password)
      {
        send_login(email, password);
        return recv_login();

      }
      public void send_login(string email, string password)
      {
        oprot_.WriteMessageBegin(new TMessage("login", TMessageType.Call, seqid_));
        login_args args = new login_args();
        args.Email = email;
        args.Password = password;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THLoginResponse recv_login()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        login_result result = new login_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "login failed: unknown result");
      }

      
      public THLoginResponse loginWithSession(string sessionId)
      {
        send_loginWithSession(sessionId);
        return recv_loginWithSession();

      }
      public void send_loginWithSession(string sessionId)
      {
        oprot_.WriteMessageBegin(new TMessage("loginWithSession", TMessageType.Call, seqid_));
        loginWithSession_args args = new loginWithSession_args();
        args.SessionId = sessionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THLoginResponse recv_loginWithSession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        loginWithSession_result result = new loginWithSession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loginWithSession failed: unknown result");
      }

      
      public string getOAuthLoginURL(string provider)
      {
        send_getOAuthLoginURL(provider);
        return recv_getOAuthLoginURL();

      }
      public void send_getOAuthLoginURL(string provider)
      {
        oprot_.WriteMessageBegin(new TMessage("getOAuthLoginURL", TMessageType.Call, seqid_));
        getOAuthLoginURL_args args = new getOAuthLoginURL_args();
        args.Provider = provider;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_getOAuthLoginURL()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getOAuthLoginURL_result result = new getOAuthLoginURL_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getOAuthLoginURL failed: unknown result");
      }

      
      public THLoginOrRegisterResponse loginWithOAuthCode(string provider, string code, string referrer)
      {
        send_loginWithOAuthCode(provider, code, referrer);
        return recv_loginWithOAuthCode();

      }
      public void send_loginWithOAuthCode(string provider, string code, string referrer)
      {
        oprot_.WriteMessageBegin(new TMessage("loginWithOAuthCode", TMessageType.Call, seqid_));
        loginWithOAuthCode_args args = new loginWithOAuthCode_args();
        args.Provider = provider;
        args.Code = code;
        args.Referrer = referrer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THLoginOrRegisterResponse recv_loginWithOAuthCode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        loginWithOAuthCode_result result = new loginWithOAuthCode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loginWithOAuthCode failed: unknown result");
      }

      
      public string loginETLOnly(string appId, string token)
      {
        send_loginETLOnly(appId, token);
        return recv_loginETLOnly();

      }
      public void send_loginETLOnly(string appId, string token)
      {
        oprot_.WriteMessageBegin(new TMessage("loginETLOnly", TMessageType.Call, seqid_));
        loginETLOnly_args args = new loginETLOnly_args();
        args.AppId = appId;
        args.Token = token;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_loginETLOnly()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        loginETLOnly_result result = new loginETLOnly_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loginETLOnly failed: unknown result");
      }

      
      public void logout(string sessionId)
      {
        send_logout(sessionId);
        recv_logout();

      }
      public void send_logout(string sessionId)
      {
        oprot_.WriteMessageBegin(new TMessage("logout", TMessageType.Call, seqid_));
        logout_args args = new logout_args();
        args.SessionId = sessionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_logout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        logout_result result = new logout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.errors) {
          throw result.Errors;
        }
        return;
      }

      
      /// <summary>
      /// deprecated, use register instead
      /// </summary>
      /// <param name="email"></param>
      /// <param name="password"></param>
      /// <param name="companyName"></param>
      /// <param name="referrer"></param>
      public THRegistrationResponse registerAccount(string email, string password, string companyName, string referrer)
      {
        send_registerAccount(email, password, companyName, referrer);
        return recv_registerAccount();

      }
      public void send_registerAccount(string email, string password, string companyName, string referrer)
      {
        oprot_.WriteMessageBegin(new TMessage("registerAccount", TMessageType.Call, seqid_));
        registerAccount_args args = new registerAccount_args();
        args.Email = email;
        args.Password = password;
        args.CompanyName = companyName;
        args.Referrer = referrer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THRegistrationResponse recv_registerAccount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        registerAccount_result result = new registerAccount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerAccount failed: unknown result");
      }

      
      public THRegistrationResponse registerUser(string email, string password, string referrer)
      {
        send_registerUser(email, password, referrer);
        return recv_registerUser();

      }
      public void send_registerUser(string email, string password, string referrer)
      {
        oprot_.WriteMessageBegin(new TMessage("registerUser", TMessageType.Call, seqid_));
        registerUser_args args = new registerUser_args();
        args.Email = email;
        args.Password = password;
        args.Referrer = referrer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THRegistrationResponse recv_registerUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        registerUser_result result = new registerUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerUser failed: unknown result");
      }

      
      /// <summary>
      /// General
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="companyId"></param>
      /// <param name="name"></param>
      public THApplication createApplication(string sessionId, string companyId, string name)
      {
        send_createApplication(sessionId, companyId, name);
        return recv_createApplication();

      }
      public void send_createApplication(string sessionId, string companyId, string name)
      {
        oprot_.WriteMessageBegin(new TMessage("createApplication", TMessageType.Call, seqid_));
        createApplication_args args = new createApplication_args();
        args.SessionId = sessionId;
        args.CompanyId = companyId;
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THApplication recv_createApplication()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createApplication_result result = new createApplication_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createApplication failed: unknown result");
      }

      
      public THApplication updateApplication(string sessionId, THApplication app)
      {
        send_updateApplication(sessionId, app);
        return recv_updateApplication();

      }
      public void send_updateApplication(string sessionId, THApplication app)
      {
        oprot_.WriteMessageBegin(new TMessage("updateApplication", TMessageType.Call, seqid_));
        updateApplication_args args = new updateApplication_args();
        args.SessionId = sessionId;
        args.App = app;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THApplication recv_updateApplication()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateApplication_result result = new updateApplication_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateApplication failed: unknown result");
      }

      
      public bool deleteApplication(string sessionId, string appId)
      {
        send_deleteApplication(sessionId, appId);
        return recv_deleteApplication();

      }
      public void send_deleteApplication(string sessionId, string appId)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteApplication", TMessageType.Call, seqid_));
        deleteApplication_args args = new deleteApplication_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_deleteApplication()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteApplication_result result = new deleteApplication_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteApplication failed: unknown result");
      }

      
      public THAppPlatform addAppPlatform(string sessionId, string appId, THAppPlatform platform)
      {
        send_addAppPlatform(sessionId, appId, platform);
        return recv_addAppPlatform();

      }
      public void send_addAppPlatform(string sessionId, string appId, THAppPlatform platform)
      {
        oprot_.WriteMessageBegin(new TMessage("addAppPlatform", TMessageType.Call, seqid_));
        addAppPlatform_args args = new addAppPlatform_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Platform = platform;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THAppPlatform recv_addAppPlatform()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addAppPlatform_result result = new addAppPlatform_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addAppPlatform failed: unknown result");
      }

      
      public List<THAppPlatform> getAppPlatforms(string sessionId, string appId)
      {
        send_getAppPlatforms(sessionId, appId);
        return recv_getAppPlatforms();

      }
      public void send_getAppPlatforms(string sessionId, string appId)
      {
        oprot_.WriteMessageBegin(new TMessage("getAppPlatforms", TMessageType.Call, seqid_));
        getAppPlatforms_args args = new getAppPlatforms_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THAppPlatform> recv_getAppPlatforms()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAppPlatforms_result result = new getAppPlatforms_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAppPlatforms failed: unknown result");
      }

      
      public THAppPlatform updateAppPlatform(string sessionId, string appId, THAppPlatform platform)
      {
        send_updateAppPlatform(sessionId, appId, platform);
        return recv_updateAppPlatform();

      }
      public void send_updateAppPlatform(string sessionId, string appId, THAppPlatform platform)
      {
        oprot_.WriteMessageBegin(new TMessage("updateAppPlatform", TMessageType.Call, seqid_));
        updateAppPlatform_args args = new updateAppPlatform_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Platform = platform;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THAppPlatform recv_updateAppPlatform()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateAppPlatform_result result = new updateAppPlatform_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateAppPlatform failed: unknown result");
      }

      
      public bool deleteAppPlatform(string sessionId, string appId, string platformId)
      {
        send_deleteAppPlatform(sessionId, appId, platformId);
        return recv_deleteAppPlatform();

      }
      public void send_deleteAppPlatform(string sessionId, string appId, string platformId)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteAppPlatform", TMessageType.Call, seqid_));
        deleteAppPlatform_args args = new deleteAppPlatform_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.PlatformId = platformId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_deleteAppPlatform()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteAppPlatform_result result = new deleteAppPlatform_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteAppPlatform failed: unknown result");
      }

      
      public THAppAndPlatformsResponse getAppAndPlatforms(string sessionId, string appId)
      {
        send_getAppAndPlatforms(sessionId, appId);
        return recv_getAppAndPlatforms();

      }
      public void send_getAppAndPlatforms(string sessionId, string appId)
      {
        oprot_.WriteMessageBegin(new TMessage("getAppAndPlatforms", TMessageType.Call, seqid_));
        getAppAndPlatforms_args args = new getAppAndPlatforms_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THAppAndPlatformsResponse recv_getAppAndPlatforms()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAppAndPlatforms_result result = new getAppAndPlatforms_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAppAndPlatforms failed: unknown result");
      }

      
      public THCompanyTeamMember createTeamMember(string sessionId, THCompanyTeamMember member)
      {
        send_createTeamMember(sessionId, member);
        return recv_createTeamMember();

      }
      public void send_createTeamMember(string sessionId, THCompanyTeamMember member)
      {
        oprot_.WriteMessageBegin(new TMessage("createTeamMember", TMessageType.Call, seqid_));
        createTeamMember_args args = new createTeamMember_args();
        args.SessionId = sessionId;
        args.Member = member;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THCompanyTeamMember recv_createTeamMember()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createTeamMember_result result = new createTeamMember_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createTeamMember failed: unknown result");
      }

      
      public List<THCompanyTeamMember> getAllTeamMembers(string sessionId, string companyId)
      {
        send_getAllTeamMembers(sessionId, companyId);
        return recv_getAllTeamMembers();

      }
      public void send_getAllTeamMembers(string sessionId, string companyId)
      {
        oprot_.WriteMessageBegin(new TMessage("getAllTeamMembers", TMessageType.Call, seqid_));
        getAllTeamMembers_args args = new getAllTeamMembers_args();
        args.SessionId = sessionId;
        args.CompanyId = companyId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THCompanyTeamMember> recv_getAllTeamMembers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAllTeamMembers_result result = new getAllTeamMembers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllTeamMembers failed: unknown result");
      }

      
      public THCompanyTeamMember updateTeamMember(string sessionId, THCompanyTeamMember member)
      {
        send_updateTeamMember(sessionId, member);
        return recv_updateTeamMember();

      }
      public void send_updateTeamMember(string sessionId, THCompanyTeamMember member)
      {
        oprot_.WriteMessageBegin(new TMessage("updateTeamMember", TMessageType.Call, seqid_));
        updateTeamMember_args args = new updateTeamMember_args();
        args.SessionId = sessionId;
        args.Member = member;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THCompanyTeamMember recv_updateTeamMember()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateTeamMember_result result = new updateTeamMember_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateTeamMember failed: unknown result");
      }

      
      public bool deleteTeamMember(string sessionId, string memberId)
      {
        send_deleteTeamMember(sessionId, memberId);
        return recv_deleteTeamMember();

      }
      public void send_deleteTeamMember(string sessionId, string memberId)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteTeamMember", TMessageType.Call, seqid_));
        deleteTeamMember_args args = new deleteTeamMember_args();
        args.SessionId = sessionId;
        args.MemberId = memberId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_deleteTeamMember()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteTeamMember_result result = new deleteTeamMember_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteTeamMember failed: unknown result");
      }

      
      public THCompany getCompany(string sessionId, string companyId)
      {
        send_getCompany(sessionId, companyId);
        return recv_getCompany();

      }
      public void send_getCompany(string sessionId, string companyId)
      {
        oprot_.WriteMessageBegin(new TMessage("getCompany", TMessageType.Call, seqid_));
        getCompany_args args = new getCompany_args();
        args.SessionId = sessionId;
        args.CompanyId = companyId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THCompany recv_getCompany()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCompany_result result = new getCompany_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCompany failed: unknown result");
      }

      
      public THCompany updateCompany(string sessionId, THCompany company)
      {
        send_updateCompany(sessionId, company);
        return recv_updateCompany();

      }
      public void send_updateCompany(string sessionId, THCompany company)
      {
        oprot_.WriteMessageBegin(new TMessage("updateCompany", TMessageType.Call, seqid_));
        updateCompany_args args = new updateCompany_args();
        args.SessionId = sessionId;
        args.Company = company;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THCompany recv_updateCompany()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateCompany_result result = new updateCompany_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateCompany failed: unknown result");
      }

      
      public bool sendPasswordResetEmail(string email)
      {
        send_sendPasswordResetEmail(email);
        return recv_sendPasswordResetEmail();

      }
      public void send_sendPasswordResetEmail(string email)
      {
        oprot_.WriteMessageBegin(new TMessage("sendPasswordResetEmail", TMessageType.Call, seqid_));
        sendPasswordResetEmail_args args = new sendPasswordResetEmail_args();
        args.Email = email;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_sendPasswordResetEmail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendPasswordResetEmail_result result = new sendPasswordResetEmail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendPasswordResetEmail failed: unknown result");
      }

      
      public bool resetPassword(string token, string email, string password, string passwordRepeat)
      {
        send_resetPassword(token, email, password, passwordRepeat);
        return recv_resetPassword();

      }
      public void send_resetPassword(string token, string email, string password, string passwordRepeat)
      {
        oprot_.WriteMessageBegin(new TMessage("resetPassword", TMessageType.Call, seqid_));
        resetPassword_args args = new resetPassword_args();
        args.Token = token;
        args.Email = email;
        args.Password = password;
        args.PasswordRepeat = passwordRepeat;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_resetPassword()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        resetPassword_result result = new resetPassword_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "resetPassword failed: unknown result");
      }

      
      public THLoginResponse createPassword(string token, string email, string password, string passwordRepeat)
      {
        send_createPassword(token, email, password, passwordRepeat);
        return recv_createPassword();

      }
      public void send_createPassword(string token, string email, string password, string passwordRepeat)
      {
        oprot_.WriteMessageBegin(new TMessage("createPassword", TMessageType.Call, seqid_));
        createPassword_args args = new createPassword_args();
        args.Token = token;
        args.Email = email;
        args.Password = password;
        args.PasswordRepeat = passwordRepeat;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THLoginResponse recv_createPassword()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createPassword_result result = new createPassword_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createPassword failed: unknown result");
      }

      
      public bool extendSession(string sessionId)
      {
        send_extendSession(sessionId);
        return recv_extendSession();

      }
      public void send_extendSession(string sessionId)
      {
        oprot_.WriteMessageBegin(new TMessage("extendSession", TMessageType.Call, seqid_));
        extendSession_args args = new extendSession_args();
        args.SessionId = sessionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_extendSession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        extendSession_result result = new extendSession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "extendSession failed: unknown result");
      }

      
      public long getRemainingSessionTime(string sessionId)
      {
        send_getRemainingSessionTime(sessionId);
        return recv_getRemainingSessionTime();

      }
      public void send_getRemainingSessionTime(string sessionId)
      {
        oprot_.WriteMessageBegin(new TMessage("getRemainingSessionTime", TMessageType.Call, seqid_));
        getRemainingSessionTime_args args = new getRemainingSessionTime_args();
        args.SessionId = sessionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_getRemainingSessionTime()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRemainingSessionTime_result result = new getRemainingSessionTime_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRemainingSessionTime failed: unknown result");
      }

      
      public bool validatePasswordLink(string email, string hash)
      {
        send_validatePasswordLink(email, hash);
        return recv_validatePasswordLink();

      }
      public void send_validatePasswordLink(string email, string hash)
      {
        oprot_.WriteMessageBegin(new TMessage("validatePasswordLink", TMessageType.Call, seqid_));
        validatePasswordLink_args args = new validatePasswordLink_args();
        args.Email = email;
        args.Hash = hash;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_validatePasswordLink()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        validatePasswordLink_result result = new validatePasswordLink_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "validatePasswordLink failed: unknown result");
      }

      
      public List<THPublicUser> getPublicUsers(string sessionId, List<string> ids)
      {
        send_getPublicUsers(sessionId, ids);
        return recv_getPublicUsers();

      }
      public void send_getPublicUsers(string sessionId, List<string> ids)
      {
        oprot_.WriteMessageBegin(new TMessage("getPublicUsers", TMessageType.Call, seqid_));
        getPublicUsers_args args = new getPublicUsers_args();
        args.SessionId = sessionId;
        args.Ids = ids;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THPublicUser> recv_getPublicUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPublicUsers_result result = new getPublicUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPublicUsers failed: unknown result");
      }

      
      public List<THUserReference> findAppUsers(string sessionId, string appId, THUsersQuery query)
      {
        send_findAppUsers(sessionId, appId, query);
        return recv_findAppUsers();

      }
      public void send_findAppUsers(string sessionId, string appId, THUsersQuery query)
      {
        oprot_.WriteMessageBegin(new TMessage("findAppUsers", TMessageType.Call, seqid_));
        findAppUsers_args args = new findAppUsers_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THUserReference> recv_findAppUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findAppUsers_result result = new findAppUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findAppUsers failed: unknown result");
      }

      
      public THPrivateUser updateAppUser(string sessionId, string userId, THPrivateUser request)
      {
        send_updateAppUser(sessionId, userId, request);
        return recv_updateAppUser();

      }
      public void send_updateAppUser(string sessionId, string userId, THPrivateUser request)
      {
        oprot_.WriteMessageBegin(new TMessage("updateAppUser", TMessageType.Call, seqid_));
        updateAppUser_args args = new updateAppUser_args();
        args.SessionId = sessionId;
        args.UserId = userId;
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THPrivateUser recv_updateAppUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateAppUser_result result = new updateAppUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateAppUser failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="userId"></param>
      public THPrivateUser getPrivateUser(string sessionId, string userId)
      {
        send_getPrivateUser(sessionId, userId);
        return recv_getPrivateUser();

      }
      public void send_getPrivateUser(string sessionId, string userId)
      {
        oprot_.WriteMessageBegin(new TMessage("getPrivateUser", TMessageType.Call, seqid_));
        getPrivateUser_args args = new getPrivateUser_args();
        args.SessionId = sessionId;
        args.UserId = userId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THPrivateUser recv_getPrivateUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPrivateUser_result result = new getPrivateUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPrivateUser failed: unknown result");
      }

      
      /// <summary>
      /// Smart Invites
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="prefix"></param>
      /// <param name="inviteDomain"></param>
      public bool updateAppleAppSiteAssociation(string sessionId, string prefix, string inviteDomain)
      {
        send_updateAppleAppSiteAssociation(sessionId, prefix, inviteDomain);
        return recv_updateAppleAppSiteAssociation();

      }
      public void send_updateAppleAppSiteAssociation(string sessionId, string prefix, string inviteDomain)
      {
        oprot_.WriteMessageBegin(new TMessage("updateAppleAppSiteAssociation", TMessageType.Call, seqid_));
        updateAppleAppSiteAssociation_args args = new updateAppleAppSiteAssociation_args();
        args.SessionId = sessionId;
        args.Prefix = prefix;
        args.InviteDomain = inviteDomain;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_updateAppleAppSiteAssociation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateAppleAppSiteAssociation_result result = new updateAppleAppSiteAssociation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateAppleAppSiteAssociation failed: unknown result");
      }

      
      public bool updateAndroidAppLinks(string sessionId, string prefix, string inviteDomain)
      {
        send_updateAndroidAppLinks(sessionId, prefix, inviteDomain);
        return recv_updateAndroidAppLinks();

      }
      public void send_updateAndroidAppLinks(string sessionId, string prefix, string inviteDomain)
      {
        oprot_.WriteMessageBegin(new TMessage("updateAndroidAppLinks", TMessageType.Call, seqid_));
        updateAndroidAppLinks_args args = new updateAndroidAppLinks_args();
        args.SessionId = sessionId;
        args.Prefix = prefix;
        args.InviteDomain = inviteDomain;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_updateAndroidAppLinks()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateAndroidAppLinks_result result = new updateAndroidAppLinks_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateAndroidAppLinks failed: unknown result");
      }

      
      public bool processCustomDomain(string sessionId, string appId, string domain)
      {
        send_processCustomDomain(sessionId, appId, domain);
        return recv_processCustomDomain();

      }
      public void send_processCustomDomain(string sessionId, string appId, string domain)
      {
        oprot_.WriteMessageBegin(new TMessage("processCustomDomain", TMessageType.Call, seqid_));
        processCustomDomain_args args = new processCustomDomain_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Domain = domain;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_processCustomDomain()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        processCustomDomain_result result = new processCustomDomain_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "processCustomDomain failed: unknown result");
      }

      
      public bool removeCustomDomain(string sessionId, string appId)
      {
        send_removeCustomDomain(sessionId, appId);
        return recv_removeCustomDomain();

      }
      public void send_removeCustomDomain(string sessionId, string appId)
      {
        oprot_.WriteMessageBegin(new TMessage("removeCustomDomain", TMessageType.Call, seqid_));
        removeCustomDomain_args args = new removeCustomDomain_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_removeCustomDomain()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeCustomDomain_result result = new removeCustomDomain_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeCustomDomain failed: unknown result");
      }

      
      public ValidateDomainResponse validateDomain(string sessionId, string appId, string domain)
      {
        send_validateDomain(sessionId, appId, domain);
        return recv_validateDomain();

      }
      public void send_validateDomain(string sessionId, string appId, string domain)
      {
        oprot_.WriteMessageBegin(new TMessage("validateDomain", TMessageType.Call, seqid_));
        validateDomain_args args = new validateDomain_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Domain = domain;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ValidateDomainResponse recv_validateDomain()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        validateDomain_result result = new validateDomain_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "validateDomain failed: unknown result");
      }

      
      public List<string> getDomainNameServers(string sessionId, string appId, string domain)
      {
        send_getDomainNameServers(sessionId, appId, domain);
        return recv_getDomainNameServers();

      }
      public void send_getDomainNameServers(string sessionId, string appId, string domain)
      {
        oprot_.WriteMessageBegin(new TMessage("getDomainNameServers", TMessageType.Call, seqid_));
        getDomainNameServers_args args = new getDomainNameServers_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Domain = domain;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<string> recv_getDomainNameServers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getDomainNameServers_result result = new getDomainNameServers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDomainNameServers failed: unknown result");
      }

      
      /// <summary>
      /// Name, public and private properties cannot be updated with this RPC and are ignored by Hades.
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      /// <param name="providers"></param>
      public List<THInviteProvider> updateInviteProviders(string sessionId, string appId, List<THInviteProvider> providers)
      {
        send_updateInviteProviders(sessionId, appId, providers);
        return recv_updateInviteProviders();

      }
      public void send_updateInviteProviders(string sessionId, string appId, List<THInviteProvider> providers)
      {
        oprot_.WriteMessageBegin(new TMessage("updateInviteProviders", TMessageType.Call, seqid_));
        updateInviteProviders_args args = new updateInviteProviders_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Providers = providers;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THInviteProvider> recv_updateInviteProviders()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateInviteProviders_result result = new updateInviteProviders_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateInviteProviders failed: unknown result");
      }

      
      public THLinkDetails inspectLink(string sessionId, string linkUrl)
      {
        send_inspectLink(sessionId, linkUrl);
        return recv_inspectLink();

      }
      public void send_inspectLink(string sessionId, string linkUrl)
      {
        oprot_.WriteMessageBegin(new TMessage("inspectLink", TMessageType.Call, seqid_));
        inspectLink_args args = new inspectLink_args();
        args.SessionId = sessionId;
        args.LinkUrl = linkUrl;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THLinkDetails recv_inspectLink()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        inspectLink_result result = new inspectLink_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inspectLink failed: unknown result");
      }

      
      /// <summary>
      /// Push Notifications
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="request"></param>
      public THAppPlatform setPushCertificate(string sessionId, THSetPushCertificateRequest request)
      {
        send_setPushCertificate(sessionId, request);
        return recv_setPushCertificate();

      }
      public void send_setPushCertificate(string sessionId, THSetPushCertificateRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("setPushCertificate", TMessageType.Call, seqid_));
        setPushCertificate_args args = new setPushCertificate_args();
        args.SessionId = sessionId;
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THAppPlatform recv_setPushCertificate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setPushCertificate_result result = new setPushCertificate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setPushCertificate failed: unknown result");
      }

      
      public bool sendDeviceNotifications(string sessionId, string appId, THCustomNotification data, List<string> deviceIds)
      {
        send_sendDeviceNotifications(sessionId, appId, data, deviceIds);
        return recv_sendDeviceNotifications();

      }
      public void send_sendDeviceNotifications(string sessionId, string appId, THCustomNotification data, List<string> deviceIds)
      {
        oprot_.WriteMessageBegin(new TMessage("sendDeviceNotifications", TMessageType.Call, seqid_));
        sendDeviceNotifications_args args = new sendDeviceNotifications_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Data = data;
        args.DeviceIds = deviceIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_sendDeviceNotifications()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendDeviceNotifications_result result = new sendDeviceNotifications_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendDeviceNotifications failed: unknown result");
      }

      
      public List<THDeviceNotificationsInfo> getDeviceNotificationsInfo(string sessionId, string appId, List<string> deviceIds)
      {
        send_getDeviceNotificationsInfo(sessionId, appId, deviceIds);
        return recv_getDeviceNotificationsInfo();

      }
      public void send_getDeviceNotificationsInfo(string sessionId, string appId, List<string> deviceIds)
      {
        oprot_.WriteMessageBegin(new TMessage("getDeviceNotificationsInfo", TMessageType.Call, seqid_));
        getDeviceNotificationsInfo_args args = new getDeviceNotificationsInfo_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.DeviceIds = deviceIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THDeviceNotificationsInfo> recv_getDeviceNotificationsInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getDeviceNotificationsInfo_result result = new getDeviceNotificationsInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDeviceNotificationsInfo failed: unknown result");
      }

      
      /// <summary>
      /// Activity Feed
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      /// <param name="feed"></param>
      /// <param name="query"></param>
      public List<THActivityPost> getAppActivities(string sessionId, string appId, string feed, THActivitiesQuery query)
      {
        send_getAppActivities(sessionId, appId, feed, query);
        return recv_getAppActivities();

      }
      public void send_getAppActivities(string sessionId, string appId, string feed, THActivitiesQuery query)
      {
        oprot_.WriteMessageBegin(new TMessage("getAppActivities", TMessageType.Call, seqid_));
        getAppActivities_args args = new getAppActivities_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Feed = feed;
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THActivityPost> recv_getAppActivities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAppActivities_result result = new getAppActivities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAppActivities failed: unknown result");
      }

      
      public List<THActivityPost> getAppComments(string sessionId, string appId, string activityId, THActivitiesQuery query)
      {
        send_getAppComments(sessionId, appId, activityId, query);
        return recv_getAppComments();

      }
      public void send_getAppComments(string sessionId, string appId, string activityId, THActivitiesQuery query)
      {
        oprot_.WriteMessageBegin(new TMessage("getAppComments", TMessageType.Call, seqid_));
        getAppComments_args args = new getAppComments_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.ActivityId = activityId;
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THActivityPost> recv_getAppComments()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAppComments_result result = new getAppComments_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAppComments failed: unknown result");
      }

      
      public THActivityPost getAppActivity(string sessionId, string appId, string activityId)
      {
        send_getAppActivity(sessionId, appId, activityId);
        return recv_getAppActivity();

      }
      public void send_getAppActivity(string sessionId, string appId, string activityId)
      {
        oprot_.WriteMessageBegin(new TMessage("getAppActivity", TMessageType.Call, seqid_));
        getAppActivity_args args = new getAppActivity_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.ActivityId = activityId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THActivityPost recv_getAppActivity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAppActivity_result result = new getAppActivity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAppActivity failed: unknown result");
      }

      
      public THActivityPost postAppActivity(string sessionId, string appId, string feed, THActivityPostContent activityPostContent)
      {
        send_postAppActivity(sessionId, appId, feed, activityPostContent);
        return recv_postAppActivity();

      }
      public void send_postAppActivity(string sessionId, string appId, string feed, THActivityPostContent activityPostContent)
      {
        oprot_.WriteMessageBegin(new TMessage("postAppActivity", TMessageType.Call, seqid_));
        postAppActivity_args args = new postAppActivity_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Feed = feed;
        args.ActivityPostContent = activityPostContent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THActivityPost recv_postAppActivity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        postAppActivity_result result = new postAppActivity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "postAppActivity failed: unknown result");
      }

      
      public THActivityPost updateAppActivity(string sessionId, string appId, string activityId, THActivityPostContent activityPostContent)
      {
        send_updateAppActivity(sessionId, appId, activityId, activityPostContent);
        return recv_updateAppActivity();

      }
      public void send_updateAppActivity(string sessionId, string appId, string activityId, THActivityPostContent activityPostContent)
      {
        oprot_.WriteMessageBegin(new TMessage("updateAppActivity", TMessageType.Call, seqid_));
        updateAppActivity_args args = new updateAppActivity_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.ActivityId = activityId;
        args.ActivityPostContent = activityPostContent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THActivityPost recv_updateAppActivity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateAppActivity_result result = new updateAppActivity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateAppActivity failed: unknown result");
      }

      
      public List<string> findAppTags(string sessionId, string appId, THTagsQuery query)
      {
        send_findAppTags(sessionId, appId, query);
        return recv_findAppTags();

      }
      public void send_findAppTags(string sessionId, string appId, THTagsQuery query)
      {
        oprot_.WriteMessageBegin(new TMessage("findAppTags", TMessageType.Call, seqid_));
        findAppTags_args args = new findAppTags_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<string> recv_findAppTags()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findAppTags_result result = new findAppTags_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findAppTags failed: unknown result");
      }

      
      /// <summary>
      /// feed-level sticky activities
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      /// <param name="feed"></param>
      public List<THActivityPost> getAppFeedStickyActivities(string sessionId, string appId, string feed)
      {
        send_getAppFeedStickyActivities(sessionId, appId, feed);
        return recv_getAppFeedStickyActivities();

      }
      public void send_getAppFeedStickyActivities(string sessionId, string appId, string feed)
      {
        oprot_.WriteMessageBegin(new TMessage("getAppFeedStickyActivities", TMessageType.Call, seqid_));
        getAppFeedStickyActivities_args args = new getAppFeedStickyActivities_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Feed = feed;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THActivityPost> recv_getAppFeedStickyActivities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAppFeedStickyActivities_result result = new getAppFeedStickyActivities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAppFeedStickyActivities failed: unknown result");
      }

      
      public THActivityPost postAppFeedStickyActivity(string sessionId, string appId, string feed, THActivityPostContent activityPostContent, int stickyStart, int stickyEnd)
      {
        send_postAppFeedStickyActivity(sessionId, appId, feed, activityPostContent, stickyStart, stickyEnd);
        return recv_postAppFeedStickyActivity();

      }
      public void send_postAppFeedStickyActivity(string sessionId, string appId, string feed, THActivityPostContent activityPostContent, int stickyStart, int stickyEnd)
      {
        oprot_.WriteMessageBegin(new TMessage("postAppFeedStickyActivity", TMessageType.Call, seqid_));
        postAppFeedStickyActivity_args args = new postAppFeedStickyActivity_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Feed = feed;
        args.ActivityPostContent = activityPostContent;
        args.StickyStart = stickyStart;
        args.StickyEnd = stickyEnd;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THActivityPost recv_postAppFeedStickyActivity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        postAppFeedStickyActivity_result result = new postAppFeedStickyActivity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "postAppFeedStickyActivity failed: unknown result");
      }

      
      public THActivityPost updateAppFeedStickyActivity(string sessionId, string appId, string activityId, THActivityPostContent activityPostContent, int stickyStart, int stickyEnd)
      {
        send_updateAppFeedStickyActivity(sessionId, appId, activityId, activityPostContent, stickyStart, stickyEnd);
        return recv_updateAppFeedStickyActivity();

      }
      public void send_updateAppFeedStickyActivity(string sessionId, string appId, string activityId, THActivityPostContent activityPostContent, int stickyStart, int stickyEnd)
      {
        oprot_.WriteMessageBegin(new TMessage("updateAppFeedStickyActivity", TMessageType.Call, seqid_));
        updateAppFeedStickyActivity_args args = new updateAppFeedStickyActivity_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.ActivityId = activityId;
        args.ActivityPostContent = activityPostContent;
        args.StickyStart = stickyStart;
        args.StickyEnd = stickyEnd;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THActivityPost recv_updateAppFeedStickyActivity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateAppFeedStickyActivity_result result = new updateAppFeedStickyActivity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateAppFeedStickyActivity failed: unknown result");
      }

      
      public THActivityPost postAppComment(string sessionId, string appId, string activityId, THActivityPostContent activityPostContent)
      {
        send_postAppComment(sessionId, appId, activityId, activityPostContent);
        return recv_postAppComment();

      }
      public void send_postAppComment(string sessionId, string appId, string activityId, THActivityPostContent activityPostContent)
      {
        oprot_.WriteMessageBegin(new TMessage("postAppComment", TMessageType.Call, seqid_));
        postAppComment_args args = new postAppComment_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.ActivityId = activityId;
        args.ActivityPostContent = activityPostContent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THActivityPost recv_postAppComment()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        postAppComment_result result = new postAppComment_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "postAppComment failed: unknown result");
      }

      
      public THActivityPost likeAppActivity(string sessionId, string appId, string activityId, bool isLiked)
      {
        send_likeAppActivity(sessionId, appId, activityId, isLiked);
        return recv_likeAppActivity();

      }
      public void send_likeAppActivity(string sessionId, string appId, string activityId, bool isLiked)
      {
        oprot_.WriteMessageBegin(new TMessage("likeAppActivity", TMessageType.Call, seqid_));
        likeAppActivity_args args = new likeAppActivity_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.ActivityId = activityId;
        args.IsLiked = isLiked;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THActivityPost recv_likeAppActivity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        likeAppActivity_result result = new likeAppActivity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "likeAppActivity failed: unknown result");
      }

      
      public bool deleteAppActivities(string sessionId, string appId, List<string> activityIds)
      {
        send_deleteAppActivities(sessionId, appId, activityIds);
        return recv_deleteAppActivities();

      }
      public void send_deleteAppActivities(string sessionId, string appId, List<string> activityIds)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteAppActivities", TMessageType.Call, seqid_));
        deleteAppActivities_args args = new deleteAppActivities_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.ActivityIds = activityIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_deleteAppActivities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteAppActivities_result result = new deleteAppActivities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteAppActivities failed: unknown result");
      }

      
      public List<string> getAppActivityFeedList(string sessionId, string appId)
      {
        send_getAppActivityFeedList(sessionId, appId);
        return recv_getAppActivityFeedList();

      }
      public void send_getAppActivityFeedList(string sessionId, string appId)
      {
        oprot_.WriteMessageBegin(new TMessage("getAppActivityFeedList", TMessageType.Call, seqid_));
        getAppActivityFeedList_args args = new getAppActivityFeedList_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<string> recv_getAppActivityFeedList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAppActivityFeedList_result result = new getAppActivityFeedList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAppActivityFeedList failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public GetActivitiesV2Response getActivitiesV2(GetActivitiesV2Request request)
      {
        send_getActivitiesV2(request);
        return recv_getActivitiesV2();

      }
      public void send_getActivitiesV2(GetActivitiesV2Request request)
      {
        oprot_.WriteMessageBegin(new TMessage("getActivitiesV2", TMessageType.Call, seqid_));
        getActivitiesV2_args args = new getActivitiesV2_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetActivitiesV2Response recv_getActivitiesV2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getActivitiesV2_result result = new getActivitiesV2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getActivitiesV2 failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public GetActivityByIDResponse getActivityByID(GetActivityByIDRequest request)
      {
        send_getActivityByID(request);
        return recv_getActivityByID();

      }
      public void send_getActivityByID(GetActivityByIDRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("getActivityByID", TMessageType.Call, seqid_));
        getActivityByID_args args = new getActivityByID_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetActivityByIDResponse recv_getActivityByID()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getActivityByID_result result = new getActivityByID_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getActivityByID failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public GetAnnouncementsResponse getAnnouncements(GetAnnouncementsRequest request)
      {
        send_getAnnouncements(request);
        return recv_getAnnouncements();

      }
      public void send_getAnnouncements(GetAnnouncementsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("getAnnouncements", TMessageType.Call, seqid_));
        getAnnouncements_args args = new getAnnouncements_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetAnnouncementsResponse recv_getAnnouncements()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAnnouncements_result result = new getAnnouncements_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAnnouncements failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public CreateActivityResponse createActivity(CreateActivityRequest request)
      {
        send_createActivity(request);
        return recv_createActivity();

      }
      public void send_createActivity(CreateActivityRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("createActivity", TMessageType.Call, seqid_));
        createActivity_args args = new createActivity_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public CreateActivityResponse recv_createActivity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createActivity_result result = new createActivity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createActivity failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public UpdateActivityResponse updateActivity(UpdateActivityRequest request)
      {
        send_updateActivity(request);
        return recv_updateActivity();

      }
      public void send_updateActivity(UpdateActivityRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("updateActivity", TMessageType.Call, seqid_));
        updateActivity_args args = new updateActivity_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public UpdateActivityResponse recv_updateActivity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateActivity_result result = new updateActivity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateActivity failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public DeleteActivitiesResponse deleteActivities(DeleteActivitiesRequest request)
      {
        send_deleteActivities(request);
        return recv_deleteActivities();

      }
      public void send_deleteActivities(DeleteActivitiesRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteActivities", TMessageType.Call, seqid_));
        deleteActivities_args args = new deleteActivities_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DeleteActivitiesResponse recv_deleteActivities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteActivities_result result = new deleteActivities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteActivities failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public CreateAnnouncementResponse createAnnouncement(CreateAnnouncementRequest request)
      {
        send_createAnnouncement(request);
        return recv_createAnnouncement();

      }
      public void send_createAnnouncement(CreateAnnouncementRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("createAnnouncement", TMessageType.Call, seqid_));
        createAnnouncement_args args = new createAnnouncement_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public CreateAnnouncementResponse recv_createAnnouncement()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createAnnouncement_result result = new createAnnouncement_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createAnnouncement failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public UpdateAnnouncementResponse updateAnnouncement(UpdateAnnouncementRequest request)
      {
        send_updateAnnouncement(request);
        return recv_updateAnnouncement();

      }
      public void send_updateAnnouncement(UpdateAnnouncementRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("updateAnnouncement", TMessageType.Call, seqid_));
        updateAnnouncement_args args = new updateAnnouncement_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public UpdateAnnouncementResponse recv_updateAnnouncement()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateAnnouncement_result result = new updateAnnouncement_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateAnnouncement failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public GetReactionsResponse getReactions(GetReactionsRequest request)
      {
        send_getReactions(request);
        return recv_getReactions();

      }
      public void send_getReactions(GetReactionsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("getReactions", TMessageType.Call, seqid_));
        getReactions_args args = new getReactions_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetReactionsResponse recv_getReactions()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getReactions_result result = new getReactions_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getReactions failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7 - works as set, existing reaction is replaced
      /// </summary>
      /// <param name="request"></param>
      public CreateReactionResponse createReaction(CreateReactionRequest request)
      {
        send_createReaction(request);
        return recv_createReaction();

      }
      public void send_createReaction(CreateReactionRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("createReaction", TMessageType.Call, seqid_));
        createReaction_args args = new createReaction_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public CreateReactionResponse recv_createReaction()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createReaction_result result = new createReaction_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createReaction failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public DeleteReactionResponse deleteReaction(DeleteReactionRequest request)
      {
        send_deleteReaction(request);
        return recv_deleteReaction();

      }
      public void send_deleteReaction(DeleteReactionRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteReaction", TMessageType.Call, seqid_));
        deleteReaction_args args = new deleteReaction_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DeleteReactionResponse recv_deleteReaction()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteReaction_result result = new deleteReaction_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteReaction failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public ReportEntityV2Response reportEntityV2(ReportEntityV2Request request)
      {
        send_reportEntityV2(request);
        return recv_reportEntityV2();

      }
      public void send_reportEntityV2(ReportEntityV2Request request)
      {
        oprot_.WriteMessageBegin(new TMessage("reportEntityV2", TMessageType.Call, seqid_));
        reportEntityV2_args args = new reportEntityV2_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ReportEntityV2Response recv_reportEntityV2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reportEntityV2_result result = new reportEntityV2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reportEntityV2 failed: unknown result");
      }

      
      /// <summary>
      /// #sdk7
      /// </summary>
      /// <param name="request"></param>
      public ActivityTrackViewResponse activityTrackView(ActivityTrackViewRequest request)
      {
        send_activityTrackView(request);
        return recv_activityTrackView();

      }
      public void send_activityTrackView(ActivityTrackViewRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("activityTrackView", TMessageType.Call, seqid_));
        activityTrackView_args args = new activityTrackView_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ActivityTrackViewResponse recv_activityTrackView()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        activityTrackView_result result = new activityTrackView_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "activityTrackView failed: unknown result");
      }

      
      /// <summary>
      /// activity feed dashboard
      /// </summary>
      /// <param name="request"></param>
      public DDGetActivitiesResponse ddGetActivities(DDGetActivitiesRequest request)
      {
        send_ddGetActivities(request);
        return recv_ddGetActivities();

      }
      public void send_ddGetActivities(DDGetActivitiesRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddGetActivities", TMessageType.Call, seqid_));
        ddGetActivities_args args = new ddGetActivities_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDGetActivitiesResponse recv_ddGetActivities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddGetActivities_result result = new ddGetActivities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddGetActivities failed: unknown result");
      }

      
      public DDGetActivityByIDResponse ddGetActivityByID(DDGetActivityByIDRequest request)
      {
        send_ddGetActivityByID(request);
        return recv_ddGetActivityByID();

      }
      public void send_ddGetActivityByID(DDGetActivityByIDRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddGetActivityByID", TMessageType.Call, seqid_));
        ddGetActivityByID_args args = new ddGetActivityByID_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDGetActivityByIDResponse recv_ddGetActivityByID()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddGetActivityByID_result result = new ddGetActivityByID_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddGetActivityByID failed: unknown result");
      }

      
      public DDFindTagsResponse ddFindTags(DDFindTagsRequest request)
      {
        send_ddFindTags(request);
        return recv_ddFindTags();

      }
      public void send_ddFindTags(DDFindTagsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddFindTags", TMessageType.Call, seqid_));
        ddFindTags_args args = new ddFindTags_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDFindTagsResponse recv_ddFindTags()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddFindTags_result result = new ddFindTags_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddFindTags failed: unknown result");
      }

      
      public DDCreateActivityResponse ddCreateActivity(DDCreateActivityRequest request)
      {
        send_ddCreateActivity(request);
        return recv_ddCreateActivity();

      }
      public void send_ddCreateActivity(DDCreateActivityRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddCreateActivity", TMessageType.Call, seqid_));
        ddCreateActivity_args args = new ddCreateActivity_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDCreateActivityResponse recv_ddCreateActivity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddCreateActivity_result result = new ddCreateActivity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddCreateActivity failed: unknown result");
      }

      
      public DDUpdateActivityResponse ddUpdateActivity(DDUpdateActivityRequest request)
      {
        send_ddUpdateActivity(request);
        return recv_ddUpdateActivity();

      }
      public void send_ddUpdateActivity(DDUpdateActivityRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddUpdateActivity", TMessageType.Call, seqid_));
        ddUpdateActivity_args args = new ddUpdateActivity_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDUpdateActivityResponse recv_ddUpdateActivity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddUpdateActivity_result result = new ddUpdateActivity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddUpdateActivity failed: unknown result");
      }

      
      public DDUpdateActivitiesStatusResponse ddUpdateActivitiesStatus(DDUpdateActivitiesStatusRequest request)
      {
        send_ddUpdateActivitiesStatus(request);
        return recv_ddUpdateActivitiesStatus();

      }
      public void send_ddUpdateActivitiesStatus(DDUpdateActivitiesStatusRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddUpdateActivitiesStatus", TMessageType.Call, seqid_));
        ddUpdateActivitiesStatus_args args = new ddUpdateActivitiesStatus_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDUpdateActivitiesStatusResponse recv_ddUpdateActivitiesStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddUpdateActivitiesStatus_result result = new ddUpdateActivitiesStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddUpdateActivitiesStatus failed: unknown result");
      }

      
      public DDGetAnnouncementsResponse ddGetAnnouncements(DDGetAnnouncementsRequest request)
      {
        send_ddGetAnnouncements(request);
        return recv_ddGetAnnouncements();

      }
      public void send_ddGetAnnouncements(DDGetAnnouncementsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddGetAnnouncements", TMessageType.Call, seqid_));
        ddGetAnnouncements_args args = new ddGetAnnouncements_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDGetAnnouncementsResponse recv_ddGetAnnouncements()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddGetAnnouncements_result result = new ddGetAnnouncements_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddGetAnnouncements failed: unknown result");
      }

      
      public DDCreateAnnouncementResponse ddCreateAnnouncement(DDCreateAnnouncementRequest request)
      {
        send_ddCreateAnnouncement(request);
        return recv_ddCreateAnnouncement();

      }
      public void send_ddCreateAnnouncement(DDCreateAnnouncementRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddCreateAnnouncement", TMessageType.Call, seqid_));
        ddCreateAnnouncement_args args = new ddCreateAnnouncement_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDCreateAnnouncementResponse recv_ddCreateAnnouncement()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddCreateAnnouncement_result result = new ddCreateAnnouncement_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddCreateAnnouncement failed: unknown result");
      }

      
      public DDUpdateAnnouncementResponse ddUpdateAnnouncement(DDUpdateAnnouncementRequest request)
      {
        send_ddUpdateAnnouncement(request);
        return recv_ddUpdateAnnouncement();

      }
      public void send_ddUpdateAnnouncement(DDUpdateAnnouncementRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddUpdateAnnouncement", TMessageType.Call, seqid_));
        ddUpdateAnnouncement_args args = new ddUpdateAnnouncement_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDUpdateAnnouncementResponse recv_ddUpdateAnnouncement()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddUpdateAnnouncement_result result = new ddUpdateAnnouncement_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddUpdateAnnouncement failed: unknown result");
      }

      
      public DDGetReactionsResponse ddGetReactions(DDGetReactionsRequest request)
      {
        send_ddGetReactions(request);
        return recv_ddGetReactions();

      }
      public void send_ddGetReactions(DDGetReactionsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddGetReactions", TMessageType.Call, seqid_));
        ddGetReactions_args args = new ddGetReactions_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDGetReactionsResponse recv_ddGetReactions()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddGetReactions_result result = new ddGetReactions_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddGetReactions failed: unknown result");
      }

      
      public DDCreateReactionsResponse ddCreateReactions(DDCreateReactionsRequest request)
      {
        send_ddCreateReactions(request);
        return recv_ddCreateReactions();

      }
      public void send_ddCreateReactions(DDCreateReactionsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddCreateReactions", TMessageType.Call, seqid_));
        ddCreateReactions_args args = new ddCreateReactions_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDCreateReactionsResponse recv_ddCreateReactions()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddCreateReactions_result result = new ddCreateReactions_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddCreateReactions failed: unknown result");
      }

      
      public DDDeleteReactionsResponse ddDeleteReactions(DDDeleteReactionsRequest request)
      {
        send_ddDeleteReactions(request);
        return recv_ddDeleteReactions();

      }
      public void send_ddDeleteReactions(DDDeleteReactionsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddDeleteReactions", TMessageType.Call, seqid_));
        ddDeleteReactions_args args = new ddDeleteReactions_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDDeleteReactionsResponse recv_ddDeleteReactions()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddDeleteReactions_result result = new ddDeleteReactions_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddDeleteReactions failed: unknown result");
      }

      
      public DDPurgeActivitiesResponse ddPurgeActivities(DDPurgeActivitiesRequest request)
      {
        send_ddPurgeActivities(request);
        return recv_ddPurgeActivities();

      }
      public void send_ddPurgeActivities(DDPurgeActivitiesRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddPurgeActivities", TMessageType.Call, seqid_));
        ddPurgeActivities_args args = new ddPurgeActivities_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDPurgeActivitiesResponse recv_ddPurgeActivities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddPurgeActivities_result result = new ddPurgeActivities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddPurgeActivities failed: unknown result");
      }

      
      public DDGetActivitiesForModerationResponse ddGetActivitiesForModeration(DDGetActivitiesForModerationRequest request)
      {
        send_ddGetActivitiesForModeration(request);
        return recv_ddGetActivitiesForModeration();

      }
      public void send_ddGetActivitiesForModeration(DDGetActivitiesForModerationRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddGetActivitiesForModeration", TMessageType.Call, seqid_));
        ddGetActivitiesForModeration_args args = new ddGetActivitiesForModeration_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDGetActivitiesForModerationResponse recv_ddGetActivitiesForModeration()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddGetActivitiesForModeration_result result = new ddGetActivitiesForModeration_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddGetActivitiesForModeration failed: unknown result");
      }

      
      /// <summary>
      /// If query is successfully started, returns queryId string. This can be used to call getETLQueryResult.
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      /// <param name="queries"></param>
      public List<string> runETLQuery(string sessionId, string appId, List<Query> queries)
      {
        send_runETLQuery(sessionId, appId, queries);
        return recv_runETLQuery();

      }
      public void send_runETLQuery(string sessionId, string appId, List<Query> queries)
      {
        oprot_.WriteMessageBegin(new TMessage("runETLQuery", TMessageType.Call, seqid_));
        runETLQuery_args args = new runETLQuery_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Queries = queries;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<string> recv_runETLQuery()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        runETLQuery_result result = new runETLQuery_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "runETLQuery failed: unknown result");
      }

      
      /// <summary>
      /// DD should *not* call this RPC if it already has the results for that query.
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="queryId"></param>
      public string getETLQueryResults(string sessionId, List<string> queryId)
      {
        send_getETLQueryResults(sessionId, queryId);
        return recv_getETLQueryResults();

      }
      public void send_getETLQueryResults(string sessionId, List<string> queryId)
      {
        oprot_.WriteMessageBegin(new TMessage("getETLQueryResults", TMessageType.Call, seqid_));
        getETLQueryResults_args args = new getETLQueryResults_args();
        args.SessionId = sessionId;
        args.QueryId = queryId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_getETLQueryResults()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getETLQueryResults_result result = new getETLQueryResults_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getETLQueryResults failed: unknown result");
      }

      
      /// <summary>
      /// Marketing Links
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      /// <param name="name"></param>
      public Campaign createCampaign(string sessionId, string appId, string name)
      {
        send_createCampaign(sessionId, appId, name);
        return recv_createCampaign();

      }
      public void send_createCampaign(string sessionId, string appId, string name)
      {
        oprot_.WriteMessageBegin(new TMessage("createCampaign", TMessageType.Call, seqid_));
        createCampaign_args args = new createCampaign_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Campaign recv_createCampaign()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createCampaign_result result = new createCampaign_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createCampaign failed: unknown result");
      }

      
      public Campaign updateCampaign(string sessionId, Campaign campaign)
      {
        send_updateCampaign(sessionId, campaign);
        return recv_updateCampaign();

      }
      public void send_updateCampaign(string sessionId, Campaign campaign)
      {
        oprot_.WriteMessageBegin(new TMessage("updateCampaign", TMessageType.Call, seqid_));
        updateCampaign_args args = new updateCampaign_args();
        args.SessionId = sessionId;
        args.Campaign = campaign;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Campaign recv_updateCampaign()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateCampaign_result result = new updateCampaign_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateCampaign failed: unknown result");
      }

      
      public MarketingLink setMarketingLink(string sessionId, MarketingLink link)
      {
        send_setMarketingLink(sessionId, link);
        return recv_setMarketingLink();

      }
      public void send_setMarketingLink(string sessionId, MarketingLink link)
      {
        oprot_.WriteMessageBegin(new TMessage("setMarketingLink", TMessageType.Call, seqid_));
        setMarketingLink_args args = new setMarketingLink_args();
        args.SessionId = sessionId;
        args.Link = link;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public MarketingLink recv_setMarketingLink()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setMarketingLink_result result = new setMarketingLink_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setMarketingLink failed: unknown result");
      }

      
      public MarketingLink getMarketingLink(string sessionId, string id)
      {
        send_getMarketingLink(sessionId, id);
        return recv_getMarketingLink();

      }
      public void send_getMarketingLink(string sessionId, string id)
      {
        oprot_.WriteMessageBegin(new TMessage("getMarketingLink", TMessageType.Call, seqid_));
        getMarketingLink_args args = new getMarketingLink_args();
        args.SessionId = sessionId;
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public MarketingLink recv_getMarketingLink()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getMarketingLink_result result = new getMarketingLink_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMarketingLink failed: unknown result");
      }

      
      public List<Campaign> getCampaigns(string sessionId, string appId, LinkStatus status)
      {
        send_getCampaigns(sessionId, appId, status);
        return recv_getCampaigns();

      }
      public void send_getCampaigns(string sessionId, string appId, LinkStatus status)
      {
        oprot_.WriteMessageBegin(new TMessage("getCampaigns", TMessageType.Call, seqid_));
        getCampaigns_args args = new getCampaigns_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Status = status;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Campaign> recv_getCampaigns()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCampaigns_result result = new getCampaigns_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCampaigns failed: unknown result");
      }

      
      /// <summary>
      /// Banner Links
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="link"></param>
      public BannerLink setBannerLink(string sessionId, BannerLink link)
      {
        send_setBannerLink(sessionId, link);
        return recv_setBannerLink();

      }
      public void send_setBannerLink(string sessionId, BannerLink link)
      {
        oprot_.WriteMessageBegin(new TMessage("setBannerLink", TMessageType.Call, seqid_));
        setBannerLink_args args = new setBannerLink_args();
        args.SessionId = sessionId;
        args.Link = link;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public BannerLink recv_setBannerLink()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setBannerLink_result result = new setBannerLink_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setBannerLink failed: unknown result");
      }

      
      public BannerLink getBannerLink(string sessionId, string id)
      {
        send_getBannerLink(sessionId, id);
        return recv_getBannerLink();

      }
      public void send_getBannerLink(string sessionId, string id)
      {
        oprot_.WriteMessageBegin(new TMessage("getBannerLink", TMessageType.Call, seqid_));
        getBannerLink_args args = new getBannerLink_args();
        args.SessionId = sessionId;
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public BannerLink recv_getBannerLink()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getBannerLink_result result = new getBannerLink_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBannerLink failed: unknown result");
      }

      
      public List<BannerLink> getBannerLinks(string sessionId, string appId, LinkStatus status)
      {
        send_getBannerLinks(sessionId, appId, status);
        return recv_getBannerLinks();

      }
      public void send_getBannerLinks(string sessionId, string appId, LinkStatus status)
      {
        oprot_.WriteMessageBegin(new TMessage("getBannerLinks", TMessageType.Call, seqid_));
        getBannerLinks_args args = new getBannerLinks_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Status = status;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<BannerLink> recv_getBannerLinks()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getBannerLinks_result result = new getBannerLinks_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBannerLinks failed: unknown result");
      }

      
      /// <summary>
      /// Content moderation
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      /// <param name="query"></param>
      public List<THReportedActivityPost> getReportedActivities(string sessionId, string appId, THReportedActivitiesQuery query)
      {
        send_getReportedActivities(sessionId, appId, query);
        return recv_getReportedActivities();

      }
      public void send_getReportedActivities(string sessionId, string appId, THReportedActivitiesQuery query)
      {
        oprot_.WriteMessageBegin(new TMessage("getReportedActivities", TMessageType.Call, seqid_));
        getReportedActivities_args args = new getReportedActivities_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THReportedActivityPost> recv_getReportedActivities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getReportedActivities_result result = new getReportedActivities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getReportedActivities failed: unknown result");
      }

      
      public bool closeReports(string sessionId, string appId, List<string> activityIds)
      {
        send_closeReports(sessionId, appId, activityIds);
        return recv_closeReports();

      }
      public void send_closeReports(string sessionId, string appId, List<string> activityIds)
      {
        oprot_.WriteMessageBegin(new TMessage("closeReports", TMessageType.Call, seqid_));
        closeReports_args args = new closeReports_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.ActivityIds = activityIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_closeReports()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        closeReports_result result = new closeReports_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "closeReports failed: unknown result");
      }

      
      /// <summary>
      /// User moderation
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      /// <param name="userIds"></param>
      /// <param name="banExpiry"></param>
      /// <param name="reason"></param>
      public bool banUsers(string sessionId, string appId, List<string> userIds, long banExpiry, string reason)
      {
        send_banUsers(sessionId, appId, userIds, banExpiry, reason);
        return recv_banUsers();

      }
      public void send_banUsers(string sessionId, string appId, List<string> userIds, long banExpiry, string reason)
      {
        oprot_.WriteMessageBegin(new TMessage("banUsers", TMessageType.Call, seqid_));
        banUsers_args args = new banUsers_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.UserIds = userIds;
        args.BanExpiry = banExpiry;
        args.Reason = reason;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_banUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        banUsers_result result = new banUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "banUsers failed: unknown result");
      }

      
      public bool unbanUsers(string sessionId, string appId, List<string> userIds)
      {
        send_unbanUsers(sessionId, appId, userIds);
        return recv_unbanUsers();

      }
      public void send_unbanUsers(string sessionId, string appId, List<string> userIds)
      {
        oprot_.WriteMessageBegin(new TMessage("unbanUsers", TMessageType.Call, seqid_));
        unbanUsers_args args = new unbanUsers_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.UserIds = userIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_unbanUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        unbanUsers_result result = new unbanUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "unbanUsers failed: unknown result");
      }

      
      public List<THBannedPublicUser> getBannedUsers(string sessionId, string appId)
      {
        send_getBannedUsers(sessionId, appId);
        return recv_getBannedUsers();

      }
      public void send_getBannedUsers(string sessionId, string appId)
      {
        oprot_.WriteMessageBegin(new TMessage("getBannedUsers", TMessageType.Call, seqid_));
        getBannedUsers_args args = new getBannedUsers_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THBannedPublicUser> recv_getBannedUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getBannedUsers_result result = new getBannedUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBannedUsers failed: unknown result");
      }

      
      /// <summary>
      /// Audiences
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      public List<Audience> getAudiences(string sessionId, string appId)
      {
        send_getAudiences(sessionId, appId);
        return recv_getAudiences();

      }
      public void send_getAudiences(string sessionId, string appId)
      {
        oprot_.WriteMessageBegin(new TMessage("getAudiences", TMessageType.Call, seqid_));
        getAudiences_args args = new getAudiences_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Audience> recv_getAudiences()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAudiences_result result = new getAudiences_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAudiences failed: unknown result");
      }

      
      public Audience setAudience(string sessionId, Audience audience)
      {
        send_setAudience(sessionId, audience);
        return recv_setAudience();

      }
      public void send_setAudience(string sessionId, Audience audience)
      {
        oprot_.WriteMessageBegin(new TMessage("setAudience", TMessageType.Call, seqid_));
        setAudience_args args = new setAudience_args();
        args.SessionId = sessionId;
        args.Audience = audience;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Audience recv_setAudience()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setAudience_result result = new setAudience_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setAudience failed: unknown result");
      }

      
      public Audience getAudience(string sessionId, string audienceId)
      {
        send_getAudience(sessionId, audienceId);
        return recv_getAudience();

      }
      public void send_getAudience(string sessionId, string audienceId)
      {
        oprot_.WriteMessageBegin(new TMessage("getAudience", TMessageType.Call, seqid_));
        getAudience_args args = new getAudience_args();
        args.SessionId = sessionId;
        args.AudienceId = audienceId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Audience recv_getAudience()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAudience_result result = new getAudience_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAudience failed: unknown result");
      }

      
      public bool deleteAudience(string sessionId, string audienceId)
      {
        send_deleteAudience(sessionId, audienceId);
        return recv_deleteAudience();

      }
      public void send_deleteAudience(string sessionId, string audienceId)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteAudience", TMessageType.Call, seqid_));
        deleteAudience_args args = new deleteAudience_args();
        args.SessionId = sessionId;
        args.AudienceId = audienceId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_deleteAudience()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteAudience_result result = new deleteAudience_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteAudience failed: unknown result");
      }

      
      /// <summary>
      /// Webhooks
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      public List<WebhookEvent> getWebhookEvents(string sessionId, string appId)
      {
        send_getWebhookEvents(sessionId, appId);
        return recv_getWebhookEvents();

      }
      public void send_getWebhookEvents(string sessionId, string appId)
      {
        oprot_.WriteMessageBegin(new TMessage("getWebhookEvents", TMessageType.Call, seqid_));
        getWebhookEvents_args args = new getWebhookEvents_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<WebhookEvent> recv_getWebhookEvents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getWebhookEvents_result result = new getWebhookEvents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getWebhookEvents failed: unknown result");
      }

      
      public WebhookSettings getWebhookSettings(string sessionId, string appId)
      {
        send_getWebhookSettings(sessionId, appId);
        return recv_getWebhookSettings();

      }
      public void send_getWebhookSettings(string sessionId, string appId)
      {
        oprot_.WriteMessageBegin(new TMessage("getWebhookSettings", TMessageType.Call, seqid_));
        getWebhookSettings_args args = new getWebhookSettings_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public WebhookSettings recv_getWebhookSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getWebhookSettings_result result = new getWebhookSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getWebhookSettings failed: unknown result");
      }

      
      public WebhookSettings updateWebhookSettings(string sessionId, string appId, WebhookSettings settings)
      {
        send_updateWebhookSettings(sessionId, appId, settings);
        return recv_updateWebhookSettings();

      }
      public void send_updateWebhookSettings(string sessionId, string appId, WebhookSettings settings)
      {
        oprot_.WriteMessageBegin(new TMessage("updateWebhookSettings", TMessageType.Call, seqid_));
        updateWebhookSettings_args args = new updateWebhookSettings_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Settings = settings;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public WebhookSettings recv_updateWebhookSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateWebhookSettings_result result = new updateWebhookSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateWebhookSettings failed: unknown result");
      }

      
      /// <summary>
      /// Test Devices
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="companyId"></param>
      /// <param name="device"></param>
      public THTestDevice setTestDevice(string sessionId, string companyId, THTestDevice device)
      {
        send_setTestDevice(sessionId, companyId, device);
        return recv_setTestDevice();

      }
      public void send_setTestDevice(string sessionId, string companyId, THTestDevice device)
      {
        oprot_.WriteMessageBegin(new TMessage("setTestDevice", TMessageType.Call, seqid_));
        setTestDevice_args args = new setTestDevice_args();
        args.SessionId = sessionId;
        args.CompanyId = companyId;
        args.Device = device;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THTestDevice recv_setTestDevice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setTestDevice_result result = new setTestDevice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setTestDevice failed: unknown result");
      }

      
      public List<THTestDevice> getTestDevices(string sessionId, string companyId)
      {
        send_getTestDevices(sessionId, companyId);
        return recv_getTestDevices();

      }
      public void send_getTestDevices(string sessionId, string companyId)
      {
        oprot_.WriteMessageBegin(new TMessage("getTestDevices", TMessageType.Call, seqid_));
        getTestDevices_args args = new getTestDevices_args();
        args.SessionId = sessionId;
        args.CompanyId = companyId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THTestDevice> recv_getTestDevices()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTestDevices_result result = new getTestDevices_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTestDevices failed: unknown result");
      }

      
      public GetTestDeviceRemoteLogsResponse getTestDeviceRemoteLogs(GetTestDeviceRemoteLogsRequest request)
      {
        send_getTestDeviceRemoteLogs(request);
        return recv_getTestDeviceRemoteLogs();

      }
      public void send_getTestDeviceRemoteLogs(GetTestDeviceRemoteLogsRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("getTestDeviceRemoteLogs", TMessageType.Call, seqid_));
        getTestDeviceRemoteLogs_args args = new getTestDeviceRemoteLogs_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetTestDeviceRemoteLogsResponse recv_getTestDeviceRemoteLogs()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTestDeviceRemoteLogs_result result = new getTestDeviceRemoteLogs_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTestDeviceRemoteLogs failed: unknown result");
      }

      
      public bool deleteTestDevice(string sessionId, string id)
      {
        send_deleteTestDevice(sessionId, id);
        return recv_deleteTestDevice();

      }
      public void send_deleteTestDevice(string sessionId, string id)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteTestDevice", TMessageType.Call, seqid_));
        deleteTestDevice_args args = new deleteTestDevice_args();
        args.SessionId = sessionId;
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_deleteTestDevice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteTestDevice_result result = new deleteTestDevice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteTestDevice failed: unknown result");
      }

      
      /// <summary>
      /// Smart Targeting
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      /// <param name="query"></param>
      public Dictionary<int, THNotificationSpec> describeNotifications(string sessionId, string appId, THListNotificationsTextsQuery query)
      {
        send_describeNotifications(sessionId, appId, query);
        return recv_describeNotifications();

      }
      public void send_describeNotifications(string sessionId, string appId, THListNotificationsTextsQuery query)
      {
        oprot_.WriteMessageBegin(new TMessage("describeNotifications", TMessageType.Call, seqid_));
        describeNotifications_args args = new describeNotifications_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Dictionary<int, THNotificationSpec> recv_describeNotifications()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        describeNotifications_result result = new describeNotifications_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "describeNotifications failed: unknown result");
      }

      
      public Dictionary<int, Dictionary<string, string>> getNotificationsTexts(string sessionId, THListNotificationsTextsQuery query)
      {
        send_getNotificationsTexts(sessionId, query);
        return recv_getNotificationsTexts();

      }
      public void send_getNotificationsTexts(string sessionId, THListNotificationsTextsQuery query)
      {
        oprot_.WriteMessageBegin(new TMessage("getNotificationsTexts", TMessageType.Call, seqid_));
        getNotificationsTexts_args args = new getNotificationsTexts_args();
        args.SessionId = sessionId;
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Dictionary<int, Dictionary<string, string>> recv_getNotificationsTexts()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNotificationsTexts_result result = new getNotificationsTexts_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNotificationsTexts failed: unknown result");
      }

      
      public List<THTargetedNotification> getTargetedNotifications(string sessionId, string appId)
      {
        send_getTargetedNotifications(sessionId, appId);
        return recv_getTargetedNotifications();

      }
      public void send_getTargetedNotifications(string sessionId, string appId)
      {
        oprot_.WriteMessageBegin(new TMessage("getTargetedNotifications", TMessageType.Call, seqid_));
        getTargetedNotifications_args args = new getTargetedNotifications_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THTargetedNotification> recv_getTargetedNotifications()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTargetedNotifications_result result = new getTargetedNotifications_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTargetedNotifications failed: unknown result");
      }

      
      public THTargetedNotification setTargetedNotification(string sessionId, THTargetedNotification notification)
      {
        send_setTargetedNotification(sessionId, notification);
        return recv_setTargetedNotification();

      }
      public void send_setTargetedNotification(string sessionId, THTargetedNotification notification)
      {
        oprot_.WriteMessageBegin(new TMessage("setTargetedNotification", TMessageType.Call, seqid_));
        setTargetedNotification_args args = new setTargetedNotification_args();
        args.SessionId = sessionId;
        args.Notification = notification;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THTargetedNotification recv_setTargetedNotification()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setTargetedNotification_result result = new setTargetedNotification_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setTargetedNotification failed: unknown result");
      }

      
      public bool cancelTargetedNotification(string sessionId, string appId, string notificationId, bool @remove)
      {
        send_cancelTargetedNotification(sessionId, appId, notificationId, @remove);
        return recv_cancelTargetedNotification();

      }
      public void send_cancelTargetedNotification(string sessionId, string appId, string notificationId, bool @remove)
      {
        oprot_.WriteMessageBegin(new TMessage("cancelTargetedNotification", TMessageType.Call, seqid_));
        cancelTargetedNotification_args args = new cancelTargetedNotification_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.NotificationId = notificationId;
        args.Remove = @remove;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_cancelTargetedNotification()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        cancelTargetedNotification_result result = new cancelTargetedNotification_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "cancelTargetedNotification failed: unknown result");
      }

      
      /// <summary>
      /// Templates
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="tmpl"></param>
      public THNotificationTemplate setTemplate(string sessionId, THNotificationTemplate tmpl)
      {
        send_setTemplate(sessionId, tmpl);
        return recv_setTemplate();

      }
      public void send_setTemplate(string sessionId, THNotificationTemplate tmpl)
      {
        oprot_.WriteMessageBegin(new TMessage("setTemplate", TMessageType.Call, seqid_));
        setTemplate_args args = new setTemplate_args();
        args.SessionId = sessionId;
        args.Tmpl = tmpl;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THNotificationTemplate recv_setTemplate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setTemplate_result result = new setTemplate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setTemplate failed: unknown result");
      }

      
      public bool deleteTemplate(string sessionId, string appId, string tmplId)
      {
        send_deleteTemplate(sessionId, appId, tmplId);
        return recv_deleteTemplate();

      }
      public void send_deleteTemplate(string sessionId, string appId, string tmplId)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteTemplate", TMessageType.Call, seqid_));
        deleteTemplate_args args = new deleteTemplate_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.TmplId = tmplId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_deleteTemplate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteTemplate_result result = new deleteTemplate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteTemplate failed: unknown result");
      }

      
      public List<THNotificationTemplate> getTemplates(string sessionId, string appId)
      {
        send_getTemplates(sessionId, appId);
        return recv_getTemplates();

      }
      public void send_getTemplates(string sessionId, string appId)
      {
        oprot_.WriteMessageBegin(new TMessage("getTemplates", TMessageType.Call, seqid_));
        getTemplates_args args = new getTemplates_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THNotificationTemplate> recv_getTemplates()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTemplates_result result = new getTemplates_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTemplates failed: unknown result");
      }

      
      /// <summary>
      /// Company Api Keys
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="companyId"></param>
      public List<THCompanyApiKey> getCompanyApiKeys(string sessionId, string companyId)
      {
        send_getCompanyApiKeys(sessionId, companyId);
        return recv_getCompanyApiKeys();

      }
      public void send_getCompanyApiKeys(string sessionId, string companyId)
      {
        oprot_.WriteMessageBegin(new TMessage("getCompanyApiKeys", TMessageType.Call, seqid_));
        getCompanyApiKeys_args args = new getCompanyApiKeys_args();
        args.SessionId = sessionId;
        args.CompanyId = companyId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THCompanyApiKey> recv_getCompanyApiKeys()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCompanyApiKeys_result result = new getCompanyApiKeys_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCompanyApiKeys failed: unknown result");
      }

      
      public THCompanyApiKey setCompanyApiKey(string sessionId, THCompanyApiKey apiKey)
      {
        send_setCompanyApiKey(sessionId, apiKey);
        return recv_setCompanyApiKey();

      }
      public void send_setCompanyApiKey(string sessionId, THCompanyApiKey apiKey)
      {
        oprot_.WriteMessageBegin(new TMessage("setCompanyApiKey", TMessageType.Call, seqid_));
        setCompanyApiKey_args args = new setCompanyApiKey_args();
        args.SessionId = sessionId;
        args.ApiKey = apiKey;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THCompanyApiKey recv_setCompanyApiKey()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setCompanyApiKey_result result = new setCompanyApiKey_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setCompanyApiKey failed: unknown result");
      }

      
      /// <summary>
      /// Mercury
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="companyId"></param>
      public CalculationResult getEstimatedBalance(string sessionId, string companyId)
      {
        send_getEstimatedBalance(sessionId, companyId);
        return recv_getEstimatedBalance();

      }
      public void send_getEstimatedBalance(string sessionId, string companyId)
      {
        oprot_.WriteMessageBegin(new TMessage("getEstimatedBalance", TMessageType.Call, seqid_));
        getEstimatedBalance_args args = new getEstimatedBalance_args();
        args.SessionId = sessionId;
        args.CompanyId = companyId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public CalculationResult recv_getEstimatedBalance()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getEstimatedBalance_result result = new getEstimatedBalance_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getEstimatedBalance failed: unknown result");
      }

      
      public List<Invoice> getInvoices(string sessionId, string companyId)
      {
        send_getInvoices(sessionId, companyId);
        return recv_getInvoices();

      }
      public void send_getInvoices(string sessionId, string companyId)
      {
        oprot_.WriteMessageBegin(new TMessage("getInvoices", TMessageType.Call, seqid_));
        getInvoices_args args = new getInvoices_args();
        args.SessionId = sessionId;
        args.CompanyId = companyId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Invoice> recv_getInvoices()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getInvoices_result result = new getInvoices_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getInvoices failed: unknown result");
      }

      
      public PaymentMethodDetails getPaymentMethod(string sessionId, string companyId)
      {
        send_getPaymentMethod(sessionId, companyId);
        return recv_getPaymentMethod();

      }
      public void send_getPaymentMethod(string sessionId, string companyId)
      {
        oprot_.WriteMessageBegin(new TMessage("getPaymentMethod", TMessageType.Call, seqid_));
        getPaymentMethod_args args = new getPaymentMethod_args();
        args.SessionId = sessionId;
        args.CompanyId = companyId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public PaymentMethodDetails recv_getPaymentMethod()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPaymentMethod_result result = new getPaymentMethod_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPaymentMethod failed: unknown result");
      }

      
      public PaymentMethodDetails setCreditCard(string sessionId, string companyId, string stripeResponse)
      {
        send_setCreditCard(sessionId, companyId, stripeResponse);
        return recv_setCreditCard();

      }
      public void send_setCreditCard(string sessionId, string companyId, string stripeResponse)
      {
        oprot_.WriteMessageBegin(new TMessage("setCreditCard", TMessageType.Call, seqid_));
        setCreditCard_args args = new setCreditCard_args();
        args.SessionId = sessionId;
        args.CompanyId = companyId;
        args.StripeResponse = stripeResponse;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public PaymentMethodDetails recv_setCreditCard()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setCreditCard_result result = new setCreditCard_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setCreditCard failed: unknown result");
      }

      
      public string getPaymentIntentClientSecret(string sessionId, string companyId)
      {
        send_getPaymentIntentClientSecret(sessionId, companyId);
        return recv_getPaymentIntentClientSecret();

      }
      public void send_getPaymentIntentClientSecret(string sessionId, string companyId)
      {
        oprot_.WriteMessageBegin(new TMessage("getPaymentIntentClientSecret", TMessageType.Call, seqid_));
        getPaymentIntentClientSecret_args args = new getPaymentIntentClientSecret_args();
        args.SessionId = sessionId;
        args.CompanyId = companyId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_getPaymentIntentClientSecret()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPaymentIntentClientSecret_result result = new getPaymentIntentClientSecret_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPaymentIntentClientSecret failed: unknown result");
      }

      
      /// <summary>
      /// Styx
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      public List<SFTrigger> getSFTriggers(string sessionId, string appId)
      {
        send_getSFTriggers(sessionId, appId);
        return recv_getSFTriggers();

      }
      public void send_getSFTriggers(string sessionId, string appId)
      {
        oprot_.WriteMessageBegin(new TMessage("getSFTriggers", TMessageType.Call, seqid_));
        getSFTriggers_args args = new getSFTriggers_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<SFTrigger> recv_getSFTriggers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSFTriggers_result result = new getSFTriggers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSFTriggers failed: unknown result");
      }

      
      public SFTrigger setSFTrigger(string sessionId, SFTrigger trigger)
      {
        send_setSFTrigger(sessionId, trigger);
        return recv_setSFTrigger();

      }
      public void send_setSFTrigger(string sessionId, SFTrigger trigger)
      {
        oprot_.WriteMessageBegin(new TMessage("setSFTrigger", TMessageType.Call, seqid_));
        setSFTrigger_args args = new setSFTrigger_args();
        args.SessionId = sessionId;
        args.Trigger = trigger;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public SFTrigger recv_setSFTrigger()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setSFTrigger_result result = new setSFTrigger_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setSFTrigger failed: unknown result");
      }

      
      public bool deleteSFTrigger(string sessionId, long triggerId)
      {
        send_deleteSFTrigger(sessionId, triggerId);
        return recv_deleteSFTrigger();

      }
      public void send_deleteSFTrigger(string sessionId, long triggerId)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteSFTrigger", TMessageType.Call, seqid_));
        deleteSFTrigger_args args = new deleteSFTrigger_args();
        args.SessionId = sessionId;
        args.TriggerId = triggerId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_deleteSFTrigger()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteSFTrigger_result result = new deleteSFTrigger_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteSFTrigger failed: unknown result");
      }

      
      public List<SFAction> getSFActions(string sessionId, long triggerId)
      {
        send_getSFActions(sessionId, triggerId);
        return recv_getSFActions();

      }
      public void send_getSFActions(string sessionId, long triggerId)
      {
        oprot_.WriteMessageBegin(new TMessage("getSFActions", TMessageType.Call, seqid_));
        getSFActions_args args = new getSFActions_args();
        args.SessionId = sessionId;
        args.TriggerId = triggerId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<SFAction> recv_getSFActions()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSFActions_result result = new getSFActions_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSFActions failed: unknown result");
      }

      
      public SFAction setSFAction(string sessionId, SFAction action)
      {
        send_setSFAction(sessionId, action);
        return recv_setSFAction();

      }
      public void send_setSFAction(string sessionId, SFAction action)
      {
        oprot_.WriteMessageBegin(new TMessage("setSFAction", TMessageType.Call, seqid_));
        setSFAction_args args = new setSFAction_args();
        args.SessionId = sessionId;
        args.Action = action;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public SFAction recv_setSFAction()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setSFAction_result result = new setSFAction_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setSFAction failed: unknown result");
      }

      
      public bool deleteSFAction(string sessionId, long actionId)
      {
        send_deleteSFAction(sessionId, actionId);
        return recv_deleteSFAction();

      }
      public void send_deleteSFAction(string sessionId, long actionId)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteSFAction", TMessageType.Call, seqid_));
        deleteSFAction_args args = new deleteSFAction_args();
        args.SessionId = sessionId;
        args.ActionId = actionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_deleteSFAction()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteSFAction_result result = new deleteSFAction_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteSFAction failed: unknown result");
      }

      
      public bool notificationTemplateInUse(string sessionId, string appId, string tpl)
      {
        send_notificationTemplateInUse(sessionId, appId, tpl);
        return recv_notificationTemplateInUse();

      }
      public void send_notificationTemplateInUse(string sessionId, string appId, string tpl)
      {
        oprot_.WriteMessageBegin(new TMessage("notificationTemplateInUse", TMessageType.Call, seqid_));
        notificationTemplateInUse_args args = new notificationTemplateInUse_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.Tpl = tpl;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_notificationTemplateInUse()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        notificationTemplateInUse_result result = new notificationTemplateInUse_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "notificationTemplateInUse failed: unknown result");
      }

      
      public bool audienceInUse(string sessionId, string appId, long audienceId)
      {
        send_audienceInUse(sessionId, appId, audienceId);
        return recv_audienceInUse();

      }
      public void send_audienceInUse(string sessionId, string appId, long audienceId)
      {
        oprot_.WriteMessageBegin(new TMessage("audienceInUse", TMessageType.Call, seqid_));
        audienceInUse_args args = new audienceInUse_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.AudienceId = audienceId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_audienceInUse()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        audienceInUse_result result = new audienceInUse_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "audienceInUse failed: unknown result");
      }

      
      /// <summary>
      /// Promo Codes
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="appId"></param>
      /// <param name="offsetId"></param>
      /// <param name="limit"></param>
      public List<THPromoCode> getPromoCodes(string sessionId, string appId, string offsetId, int limit)
      {
        send_getPromoCodes(sessionId, appId, offsetId, limit);
        return recv_getPromoCodes();

      }
      public void send_getPromoCodes(string sessionId, string appId, string offsetId, int limit)
      {
        oprot_.WriteMessageBegin(new TMessage("getPromoCodes", TMessageType.Call, seqid_));
        getPromoCodes_args args = new getPromoCodes_args();
        args.SessionId = sessionId;
        args.AppId = appId;
        args.OffsetId = offsetId;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THPromoCode> recv_getPromoCodes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPromoCodes_result result = new getPromoCodes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPromoCodes failed: unknown result");
      }

      
      public bool deletePromoCode(string sessionId, string id)
      {
        send_deletePromoCode(sessionId, id);
        return recv_deletePromoCode();

      }
      public void send_deletePromoCode(string sessionId, string id)
      {
        oprot_.WriteMessageBegin(new TMessage("deletePromoCode", TMessageType.Call, seqid_));
        deletePromoCode_args args = new deletePromoCode_args();
        args.SessionId = sessionId;
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_deletePromoCode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deletePromoCode_result result = new deletePromoCode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deletePromoCode failed: unknown result");
      }

      
      /// <summary>
      /// Users
      /// </summary>
      /// <param name="request"></param>
      public DDFindUsersResponse ddFindUsers(DDFindUsersRequest request)
      {
        send_ddFindUsers(request);
        return recv_ddFindUsers();

      }
      public void send_ddFindUsers(DDFindUsersRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("ddFindUsers", TMessageType.Call, seqid_));
        ddFindUsers_args args = new ddFindUsers_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public DDFindUsersResponse recv_ddFindUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ddFindUsers_result result = new ddFindUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ddFindUsers failed: unknown result");
      }

      
      /// <summary>
      /// deprecated, use validateIAP
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="receipt"></param>
      public List<THReceiptOld> parseIAP(string sessionId, byte[] receipt)
      {
        send_parseIAP(sessionId, receipt);
        return recv_parseIAP();

      }
      public void send_parseIAP(string sessionId, byte[] receipt)
      {
        oprot_.WriteMessageBegin(new TMessage("parseIAP", TMessageType.Call, seqid_));
        parseIAP_args args = new parseIAP_args();
        args.SessionId = sessionId;
        args.Receipt = receipt;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<THReceiptOld> recv_parseIAP()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        parseIAP_result result = new parseIAP_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "parseIAP failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="sessionId"></param>
      /// <param name="receipt"></param>
      /// <param name="signature"></param>
      /// <param name="checkpoint"></param>
      /// <param name="isSubscription"></param>
      /// <param name="validateOnline"></param>
      public THReceipt validateIAP(string sessionId, byte[] receipt, byte[] signature, string checkpoint, bool isSubscription, bool validateOnline)
      {
        send_validateIAP(sessionId, receipt, signature, checkpoint, isSubscription, validateOnline);
        return recv_validateIAP();

      }
      public void send_validateIAP(string sessionId, byte[] receipt, byte[] signature, string checkpoint, bool isSubscription, bool validateOnline)
      {
        oprot_.WriteMessageBegin(new TMessage("validateIAP", TMessageType.Call, seqid_));
        validateIAP_args args = new validateIAP_args();
        args.SessionId = sessionId;
        args.Receipt = receipt;
        args.Signature = signature;
        args.Checkpoint = checkpoint;
        args.IsSubscription = isSubscription;
        args.ValidateOnline = validateOnline;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THReceipt recv_validateIAP()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        validateIAP_result result = new validateIAP_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "validateIAP failed: unknown result");
      }

      
      /// <summary>
      /// #sdk6 #sdk7
      /// </summary>
      /// <param name="request"></param>
      public bool trackLatency(TrackLatencyRequest request)
      {
        send_trackLatency(request);
        return recv_trackLatency();

      }
      public void send_trackLatency(TrackLatencyRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("trackLatency", TMessageType.Call, seqid_));
        trackLatency_args args = new trackLatency_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_trackLatency()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        trackLatency_result result = new trackLatency_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.errors) {
          throw result.Errors;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "trackLatency failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["echo"] = echo_Process;
        processMap_["authenticateSdk"] = authenticateSdk_Process;
        processMap_["authenticateSdkAllInOne"] = authenticateSdkAllInOne_Process;
        processMap_["updateSession"] = updateSession_Process;
        processMap_["updateUser"] = updateUser_Process;
        processMap_["addIdentity"] = addIdentity_Process;
        processMap_["removeIdentity"] = removeIdentity_Process;
        processMap_["getPrivateUserByIdentity"] = getPrivateUserByIdentity_Process;
        processMap_["getPublicUser"] = getPublicUser_Process;
        processMap_["getUsers"] = getUsers_Process;
        processMap_["getUsersById"] = getUsersById_Process;
        processMap_["getPublicUsersByIdentity"] = getPublicUsersByIdentity_Process;
        processMap_["findUsers"] = findUsers_Process;
        processMap_["addFriend"] = addFriend_Process;
        processMap_["addFriends"] = addFriends_Process;
        processMap_["addFriendsByIdentity"] = addFriendsByIdentity_Process;
        processMap_["removeFriend"] = removeFriend_Process;
        processMap_["removeFriends"] = removeFriends_Process;
        processMap_["setFriends"] = setFriends_Process;
        processMap_["removeFriendsByIdentity"] = removeFriendsByIdentity_Process;
        processMap_["setFriendsByIdentity"] = setFriendsByIdentity_Process;
        processMap_["isFriend"] = isFriend_Process;
        processMap_["areFriends"] = areFriends_Process;
        processMap_["getFriendsCount"] = getFriendsCount_Process;
        processMap_["getFriends"] = getFriends_Process;
        processMap_["getFriendsV2"] = getFriendsV2_Process;
        processMap_["getSuggestedFriends"] = getSuggestedFriends_Process;
        processMap_["getSuggestedFriendsV2"] = getSuggestedFriendsV2_Process;
        processMap_["getMentionFriends"] = getMentionFriends_Process;
        processMap_["getTopics"] = getTopics_Process;
        processMap_["getTopic"] = getTopic_Process;
        processMap_["followEntities"] = followEntities_Process;
        processMap_["unfollowEntities"] = unfollowEntities_Process;
        processMap_["getEntityFollowers"] = getEntityFollowers_Process;
        processMap_["isFollowing"] = isFollowing_Process;
        processMap_["ddGetTopics"] = ddGetTopics_Process;
        processMap_["ddGetTopic"] = ddGetTopic_Process;
        processMap_["ddCreateTopic"] = ddCreateTopic_Process;
        processMap_["ddUpdateTopic"] = ddUpdateTopic_Process;
        processMap_["ddDeleteTopics"] = ddDeleteTopics_Process;
        processMap_["ddGetEntityFollowers"] = ddGetEntityFollowers_Process;
        processMap_["createGroup"] = createGroup_Process;
        processMap_["updateGroup"] = updateGroup_Process;
        processMap_["deleteGroups"] = deleteGroups_Process;
        processMap_["getGroups"] = getGroups_Process;
        processMap_["getGroup"] = getGroup_Process;
        processMap_["updateGroupMembers"] = updateGroupMembers_Process;
        processMap_["removeGroupMembers"] = removeGroupMembers_Process;
        processMap_["areGroupMembers"] = areGroupMembers_Process;
        processMap_["getGroupMembers"] = getGroupMembers_Process;
        processMap_["ddCreateGroup"] = ddCreateGroup_Process;
        processMap_["ddUpdateGroup"] = ddUpdateGroup_Process;
        processMap_["ddDeleteGroups"] = ddDeleteGroups_Process;
        processMap_["ddGetGroup"] = ddGetGroup_Process;
        processMap_["ddGetGroups"] = ddGetGroups_Process;
        processMap_["ddGetGroupMembers"] = ddGetGroupMembers_Process;
        processMap_["ddUpdateGroupMembers"] = ddUpdateGroupMembers_Process;
        processMap_["ddRemoveGroupMembers"] = ddRemoveGroupMembers_Process;
        processMap_["getChats"] = getChats_Process;
        processMap_["getChat"] = getChat_Process;
        processMap_["getChatMessages"] = getChatMessages_Process;
        processMap_["sendChatMessage"] = sendChatMessage_Process;
        processMap_["createInviteUrl"] = createInviteUrl_Process;
        processMap_["createInvite"] = createInvite_Process;
        processMap_["getInviteProviders"] = getInviteProviders_Process;
        processMap_["getAvailableInviteChannels"] = getAvailableInviteChannels_Process;
        processMap_["processAppOpen"] = processAppOpen_Process;
        processMap_["getReferredUsers"] = getReferredUsers_Process;
        processMap_["getReferredUsersV2"] = getReferredUsersV2_Process;
        processMap_["getReferrerUsers"] = getReferrerUsers_Process;
        processMap_["setReferrer"] = setReferrer_Process;
        processMap_["ddGetReferredUsers"] = ddGetReferredUsers_Process;
        processMap_["ddGetReferrerUsers"] = ddGetReferrerUsers_Process;
        processMap_["processCrossPromoClick"] = processCrossPromoClick_Process;
        processMap_["getActivities"] = getActivities_Process;
        processMap_["getStickyActivities"] = getStickyActivities_Process;
        processMap_["getComments"] = getComments_Process;
        processMap_["findTags"] = findTags_Process;
        processMap_["findTagsV2"] = findTagsV2_Process;
        processMap_["getActivity"] = getActivity_Process;
        processMap_["postActivity"] = postActivity_Process;
        processMap_["postComment"] = postComment_Process;
        processMap_["likeActivity"] = likeActivity_Process;
        processMap_["getActivityLikers"] = getActivityLikers_Process;
        processMap_["deleteActivity"] = deleteActivity_Process;
        processMap_["removeActivities"] = removeActivities_Process;
        processMap_["reportActivity"] = reportActivity_Process;
        processMap_["trackAnalyticsEvents"] = trackAnalyticsEvents_Process;
        processMap_["registerPushTarget"] = registerPushTarget_Process;
        processMap_["setPushNotificationsEnabled"] = setPushNotificationsEnabled_Process;
        processMap_["isPushNotificationsEnabled"] = isPushNotificationsEnabled_Process;
        processMap_["sendPushNotification"] = sendPushNotification_Process;
        processMap_["sendNotification"] = sendNotification_Process;
        processMap_["getNotificationsList"] = getNotificationsList_Process;
        processMap_["getNotificationsCount"] = getNotificationsCount_Process;
        processMap_["setNotificationsStatus"] = setNotificationsStatus_Process;
        processMap_["getNotifications"] = getNotifications_Process;
        processMap_["claimPromoCode"] = claimPromoCode_Process;
        processMap_["getPromoCode"] = getPromoCode_Process;
        processMap_["setPromoCode"] = setPromoCode_Process;
        processMap_["createPromoCode"] = createPromoCode_Process;
        processMap_["getPromoCodeV2"] = getPromoCodeV2_Process;
        processMap_["claimPromoCodeV2"] = claimPromoCodeV2_Process;
        processMap_["getInviteProvidersByApp"] = getInviteProvidersByApp_Process;
        processMap_["getTokenInfo"] = getTokenInfo_Process;
        processMap_["trackAnalyticsEvent"] = trackAnalyticsEvent_Process;
        processMap_["trackInstall"] = trackInstall_Process;
        processMap_["getUploadURL"] = getUploadURL_Process;
        processMap_["login"] = login_Process;
        processMap_["loginWithSession"] = loginWithSession_Process;
        processMap_["getOAuthLoginURL"] = getOAuthLoginURL_Process;
        processMap_["loginWithOAuthCode"] = loginWithOAuthCode_Process;
        processMap_["loginETLOnly"] = loginETLOnly_Process;
        processMap_["logout"] = logout_Process;
        processMap_["registerAccount"] = registerAccount_Process;
        processMap_["registerUser"] = registerUser_Process;
        processMap_["createApplication"] = createApplication_Process;
        processMap_["updateApplication"] = updateApplication_Process;
        processMap_["deleteApplication"] = deleteApplication_Process;
        processMap_["addAppPlatform"] = addAppPlatform_Process;
        processMap_["getAppPlatforms"] = getAppPlatforms_Process;
        processMap_["updateAppPlatform"] = updateAppPlatform_Process;
        processMap_["deleteAppPlatform"] = deleteAppPlatform_Process;
        processMap_["getAppAndPlatforms"] = getAppAndPlatforms_Process;
        processMap_["createTeamMember"] = createTeamMember_Process;
        processMap_["getAllTeamMembers"] = getAllTeamMembers_Process;
        processMap_["updateTeamMember"] = updateTeamMember_Process;
        processMap_["deleteTeamMember"] = deleteTeamMember_Process;
        processMap_["getCompany"] = getCompany_Process;
        processMap_["updateCompany"] = updateCompany_Process;
        processMap_["sendPasswordResetEmail"] = sendPasswordResetEmail_Process;
        processMap_["resetPassword"] = resetPassword_Process;
        processMap_["createPassword"] = createPassword_Process;
        processMap_["extendSession"] = extendSession_Process;
        processMap_["getRemainingSessionTime"] = getRemainingSessionTime_Process;
        processMap_["validatePasswordLink"] = validatePasswordLink_Process;
        processMap_["getPublicUsers"] = getPublicUsers_Process;
        processMap_["findAppUsers"] = findAppUsers_Process;
        processMap_["updateAppUser"] = updateAppUser_Process;
        processMap_["getPrivateUser"] = getPrivateUser_Process;
        processMap_["updateAppleAppSiteAssociation"] = updateAppleAppSiteAssociation_Process;
        processMap_["updateAndroidAppLinks"] = updateAndroidAppLinks_Process;
        processMap_["processCustomDomain"] = processCustomDomain_Process;
        processMap_["removeCustomDomain"] = removeCustomDomain_Process;
        processMap_["validateDomain"] = validateDomain_Process;
        processMap_["getDomainNameServers"] = getDomainNameServers_Process;
        processMap_["updateInviteProviders"] = updateInviteProviders_Process;
        processMap_["inspectLink"] = inspectLink_Process;
        processMap_["setPushCertificate"] = setPushCertificate_Process;
        processMap_["sendDeviceNotifications"] = sendDeviceNotifications_Process;
        processMap_["getDeviceNotificationsInfo"] = getDeviceNotificationsInfo_Process;
        processMap_["getAppActivities"] = getAppActivities_Process;
        processMap_["getAppComments"] = getAppComments_Process;
        processMap_["getAppActivity"] = getAppActivity_Process;
        processMap_["postAppActivity"] = postAppActivity_Process;
        processMap_["updateAppActivity"] = updateAppActivity_Process;
        processMap_["findAppTags"] = findAppTags_Process;
        processMap_["getAppFeedStickyActivities"] = getAppFeedStickyActivities_Process;
        processMap_["postAppFeedStickyActivity"] = postAppFeedStickyActivity_Process;
        processMap_["updateAppFeedStickyActivity"] = updateAppFeedStickyActivity_Process;
        processMap_["postAppComment"] = postAppComment_Process;
        processMap_["likeAppActivity"] = likeAppActivity_Process;
        processMap_["deleteAppActivities"] = deleteAppActivities_Process;
        processMap_["getAppActivityFeedList"] = getAppActivityFeedList_Process;
        processMap_["getActivitiesV2"] = getActivitiesV2_Process;
        processMap_["getActivityByID"] = getActivityByID_Process;
        processMap_["getAnnouncements"] = getAnnouncements_Process;
        processMap_["createActivity"] = createActivity_Process;
        processMap_["updateActivity"] = updateActivity_Process;
        processMap_["deleteActivities"] = deleteActivities_Process;
        processMap_["createAnnouncement"] = createAnnouncement_Process;
        processMap_["updateAnnouncement"] = updateAnnouncement_Process;
        processMap_["getReactions"] = getReactions_Process;
        processMap_["createReaction"] = createReaction_Process;
        processMap_["deleteReaction"] = deleteReaction_Process;
        processMap_["reportEntityV2"] = reportEntityV2_Process;
        processMap_["activityTrackView"] = activityTrackView_Process;
        processMap_["ddGetActivities"] = ddGetActivities_Process;
        processMap_["ddGetActivityByID"] = ddGetActivityByID_Process;
        processMap_["ddFindTags"] = ddFindTags_Process;
        processMap_["ddCreateActivity"] = ddCreateActivity_Process;
        processMap_["ddUpdateActivity"] = ddUpdateActivity_Process;
        processMap_["ddUpdateActivitiesStatus"] = ddUpdateActivitiesStatus_Process;
        processMap_["ddGetAnnouncements"] = ddGetAnnouncements_Process;
        processMap_["ddCreateAnnouncement"] = ddCreateAnnouncement_Process;
        processMap_["ddUpdateAnnouncement"] = ddUpdateAnnouncement_Process;
        processMap_["ddGetReactions"] = ddGetReactions_Process;
        processMap_["ddCreateReactions"] = ddCreateReactions_Process;
        processMap_["ddDeleteReactions"] = ddDeleteReactions_Process;
        processMap_["ddPurgeActivities"] = ddPurgeActivities_Process;
        processMap_["ddGetActivitiesForModeration"] = ddGetActivitiesForModeration_Process;
        processMap_["runETLQuery"] = runETLQuery_Process;
        processMap_["getETLQueryResults"] = getETLQueryResults_Process;
        processMap_["createCampaign"] = createCampaign_Process;
        processMap_["updateCampaign"] = updateCampaign_Process;
        processMap_["setMarketingLink"] = setMarketingLink_Process;
        processMap_["getMarketingLink"] = getMarketingLink_Process;
        processMap_["getCampaigns"] = getCampaigns_Process;
        processMap_["setBannerLink"] = setBannerLink_Process;
        processMap_["getBannerLink"] = getBannerLink_Process;
        processMap_["getBannerLinks"] = getBannerLinks_Process;
        processMap_["getReportedActivities"] = getReportedActivities_Process;
        processMap_["closeReports"] = closeReports_Process;
        processMap_["banUsers"] = banUsers_Process;
        processMap_["unbanUsers"] = unbanUsers_Process;
        processMap_["getBannedUsers"] = getBannedUsers_Process;
        processMap_["getAudiences"] = getAudiences_Process;
        processMap_["setAudience"] = setAudience_Process;
        processMap_["getAudience"] = getAudience_Process;
        processMap_["deleteAudience"] = deleteAudience_Process;
        processMap_["getWebhookEvents"] = getWebhookEvents_Process;
        processMap_["getWebhookSettings"] = getWebhookSettings_Process;
        processMap_["updateWebhookSettings"] = updateWebhookSettings_Process;
        processMap_["setTestDevice"] = setTestDevice_Process;
        processMap_["getTestDevices"] = getTestDevices_Process;
        processMap_["getTestDeviceRemoteLogs"] = getTestDeviceRemoteLogs_Process;
        processMap_["deleteTestDevice"] = deleteTestDevice_Process;
        processMap_["describeNotifications"] = describeNotifications_Process;
        processMap_["getNotificationsTexts"] = getNotificationsTexts_Process;
        processMap_["getTargetedNotifications"] = getTargetedNotifications_Process;
        processMap_["setTargetedNotification"] = setTargetedNotification_Process;
        processMap_["cancelTargetedNotification"] = cancelTargetedNotification_Process;
        processMap_["setTemplate"] = setTemplate_Process;
        processMap_["deleteTemplate"] = deleteTemplate_Process;
        processMap_["getTemplates"] = getTemplates_Process;
        processMap_["getCompanyApiKeys"] = getCompanyApiKeys_Process;
        processMap_["setCompanyApiKey"] = setCompanyApiKey_Process;
        processMap_["getEstimatedBalance"] = getEstimatedBalance_Process;
        processMap_["getInvoices"] = getInvoices_Process;
        processMap_["getPaymentMethod"] = getPaymentMethod_Process;
        processMap_["setCreditCard"] = setCreditCard_Process;
        processMap_["getPaymentIntentClientSecret"] = getPaymentIntentClientSecret_Process;
        processMap_["getSFTriggers"] = getSFTriggers_Process;
        processMap_["setSFTrigger"] = setSFTrigger_Process;
        processMap_["deleteSFTrigger"] = deleteSFTrigger_Process;
        processMap_["getSFActions"] = getSFActions_Process;
        processMap_["setSFAction"] = setSFAction_Process;
        processMap_["deleteSFAction"] = deleteSFAction_Process;
        processMap_["notificationTemplateInUse"] = notificationTemplateInUse_Process;
        processMap_["audienceInUse"] = audienceInUse_Process;
        processMap_["getPromoCodes"] = getPromoCodes_Process;
        processMap_["deletePromoCode"] = deletePromoCode_Process;
        processMap_["ddFindUsers"] = ddFindUsers_Process;
        processMap_["parseIAP"] = parseIAP_Process;
        processMap_["validateIAP"] = validateIAP_Process;
        processMap_["trackLatency"] = trackLatency_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void echo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        echo_args args = new echo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        echo_result result = new echo_result();
        try
        {
          result.Success = iface_.echo(args.Text);
          oprot.WriteMessageBegin(new TMessage("echo", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("echo", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void authenticateSdk_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        authenticateSdk_args args = new authenticateSdk_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        authenticateSdk_result result = new authenticateSdk_result();
        try
        {
          try
          {
            result.Success = iface_.authenticateSdk(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("authenticateSdk", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("authenticateSdk", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void authenticateSdkAllInOne_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        authenticateSdkAllInOne_args args = new authenticateSdkAllInOne_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        authenticateSdkAllInOne_result result = new authenticateSdkAllInOne_result();
        try
        {
          try
          {
            result.Success = iface_.authenticateSdkAllInOne(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("authenticateSdkAllInOne", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("authenticateSdkAllInOne", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateSession_args args = new updateSession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateSession_result result = new updateSession_result();
        try
        {
          try
          {
            result.Success = iface_.updateSession(args.SessionId, args.SuperProperties);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("updateSession", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateSession", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateUser_args args = new updateUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateUser_result result = new updateUser_result();
        try
        {
          try
          {
            result.Success = iface_.updateUser(args.SessionId, args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("updateUser", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateUser", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addIdentity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addIdentity_args args = new addIdentity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addIdentity_result result = new addIdentity_result();
        try
        {
          try
          {
            result.Success = iface_.addIdentity(args.SessionId, args.Identity);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("addIdentity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("addIdentity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeIdentity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeIdentity_args args = new removeIdentity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeIdentity_result result = new removeIdentity_result();
        try
        {
          try
          {
            result.Success = iface_.removeIdentity(args.SessionId, args.Identity);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("removeIdentity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("removeIdentity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPrivateUserByIdentity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPrivateUserByIdentity_args args = new getPrivateUserByIdentity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPrivateUserByIdentity_result result = new getPrivateUserByIdentity_result();
        try
        {
          try
          {
            result.Success = iface_.getPrivateUserByIdentity(args.SessionId, args.Identity);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getPrivateUserByIdentity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getPrivateUserByIdentity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPublicUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPublicUser_args args = new getPublicUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPublicUser_result result = new getPublicUser_result();
        try
        {
          try
          {
            result.Success = iface_.getPublicUser(args.SessionId, args.Id);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getPublicUser", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getPublicUser", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUsers_args args = new getUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUsers_result result = new getUsers_result();
        try
        {
          try
          {
            result.Success = iface_.getUsers(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getUsers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getUsers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUsersById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUsersById_args args = new getUsersById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUsersById_result result = new getUsersById_result();
        try
        {
          try
          {
            result.Success = iface_.getUsersById(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getUsersById", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getUsersById", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPublicUsersByIdentity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPublicUsersByIdentity_args args = new getPublicUsersByIdentity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPublicUsersByIdentity_result result = new getPublicUsersByIdentity_result();
        try
        {
          try
          {
            result.Success = iface_.getPublicUsersByIdentity(args.SessionId, args.Provider, args.ProviderIds);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getPublicUsersByIdentity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getPublicUsersByIdentity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findUsers_args args = new findUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findUsers_result result = new findUsers_result();
        try
        {
          try
          {
            result.Success = iface_.findUsers(args.SessionId, args.Query);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("findUsers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("findUsers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addFriend_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addFriend_args args = new addFriend_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addFriend_result result = new addFriend_result();
        try
        {
          try
          {
            result.Success = iface_.addFriend(args.SessionId, args.UserId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("addFriend", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("addFriend", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addFriends_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addFriends_args args = new addFriends_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addFriends_result result = new addFriends_result();
        try
        {
          try
          {
            result.Success = iface_.addFriends(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("addFriends", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("addFriends", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addFriendsByIdentity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addFriendsByIdentity_args args = new addFriendsByIdentity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addFriendsByIdentity_result result = new addFriendsByIdentity_result();
        try
        {
          try
          {
            result.Success = iface_.addFriendsByIdentity(args.SessionId, args.Provider, args.ProviderIds);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("addFriendsByIdentity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("addFriendsByIdentity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeFriend_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeFriend_args args = new removeFriend_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeFriend_result result = new removeFriend_result();
        try
        {
          try
          {
            result.Success = iface_.removeFriend(args.SessionId, args.UserId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("removeFriend", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("removeFriend", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeFriends_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeFriends_args args = new removeFriends_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeFriends_result result = new removeFriends_result();
        try
        {
          try
          {
            result.Success = iface_.removeFriends(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("removeFriends", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("removeFriends", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setFriends_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setFriends_args args = new setFriends_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setFriends_result result = new setFriends_result();
        try
        {
          try
          {
            result.Success = iface_.setFriends(args.SessionId, args.UserIds);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("setFriends", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("setFriends", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeFriendsByIdentity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeFriendsByIdentity_args args = new removeFriendsByIdentity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeFriendsByIdentity_result result = new removeFriendsByIdentity_result();
        try
        {
          try
          {
            result.Success = iface_.removeFriendsByIdentity(args.SessionId, args.Provider, args.ProviderIds);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("removeFriendsByIdentity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("removeFriendsByIdentity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setFriendsByIdentity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setFriendsByIdentity_args args = new setFriendsByIdentity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setFriendsByIdentity_result result = new setFriendsByIdentity_result();
        try
        {
          try
          {
            result.Success = iface_.setFriendsByIdentity(args.SessionId, args.Provider, args.ProviderIds);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("setFriendsByIdentity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("setFriendsByIdentity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void isFriend_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        isFriend_args args = new isFriend_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        isFriend_result result = new isFriend_result();
        try
        {
          try
          {
            result.Success = iface_.isFriend(args.SessionId, args.UserId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("isFriend", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("isFriend", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void areFriends_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        areFriends_args args = new areFriends_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        areFriends_result result = new areFriends_result();
        try
        {
          try
          {
            result.Success = iface_.areFriends(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("areFriends", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("areFriends", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getFriendsCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getFriendsCount_args args = new getFriendsCount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getFriendsCount_result result = new getFriendsCount_result();
        try
        {
          try
          {
            result.Success = iface_.getFriendsCount(args.SessionId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getFriendsCount", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getFriendsCount", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getFriends_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getFriends_args args = new getFriends_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getFriends_result result = new getFriends_result();
        try
        {
          try
          {
            result.Success = iface_.getFriends(args.SessionId, args.Offset, args.Limit);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getFriends", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getFriends", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getFriendsV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getFriendsV2_args args = new getFriendsV2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getFriendsV2_result result = new getFriendsV2_result();
        try
        {
          try
          {
            result.Success = iface_.getFriendsV2(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getFriendsV2", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getFriendsV2", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSuggestedFriends_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSuggestedFriends_args args = new getSuggestedFriends_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSuggestedFriends_result result = new getSuggestedFriends_result();
        try
        {
          try
          {
            result.Success = iface_.getSuggestedFriends(args.SessionId, args.Offset, args.Limit);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getSuggestedFriends", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getSuggestedFriends", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSuggestedFriendsV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSuggestedFriendsV2_args args = new getSuggestedFriendsV2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSuggestedFriendsV2_result result = new getSuggestedFriendsV2_result();
        try
        {
          try
          {
            result.Success = iface_.getSuggestedFriendsV2(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getSuggestedFriendsV2", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getSuggestedFriendsV2", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getMentionFriends_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getMentionFriends_args args = new getMentionFriends_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getMentionFriends_result result = new getMentionFriends_result();
        try
        {
          try
          {
            result.Success = iface_.getMentionFriends(args.SessionId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getMentionFriends", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getMentionFriends", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTopics_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTopics_args args = new getTopics_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTopics_result result = new getTopics_result();
        try
        {
          try
          {
            result.Success = iface_.getTopics(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getTopics", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getTopics", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTopic_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTopic_args args = new getTopic_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTopic_result result = new getTopic_result();
        try
        {
          try
          {
            result.Success = iface_.getTopic(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getTopic", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getTopic", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void followEntities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        followEntities_args args = new followEntities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        followEntities_result result = new followEntities_result();
        try
        {
          try
          {
            result.Success = iface_.followEntities(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("followEntities", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("followEntities", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void unfollowEntities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        unfollowEntities_args args = new unfollowEntities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        unfollowEntities_result result = new unfollowEntities_result();
        try
        {
          try
          {
            result.Success = iface_.unfollowEntities(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("unfollowEntities", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("unfollowEntities", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getEntityFollowers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getEntityFollowers_args args = new getEntityFollowers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getEntityFollowers_result result = new getEntityFollowers_result();
        try
        {
          try
          {
            result.Success = iface_.getEntityFollowers(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getEntityFollowers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getEntityFollowers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void isFollowing_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        isFollowing_args args = new isFollowing_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        isFollowing_result result = new isFollowing_result();
        try
        {
          try
          {
            result.Success = iface_.isFollowing(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("isFollowing", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("isFollowing", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddGetTopics_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddGetTopics_args args = new ddGetTopics_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddGetTopics_result result = new ddGetTopics_result();
        try
        {
          try
          {
            result.Success = iface_.ddGetTopics(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddGetTopics", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddGetTopics", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddGetTopic_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddGetTopic_args args = new ddGetTopic_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddGetTopic_result result = new ddGetTopic_result();
        try
        {
          try
          {
            result.Success = iface_.ddGetTopic(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddGetTopic", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddGetTopic", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddCreateTopic_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddCreateTopic_args args = new ddCreateTopic_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddCreateTopic_result result = new ddCreateTopic_result();
        try
        {
          try
          {
            result.Success = iface_.ddCreateTopic(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddCreateTopic", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddCreateTopic", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddUpdateTopic_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddUpdateTopic_args args = new ddUpdateTopic_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddUpdateTopic_result result = new ddUpdateTopic_result();
        try
        {
          try
          {
            result.Success = iface_.ddUpdateTopic(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddUpdateTopic", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddUpdateTopic", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddDeleteTopics_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddDeleteTopics_args args = new ddDeleteTopics_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddDeleteTopics_result result = new ddDeleteTopics_result();
        try
        {
          try
          {
            result.Success = iface_.ddDeleteTopics(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddDeleteTopics", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddDeleteTopics", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddGetEntityFollowers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddGetEntityFollowers_args args = new ddGetEntityFollowers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddGetEntityFollowers_result result = new ddGetEntityFollowers_result();
        try
        {
          try
          {
            result.Success = iface_.ddGetEntityFollowers(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddGetEntityFollowers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddGetEntityFollowers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createGroup_args args = new createGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createGroup_result result = new createGroup_result();
        try
        {
          try
          {
            result.Success = iface_.createGroup(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("createGroup", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("createGroup", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateGroup_args args = new updateGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateGroup_result result = new updateGroup_result();
        try
        {
          try
          {
            result.Success = iface_.updateGroup(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("updateGroup", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateGroup", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteGroups_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteGroups_args args = new deleteGroups_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteGroups_result result = new deleteGroups_result();
        try
        {
          try
          {
            result.Success = iface_.deleteGroups(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("deleteGroups", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("deleteGroups", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getGroups_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getGroups_args args = new getGroups_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getGroups_result result = new getGroups_result();
        try
        {
          try
          {
            result.Success = iface_.getGroups(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getGroups", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getGroups", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getGroup_args args = new getGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getGroup_result result = new getGroup_result();
        try
        {
          try
          {
            result.Success = iface_.getGroup(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getGroup", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getGroup", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateGroupMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateGroupMembers_args args = new updateGroupMembers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateGroupMembers_result result = new updateGroupMembers_result();
        try
        {
          try
          {
            result.Success = iface_.updateGroupMembers(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("updateGroupMembers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateGroupMembers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeGroupMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeGroupMembers_args args = new removeGroupMembers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeGroupMembers_result result = new removeGroupMembers_result();
        try
        {
          try
          {
            result.Success = iface_.removeGroupMembers(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("removeGroupMembers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("removeGroupMembers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void areGroupMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        areGroupMembers_args args = new areGroupMembers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        areGroupMembers_result result = new areGroupMembers_result();
        try
        {
          try
          {
            result.Success = iface_.areGroupMembers(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("areGroupMembers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("areGroupMembers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getGroupMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getGroupMembers_args args = new getGroupMembers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getGroupMembers_result result = new getGroupMembers_result();
        try
        {
          try
          {
            result.Success = iface_.getGroupMembers(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getGroupMembers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getGroupMembers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddCreateGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddCreateGroup_args args = new ddCreateGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddCreateGroup_result result = new ddCreateGroup_result();
        try
        {
          try
          {
            result.Success = iface_.ddCreateGroup(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddCreateGroup", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddCreateGroup", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddUpdateGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddUpdateGroup_args args = new ddUpdateGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddUpdateGroup_result result = new ddUpdateGroup_result();
        try
        {
          try
          {
            result.Success = iface_.ddUpdateGroup(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddUpdateGroup", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddUpdateGroup", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddDeleteGroups_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddDeleteGroups_args args = new ddDeleteGroups_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddDeleteGroups_result result = new ddDeleteGroups_result();
        try
        {
          try
          {
            result.Success = iface_.ddDeleteGroups(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddDeleteGroups", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddDeleteGroups", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddGetGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddGetGroup_args args = new ddGetGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddGetGroup_result result = new ddGetGroup_result();
        try
        {
          try
          {
            result.Success = iface_.ddGetGroup(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddGetGroup", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddGetGroup", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddGetGroups_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddGetGroups_args args = new ddGetGroups_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddGetGroups_result result = new ddGetGroups_result();
        try
        {
          try
          {
            result.Success = iface_.ddGetGroups(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddGetGroups", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddGetGroups", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddGetGroupMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddGetGroupMembers_args args = new ddGetGroupMembers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddGetGroupMembers_result result = new ddGetGroupMembers_result();
        try
        {
          try
          {
            result.Success = iface_.ddGetGroupMembers(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddGetGroupMembers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddGetGroupMembers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddUpdateGroupMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddUpdateGroupMembers_args args = new ddUpdateGroupMembers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddUpdateGroupMembers_result result = new ddUpdateGroupMembers_result();
        try
        {
          try
          {
            result.Success = iface_.ddUpdateGroupMembers(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddUpdateGroupMembers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddUpdateGroupMembers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddRemoveGroupMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddRemoveGroupMembers_args args = new ddRemoveGroupMembers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddRemoveGroupMembers_result result = new ddRemoveGroupMembers_result();
        try
        {
          try
          {
            result.Success = iface_.ddRemoveGroupMembers(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddRemoveGroupMembers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddRemoveGroupMembers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getChats_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getChats_args args = new getChats_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getChats_result result = new getChats_result();
        try
        {
          try
          {
            result.Success = iface_.getChats(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getChats", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getChats", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getChat_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getChat_args args = new getChat_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getChat_result result = new getChat_result();
        try
        {
          try
          {
            result.Success = iface_.getChat(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getChat", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getChat", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getChatMessages_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getChatMessages_args args = new getChatMessages_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getChatMessages_result result = new getChatMessages_result();
        try
        {
          try
          {
            result.Success = iface_.getChatMessages(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getChatMessages", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getChatMessages", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendChatMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendChatMessage_args args = new sendChatMessage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendChatMessage_result result = new sendChatMessage_result();
        try
        {
          try
          {
            result.Success = iface_.sendChatMessage(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("sendChatMessage", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("sendChatMessage", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createInviteUrl_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createInviteUrl_args args = new createInviteUrl_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createInviteUrl_result result = new createInviteUrl_result();
        try
        {
          try
          {
            result.Success = iface_.createInviteUrl(args.SessionId, args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("createInviteUrl", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("createInviteUrl", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createInvite_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createInvite_args args = new createInvite_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createInvite_result result = new createInvite_result();
        try
        {
          try
          {
            result.Success = iface_.createInvite(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("createInvite", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("createInvite", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getInviteProviders_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getInviteProviders_args args = new getInviteProviders_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getInviteProviders_result result = new getInviteProviders_result();
        try
        {
          try
          {
            result.Success = iface_.getInviteProviders(args.SessionId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getInviteProviders", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getInviteProviders", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAvailableInviteChannels_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAvailableInviteChannels_args args = new getAvailableInviteChannels_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAvailableInviteChannels_result result = new getAvailableInviteChannels_result();
        try
        {
          try
          {
            result.Success = iface_.getAvailableInviteChannels(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getAvailableInviteChannels", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getAvailableInviteChannels", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void processAppOpen_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        processAppOpen_args args = new processAppOpen_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        processAppOpen_result result = new processAppOpen_result();
        try
        {
          try
          {
            result.Success = iface_.processAppOpen(args.SessionId, args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("processAppOpen", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("processAppOpen", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getReferredUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getReferredUsers_args args = new getReferredUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getReferredUsers_result result = new getReferredUsers_result();
        try
        {
          try
          {
            result.Success = iface_.getReferredUsers(args.SessionId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getReferredUsers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getReferredUsers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getReferredUsersV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getReferredUsersV2_args args = new getReferredUsersV2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getReferredUsersV2_result result = new getReferredUsersV2_result();
        try
        {
          try
          {
            result.Success = iface_.getReferredUsersV2(args.SessionId, args.Event, args.Offset, args.Limit);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getReferredUsersV2", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getReferredUsersV2", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getReferrerUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getReferrerUsers_args args = new getReferrerUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getReferrerUsers_result result = new getReferrerUsers_result();
        try
        {
          try
          {
            result.Success = iface_.getReferrerUsers(args.SessionId, args.Event, args.Offset, args.Limit);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getReferrerUsers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getReferrerUsers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setReferrer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setReferrer_args args = new setReferrer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setReferrer_result result = new setReferrer_result();
        try
        {
          try
          {
            result.Success = iface_.setReferrer(args.SessionId, args.ReferrerId, args.Event, args.CustomData);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("setReferrer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("setReferrer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddGetReferredUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddGetReferredUsers_args args = new ddGetReferredUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddGetReferredUsers_result result = new ddGetReferredUsers_result();
        try
        {
          try
          {
            result.Success = iface_.ddGetReferredUsers(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddGetReferredUsers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddGetReferredUsers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddGetReferrerUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddGetReferrerUsers_args args = new ddGetReferrerUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddGetReferrerUsers_result result = new ddGetReferrerUsers_result();
        try
        {
          try
          {
            result.Success = iface_.ddGetReferrerUsers(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddGetReferrerUsers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddGetReferrerUsers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void processCrossPromoClick_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        processCrossPromoClick_args args = new processCrossPromoClick_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        processCrossPromoClick_result result = new processCrossPromoClick_result();
        try
        {
          try
          {
            result.Success = iface_.processCrossPromoClick(args.SessionId, args.Link);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("processCrossPromoClick", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("processCrossPromoClick", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getActivities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getActivities_args args = new getActivities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getActivities_result result = new getActivities_result();
        try
        {
          try
          {
            result.Success = iface_.getActivities(args.SessionId, args.Feed, args.Query);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getActivities", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getActivities", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getStickyActivities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getStickyActivities_args args = new getStickyActivities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getStickyActivities_result result = new getStickyActivities_result();
        try
        {
          try
          {
            result.Success = iface_.getStickyActivities(args.SessionId, args.Feed);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getStickyActivities", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getStickyActivities", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getComments_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getComments_args args = new getComments_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getComments_result result = new getComments_result();
        try
        {
          try
          {
            result.Success = iface_.getComments(args.SessionId, args.ActivityId, args.Query);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getComments", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getComments", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findTags_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findTags_args args = new findTags_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findTags_result result = new findTags_result();
        try
        {
          try
          {
            result.Success = iface_.findTags(args.SessionId, args.Query);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("findTags", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("findTags", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findTagsV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findTagsV2_args args = new findTagsV2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findTagsV2_result result = new findTagsV2_result();
        try
        {
          try
          {
            result.Success = iface_.findTagsV2(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("findTagsV2", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("findTagsV2", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getActivity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getActivity_args args = new getActivity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getActivity_result result = new getActivity_result();
        try
        {
          try
          {
            result.Success = iface_.getActivity(args.SessionId, args.ActivityId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getActivity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getActivity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void postActivity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        postActivity_args args = new postActivity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        postActivity_result result = new postActivity_result();
        try
        {
          try
          {
            result.Success = iface_.postActivity(args.SessionId, args.Feed, args.ActivityPostContent);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("postActivity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("postActivity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void postComment_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        postComment_args args = new postComment_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        postComment_result result = new postComment_result();
        try
        {
          try
          {
            result.Success = iface_.postComment(args.SessionId, args.ActivityId, args.ActivityPostContent);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("postComment", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("postComment", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void likeActivity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        likeActivity_args args = new likeActivity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        likeActivity_result result = new likeActivity_result();
        try
        {
          try
          {
            result.Success = iface_.likeActivity(args.SessionId, args.ActivityId, args.IsLiked);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("likeActivity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("likeActivity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getActivityLikers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getActivityLikers_args args = new getActivityLikers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getActivityLikers_result result = new getActivityLikers_result();
        try
        {
          try
          {
            result.Success = iface_.getActivityLikers(args.SessionId, args.ActivityId, args.Offset, args.Limit);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getActivityLikers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getActivityLikers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteActivity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteActivity_args args = new deleteActivity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteActivity_result result = new deleteActivity_result();
        try
        {
          try
          {
            result.Success = iface_.deleteActivity(args.SessionId, args.ActivityId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("deleteActivity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("deleteActivity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeActivities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeActivities_args args = new removeActivities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeActivities_result result = new removeActivities_result();
        try
        {
          try
          {
            result.Success = iface_.removeActivities(args.SessionId, args.ActivityIds);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("removeActivities", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("removeActivities", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reportActivity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reportActivity_args args = new reportActivity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reportActivity_result result = new reportActivity_result();
        try
        {
          try
          {
            result.Success = iface_.reportActivity(args.SessionId, args.ActivityId, args.ReportingReason);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("reportActivity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("reportActivity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void trackAnalyticsEvents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        trackAnalyticsEvents_args args = new trackAnalyticsEvents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        trackAnalyticsEvents_result result = new trackAnalyticsEvents_result();
        try
        {
          try
          {
            result.Success = iface_.trackAnalyticsEvents(args.SessionId, args.CommonProperties, args.Events);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("trackAnalyticsEvents", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("trackAnalyticsEvents", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void registerPushTarget_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        registerPushTarget_args args = new registerPushTarget_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        registerPushTarget_result result = new registerPushTarget_result();
        try
        {
          try
          {
            result.Success = iface_.registerPushTarget(args.SessionId, args.PushTargetData);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("registerPushTarget", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("registerPushTarget", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setPushNotificationsEnabled_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setPushNotificationsEnabled_args args = new setPushNotificationsEnabled_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setPushNotificationsEnabled_result result = new setPushNotificationsEnabled_result();
        try
        {
          try
          {
            result.Success = iface_.setPushNotificationsEnabled(args.SessionId, args.Enabled);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("setPushNotificationsEnabled", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("setPushNotificationsEnabled", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void isPushNotificationsEnabled_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        isPushNotificationsEnabled_args args = new isPushNotificationsEnabled_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        isPushNotificationsEnabled_result result = new isPushNotificationsEnabled_result();
        try
        {
          try
          {
            result.Success = iface_.isPushNotificationsEnabled(args.SessionId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("isPushNotificationsEnabled", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("isPushNotificationsEnabled", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendPushNotification_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendPushNotification_args args = new sendPushNotification_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendPushNotification_result result = new sendPushNotification_result();
        try
        {
          try
          {
            result.Success = iface_.sendPushNotification(args.SessionId, args.Notification);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("sendPushNotification", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("sendPushNotification", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendNotification_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendNotification_args args = new sendNotification_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendNotification_result result = new sendNotification_result();
        try
        {
          try
          {
            result.Success = iface_.sendNotification(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("sendNotification", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("sendNotification", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getNotificationsList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNotificationsList_args args = new getNotificationsList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNotificationsList_result result = new getNotificationsList_result();
        try
        {
          try
          {
            result.Success = iface_.getNotificationsList(args.SessionId, args.Query);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getNotificationsList", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getNotificationsList", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getNotificationsCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNotificationsCount_args args = new getNotificationsCount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNotificationsCount_result result = new getNotificationsCount_result();
        try
        {
          try
          {
            result.Success = iface_.getNotificationsCount(args.SessionId, args.Query);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getNotificationsCount", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getNotificationsCount", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setNotificationsStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setNotificationsStatus_args args = new setNotificationsStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setNotificationsStatus_result result = new setNotificationsStatus_result();
        try
        {
          try
          {
            result.Success = iface_.setNotificationsStatus(args.SessionId, args.Query);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("setNotificationsStatus", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("setNotificationsStatus", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getNotifications_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNotifications_args args = new getNotifications_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNotifications_result result = new getNotifications_result();
        try
        {
          try
          {
            result.Success = iface_.getNotifications(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getNotifications", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getNotifications", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void claimPromoCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        claimPromoCode_args args = new claimPromoCode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        claimPromoCode_result result = new claimPromoCode_result();
        try
        {
          try
          {
            result.Success = iface_.claimPromoCode(args.SessionId, args.Code);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("claimPromoCode", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("claimPromoCode", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPromoCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPromoCode_args args = new getPromoCode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPromoCode_result result = new getPromoCode_result();
        try
        {
          try
          {
            result.Success = iface_.getPromoCode(args.SessionId, args.Code);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getPromoCode", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getPromoCode", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setPromoCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setPromoCode_args args = new setPromoCode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setPromoCode_result result = new setPromoCode_result();
        try
        {
          try
          {
            result.Success = iface_.setPromoCode(args.SessionId, args.Code);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("setPromoCode", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("setPromoCode", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createPromoCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createPromoCode_args args = new createPromoCode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createPromoCode_result result = new createPromoCode_result();
        try
        {
          try
          {
            result.Success = iface_.createPromoCode(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("createPromoCode", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("createPromoCode", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPromoCodeV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPromoCodeV2_args args = new getPromoCodeV2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPromoCodeV2_result result = new getPromoCodeV2_result();
        try
        {
          try
          {
            result.Success = iface_.getPromoCodeV2(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getPromoCodeV2", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getPromoCodeV2", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void claimPromoCodeV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        claimPromoCodeV2_args args = new claimPromoCodeV2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        claimPromoCodeV2_result result = new claimPromoCodeV2_result();
        try
        {
          try
          {
            result.Success = iface_.claimPromoCodeV2(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("claimPromoCodeV2", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("claimPromoCodeV2", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getInviteProvidersByApp_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getInviteProvidersByApp_args args = new getInviteProvidersByApp_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getInviteProvidersByApp_result result = new getInviteProvidersByApp_result();
        try
        {
          try
          {
            result.Success = iface_.getInviteProvidersByApp(args.SessionId, args.AppId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getInviteProvidersByApp", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getInviteProvidersByApp", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTokenInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTokenInfo_args args = new getTokenInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTokenInfo_result result = new getTokenInfo_result();
        try
        {
          try
          {
            result.Success = iface_.getTokenInfo(args.SessionId, args.Token);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getTokenInfo", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getTokenInfo", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void trackAnalyticsEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        trackAnalyticsEvent_args args = new trackAnalyticsEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        trackAnalyticsEvent_result result = new trackAnalyticsEvent_result();
        try
        {
          try
          {
            result.Success = iface_.trackAnalyticsEvent(args.SessionId, args.Event);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("trackAnalyticsEvent", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("trackAnalyticsEvent", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void trackInstall_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        trackInstall_args args = new trackInstall_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        trackInstall_result result = new trackInstall_result();
        try
        {
          try
          {
            result.Success = iface_.trackInstall(args.SessionId, args.Fingerprint, args.Referrer);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("trackInstall", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("trackInstall", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUploadURL_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUploadURL_args args = new getUploadURL_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUploadURL_result result = new getUploadURL_result();
        try
        {
          try
          {
            result.Success = iface_.getUploadURL(args.SessionId, args.UploadParams);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getUploadURL", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getUploadURL", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void login_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        login_args args = new login_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        login_result result = new login_result();
        try
        {
          try
          {
            result.Success = iface_.login(args.Email, args.Password);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("login", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("login", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void loginWithSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        loginWithSession_args args = new loginWithSession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        loginWithSession_result result = new loginWithSession_result();
        try
        {
          try
          {
            result.Success = iface_.loginWithSession(args.SessionId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("loginWithSession", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("loginWithSession", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getOAuthLoginURL_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getOAuthLoginURL_args args = new getOAuthLoginURL_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getOAuthLoginURL_result result = new getOAuthLoginURL_result();
        try
        {
          try
          {
            result.Success = iface_.getOAuthLoginURL(args.Provider);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getOAuthLoginURL", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getOAuthLoginURL", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void loginWithOAuthCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        loginWithOAuthCode_args args = new loginWithOAuthCode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        loginWithOAuthCode_result result = new loginWithOAuthCode_result();
        try
        {
          try
          {
            result.Success = iface_.loginWithOAuthCode(args.Provider, args.Code, args.Referrer);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("loginWithOAuthCode", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("loginWithOAuthCode", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void loginETLOnly_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        loginETLOnly_args args = new loginETLOnly_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        loginETLOnly_result result = new loginETLOnly_result();
        try
        {
          try
          {
            result.Success = iface_.loginETLOnly(args.AppId, args.Token);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("loginETLOnly", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("loginETLOnly", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void logout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        logout_args args = new logout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        logout_result result = new logout_result();
        try
        {
          try
          {
            iface_.logout(args.SessionId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("logout", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("logout", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void registerAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        registerAccount_args args = new registerAccount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        registerAccount_result result = new registerAccount_result();
        try
        {
          try
          {
            result.Success = iface_.registerAccount(args.Email, args.Password, args.CompanyName, args.Referrer);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("registerAccount", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("registerAccount", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void registerUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        registerUser_args args = new registerUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        registerUser_result result = new registerUser_result();
        try
        {
          try
          {
            result.Success = iface_.registerUser(args.Email, args.Password, args.Referrer);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("registerUser", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("registerUser", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createApplication_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createApplication_args args = new createApplication_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createApplication_result result = new createApplication_result();
        try
        {
          try
          {
            result.Success = iface_.createApplication(args.SessionId, args.CompanyId, args.Name);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("createApplication", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("createApplication", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateApplication_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateApplication_args args = new updateApplication_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateApplication_result result = new updateApplication_result();
        try
        {
          try
          {
            result.Success = iface_.updateApplication(args.SessionId, args.App);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("updateApplication", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateApplication", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteApplication_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteApplication_args args = new deleteApplication_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteApplication_result result = new deleteApplication_result();
        try
        {
          try
          {
            result.Success = iface_.deleteApplication(args.SessionId, args.AppId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("deleteApplication", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("deleteApplication", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addAppPlatform_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addAppPlatform_args args = new addAppPlatform_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addAppPlatform_result result = new addAppPlatform_result();
        try
        {
          try
          {
            result.Success = iface_.addAppPlatform(args.SessionId, args.AppId, args.Platform);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("addAppPlatform", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("addAppPlatform", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAppPlatforms_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAppPlatforms_args args = new getAppPlatforms_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAppPlatforms_result result = new getAppPlatforms_result();
        try
        {
          try
          {
            result.Success = iface_.getAppPlatforms(args.SessionId, args.AppId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getAppPlatforms", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getAppPlatforms", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateAppPlatform_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateAppPlatform_args args = new updateAppPlatform_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateAppPlatform_result result = new updateAppPlatform_result();
        try
        {
          try
          {
            result.Success = iface_.updateAppPlatform(args.SessionId, args.AppId, args.Platform);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("updateAppPlatform", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateAppPlatform", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteAppPlatform_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteAppPlatform_args args = new deleteAppPlatform_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteAppPlatform_result result = new deleteAppPlatform_result();
        try
        {
          try
          {
            result.Success = iface_.deleteAppPlatform(args.SessionId, args.AppId, args.PlatformId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("deleteAppPlatform", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("deleteAppPlatform", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAppAndPlatforms_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAppAndPlatforms_args args = new getAppAndPlatforms_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAppAndPlatforms_result result = new getAppAndPlatforms_result();
        try
        {
          try
          {
            result.Success = iface_.getAppAndPlatforms(args.SessionId, args.AppId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getAppAndPlatforms", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getAppAndPlatforms", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createTeamMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createTeamMember_args args = new createTeamMember_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createTeamMember_result result = new createTeamMember_result();
        try
        {
          try
          {
            result.Success = iface_.createTeamMember(args.SessionId, args.Member);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("createTeamMember", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("createTeamMember", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAllTeamMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAllTeamMembers_args args = new getAllTeamMembers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAllTeamMembers_result result = new getAllTeamMembers_result();
        try
        {
          try
          {
            result.Success = iface_.getAllTeamMembers(args.SessionId, args.CompanyId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getAllTeamMembers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getAllTeamMembers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateTeamMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateTeamMember_args args = new updateTeamMember_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateTeamMember_result result = new updateTeamMember_result();
        try
        {
          try
          {
            result.Success = iface_.updateTeamMember(args.SessionId, args.Member);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("updateTeamMember", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateTeamMember", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteTeamMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteTeamMember_args args = new deleteTeamMember_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteTeamMember_result result = new deleteTeamMember_result();
        try
        {
          try
          {
            result.Success = iface_.deleteTeamMember(args.SessionId, args.MemberId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("deleteTeamMember", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("deleteTeamMember", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCompany_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCompany_args args = new getCompany_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCompany_result result = new getCompany_result();
        try
        {
          try
          {
            result.Success = iface_.getCompany(args.SessionId, args.CompanyId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getCompany", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getCompany", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateCompany_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateCompany_args args = new updateCompany_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateCompany_result result = new updateCompany_result();
        try
        {
          try
          {
            result.Success = iface_.updateCompany(args.SessionId, args.Company);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("updateCompany", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateCompany", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendPasswordResetEmail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendPasswordResetEmail_args args = new sendPasswordResetEmail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendPasswordResetEmail_result result = new sendPasswordResetEmail_result();
        try
        {
          try
          {
            result.Success = iface_.sendPasswordResetEmail(args.Email);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("sendPasswordResetEmail", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("sendPasswordResetEmail", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void resetPassword_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        resetPassword_args args = new resetPassword_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        resetPassword_result result = new resetPassword_result();
        try
        {
          try
          {
            result.Success = iface_.resetPassword(args.Token, args.Email, args.Password, args.PasswordRepeat);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("resetPassword", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("resetPassword", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createPassword_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createPassword_args args = new createPassword_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createPassword_result result = new createPassword_result();
        try
        {
          try
          {
            result.Success = iface_.createPassword(args.Token, args.Email, args.Password, args.PasswordRepeat);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("createPassword", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("createPassword", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void extendSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        extendSession_args args = new extendSession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        extendSession_result result = new extendSession_result();
        try
        {
          try
          {
            result.Success = iface_.extendSession(args.SessionId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("extendSession", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("extendSession", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRemainingSessionTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRemainingSessionTime_args args = new getRemainingSessionTime_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRemainingSessionTime_result result = new getRemainingSessionTime_result();
        try
        {
          try
          {
            result.Success = iface_.getRemainingSessionTime(args.SessionId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getRemainingSessionTime", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getRemainingSessionTime", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void validatePasswordLink_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        validatePasswordLink_args args = new validatePasswordLink_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        validatePasswordLink_result result = new validatePasswordLink_result();
        try
        {
          result.Success = iface_.validatePasswordLink(args.Email, args.Hash);
          oprot.WriteMessageBegin(new TMessage("validatePasswordLink", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("validatePasswordLink", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPublicUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPublicUsers_args args = new getPublicUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPublicUsers_result result = new getPublicUsers_result();
        try
        {
          try
          {
            result.Success = iface_.getPublicUsers(args.SessionId, args.Ids);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getPublicUsers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getPublicUsers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findAppUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findAppUsers_args args = new findAppUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findAppUsers_result result = new findAppUsers_result();
        try
        {
          try
          {
            result.Success = iface_.findAppUsers(args.SessionId, args.AppId, args.Query);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("findAppUsers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("findAppUsers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateAppUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateAppUser_args args = new updateAppUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateAppUser_result result = new updateAppUser_result();
        try
        {
          try
          {
            result.Success = iface_.updateAppUser(args.SessionId, args.UserId, args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("updateAppUser", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateAppUser", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPrivateUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPrivateUser_args args = new getPrivateUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPrivateUser_result result = new getPrivateUser_result();
        try
        {
          try
          {
            result.Success = iface_.getPrivateUser(args.SessionId, args.UserId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getPrivateUser", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getPrivateUser", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateAppleAppSiteAssociation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateAppleAppSiteAssociation_args args = new updateAppleAppSiteAssociation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateAppleAppSiteAssociation_result result = new updateAppleAppSiteAssociation_result();
        try
        {
          try
          {
            result.Success = iface_.updateAppleAppSiteAssociation(args.SessionId, args.Prefix, args.InviteDomain);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("updateAppleAppSiteAssociation", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateAppleAppSiteAssociation", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateAndroidAppLinks_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateAndroidAppLinks_args args = new updateAndroidAppLinks_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateAndroidAppLinks_result result = new updateAndroidAppLinks_result();
        try
        {
          try
          {
            result.Success = iface_.updateAndroidAppLinks(args.SessionId, args.Prefix, args.InviteDomain);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("updateAndroidAppLinks", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateAndroidAppLinks", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void processCustomDomain_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        processCustomDomain_args args = new processCustomDomain_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        processCustomDomain_result result = new processCustomDomain_result();
        try
        {
          try
          {
            result.Success = iface_.processCustomDomain(args.SessionId, args.AppId, args.Domain);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("processCustomDomain", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("processCustomDomain", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeCustomDomain_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeCustomDomain_args args = new removeCustomDomain_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeCustomDomain_result result = new removeCustomDomain_result();
        try
        {
          try
          {
            result.Success = iface_.removeCustomDomain(args.SessionId, args.AppId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("removeCustomDomain", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("removeCustomDomain", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void validateDomain_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        validateDomain_args args = new validateDomain_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        validateDomain_result result = new validateDomain_result();
        try
        {
          try
          {
            result.Success = iface_.validateDomain(args.SessionId, args.AppId, args.Domain);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("validateDomain", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("validateDomain", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getDomainNameServers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getDomainNameServers_args args = new getDomainNameServers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getDomainNameServers_result result = new getDomainNameServers_result();
        try
        {
          try
          {
            result.Success = iface_.getDomainNameServers(args.SessionId, args.AppId, args.Domain);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getDomainNameServers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getDomainNameServers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateInviteProviders_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateInviteProviders_args args = new updateInviteProviders_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateInviteProviders_result result = new updateInviteProviders_result();
        try
        {
          try
          {
            result.Success = iface_.updateInviteProviders(args.SessionId, args.AppId, args.Providers);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("updateInviteProviders", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateInviteProviders", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void inspectLink_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        inspectLink_args args = new inspectLink_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        inspectLink_result result = new inspectLink_result();
        try
        {
          try
          {
            result.Success = iface_.inspectLink(args.SessionId, args.LinkUrl);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("inspectLink", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("inspectLink", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setPushCertificate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setPushCertificate_args args = new setPushCertificate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setPushCertificate_result result = new setPushCertificate_result();
        try
        {
          try
          {
            result.Success = iface_.setPushCertificate(args.SessionId, args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("setPushCertificate", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("setPushCertificate", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendDeviceNotifications_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendDeviceNotifications_args args = new sendDeviceNotifications_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendDeviceNotifications_result result = new sendDeviceNotifications_result();
        try
        {
          try
          {
            result.Success = iface_.sendDeviceNotifications(args.SessionId, args.AppId, args.Data, args.DeviceIds);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("sendDeviceNotifications", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("sendDeviceNotifications", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getDeviceNotificationsInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getDeviceNotificationsInfo_args args = new getDeviceNotificationsInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getDeviceNotificationsInfo_result result = new getDeviceNotificationsInfo_result();
        try
        {
          try
          {
            result.Success = iface_.getDeviceNotificationsInfo(args.SessionId, args.AppId, args.DeviceIds);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getDeviceNotificationsInfo", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getDeviceNotificationsInfo", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAppActivities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAppActivities_args args = new getAppActivities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAppActivities_result result = new getAppActivities_result();
        try
        {
          try
          {
            result.Success = iface_.getAppActivities(args.SessionId, args.AppId, args.Feed, args.Query);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getAppActivities", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getAppActivities", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAppComments_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAppComments_args args = new getAppComments_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAppComments_result result = new getAppComments_result();
        try
        {
          try
          {
            result.Success = iface_.getAppComments(args.SessionId, args.AppId, args.ActivityId, args.Query);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getAppComments", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getAppComments", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAppActivity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAppActivity_args args = new getAppActivity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAppActivity_result result = new getAppActivity_result();
        try
        {
          try
          {
            result.Success = iface_.getAppActivity(args.SessionId, args.AppId, args.ActivityId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getAppActivity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getAppActivity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void postAppActivity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        postAppActivity_args args = new postAppActivity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        postAppActivity_result result = new postAppActivity_result();
        try
        {
          try
          {
            result.Success = iface_.postAppActivity(args.SessionId, args.AppId, args.Feed, args.ActivityPostContent);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("postAppActivity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("postAppActivity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateAppActivity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateAppActivity_args args = new updateAppActivity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateAppActivity_result result = new updateAppActivity_result();
        try
        {
          try
          {
            result.Success = iface_.updateAppActivity(args.SessionId, args.AppId, args.ActivityId, args.ActivityPostContent);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("updateAppActivity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateAppActivity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findAppTags_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findAppTags_args args = new findAppTags_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findAppTags_result result = new findAppTags_result();
        try
        {
          try
          {
            result.Success = iface_.findAppTags(args.SessionId, args.AppId, args.Query);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("findAppTags", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("findAppTags", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAppFeedStickyActivities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAppFeedStickyActivities_args args = new getAppFeedStickyActivities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAppFeedStickyActivities_result result = new getAppFeedStickyActivities_result();
        try
        {
          try
          {
            result.Success = iface_.getAppFeedStickyActivities(args.SessionId, args.AppId, args.Feed);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getAppFeedStickyActivities", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getAppFeedStickyActivities", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void postAppFeedStickyActivity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        postAppFeedStickyActivity_args args = new postAppFeedStickyActivity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        postAppFeedStickyActivity_result result = new postAppFeedStickyActivity_result();
        try
        {
          try
          {
            result.Success = iface_.postAppFeedStickyActivity(args.SessionId, args.AppId, args.Feed, args.ActivityPostContent, args.StickyStart, args.StickyEnd);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("postAppFeedStickyActivity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("postAppFeedStickyActivity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateAppFeedStickyActivity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateAppFeedStickyActivity_args args = new updateAppFeedStickyActivity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateAppFeedStickyActivity_result result = new updateAppFeedStickyActivity_result();
        try
        {
          try
          {
            result.Success = iface_.updateAppFeedStickyActivity(args.SessionId, args.AppId, args.ActivityId, args.ActivityPostContent, args.StickyStart, args.StickyEnd);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("updateAppFeedStickyActivity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateAppFeedStickyActivity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void postAppComment_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        postAppComment_args args = new postAppComment_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        postAppComment_result result = new postAppComment_result();
        try
        {
          try
          {
            result.Success = iface_.postAppComment(args.SessionId, args.AppId, args.ActivityId, args.ActivityPostContent);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("postAppComment", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("postAppComment", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void likeAppActivity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        likeAppActivity_args args = new likeAppActivity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        likeAppActivity_result result = new likeAppActivity_result();
        try
        {
          try
          {
            result.Success = iface_.likeAppActivity(args.SessionId, args.AppId, args.ActivityId, args.IsLiked);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("likeAppActivity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("likeAppActivity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteAppActivities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteAppActivities_args args = new deleteAppActivities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteAppActivities_result result = new deleteAppActivities_result();
        try
        {
          try
          {
            result.Success = iface_.deleteAppActivities(args.SessionId, args.AppId, args.ActivityIds);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("deleteAppActivities", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("deleteAppActivities", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAppActivityFeedList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAppActivityFeedList_args args = new getAppActivityFeedList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAppActivityFeedList_result result = new getAppActivityFeedList_result();
        try
        {
          try
          {
            result.Success = iface_.getAppActivityFeedList(args.SessionId, args.AppId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getAppActivityFeedList", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getAppActivityFeedList", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getActivitiesV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getActivitiesV2_args args = new getActivitiesV2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getActivitiesV2_result result = new getActivitiesV2_result();
        try
        {
          try
          {
            result.Success = iface_.getActivitiesV2(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getActivitiesV2", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getActivitiesV2", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getActivityByID_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getActivityByID_args args = new getActivityByID_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getActivityByID_result result = new getActivityByID_result();
        try
        {
          try
          {
            result.Success = iface_.getActivityByID(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getActivityByID", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getActivityByID", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAnnouncements_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAnnouncements_args args = new getAnnouncements_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAnnouncements_result result = new getAnnouncements_result();
        try
        {
          try
          {
            result.Success = iface_.getAnnouncements(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getAnnouncements", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getAnnouncements", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createActivity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createActivity_args args = new createActivity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createActivity_result result = new createActivity_result();
        try
        {
          try
          {
            result.Success = iface_.createActivity(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("createActivity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("createActivity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateActivity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateActivity_args args = new updateActivity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateActivity_result result = new updateActivity_result();
        try
        {
          try
          {
            result.Success = iface_.updateActivity(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("updateActivity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateActivity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteActivities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteActivities_args args = new deleteActivities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteActivities_result result = new deleteActivities_result();
        try
        {
          try
          {
            result.Success = iface_.deleteActivities(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("deleteActivities", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("deleteActivities", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createAnnouncement_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createAnnouncement_args args = new createAnnouncement_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createAnnouncement_result result = new createAnnouncement_result();
        try
        {
          try
          {
            result.Success = iface_.createAnnouncement(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("createAnnouncement", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("createAnnouncement", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateAnnouncement_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateAnnouncement_args args = new updateAnnouncement_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateAnnouncement_result result = new updateAnnouncement_result();
        try
        {
          try
          {
            result.Success = iface_.updateAnnouncement(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("updateAnnouncement", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateAnnouncement", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getReactions_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getReactions_args args = new getReactions_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getReactions_result result = new getReactions_result();
        try
        {
          try
          {
            result.Success = iface_.getReactions(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getReactions", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getReactions", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createReaction_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createReaction_args args = new createReaction_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createReaction_result result = new createReaction_result();
        try
        {
          try
          {
            result.Success = iface_.createReaction(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("createReaction", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("createReaction", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteReaction_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteReaction_args args = new deleteReaction_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteReaction_result result = new deleteReaction_result();
        try
        {
          try
          {
            result.Success = iface_.deleteReaction(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("deleteReaction", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("deleteReaction", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reportEntityV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reportEntityV2_args args = new reportEntityV2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reportEntityV2_result result = new reportEntityV2_result();
        try
        {
          try
          {
            result.Success = iface_.reportEntityV2(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("reportEntityV2", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("reportEntityV2", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void activityTrackView_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        activityTrackView_args args = new activityTrackView_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        activityTrackView_result result = new activityTrackView_result();
        try
        {
          try
          {
            result.Success = iface_.activityTrackView(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("activityTrackView", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("activityTrackView", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddGetActivities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddGetActivities_args args = new ddGetActivities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddGetActivities_result result = new ddGetActivities_result();
        try
        {
          try
          {
            result.Success = iface_.ddGetActivities(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddGetActivities", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddGetActivities", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddGetActivityByID_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddGetActivityByID_args args = new ddGetActivityByID_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddGetActivityByID_result result = new ddGetActivityByID_result();
        try
        {
          try
          {
            result.Success = iface_.ddGetActivityByID(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddGetActivityByID", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddGetActivityByID", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddFindTags_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddFindTags_args args = new ddFindTags_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddFindTags_result result = new ddFindTags_result();
        try
        {
          try
          {
            result.Success = iface_.ddFindTags(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddFindTags", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddFindTags", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddCreateActivity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddCreateActivity_args args = new ddCreateActivity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddCreateActivity_result result = new ddCreateActivity_result();
        try
        {
          try
          {
            result.Success = iface_.ddCreateActivity(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddCreateActivity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddCreateActivity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddUpdateActivity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddUpdateActivity_args args = new ddUpdateActivity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddUpdateActivity_result result = new ddUpdateActivity_result();
        try
        {
          try
          {
            result.Success = iface_.ddUpdateActivity(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddUpdateActivity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddUpdateActivity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddUpdateActivitiesStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddUpdateActivitiesStatus_args args = new ddUpdateActivitiesStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddUpdateActivitiesStatus_result result = new ddUpdateActivitiesStatus_result();
        try
        {
          try
          {
            result.Success = iface_.ddUpdateActivitiesStatus(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddUpdateActivitiesStatus", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddUpdateActivitiesStatus", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddGetAnnouncements_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddGetAnnouncements_args args = new ddGetAnnouncements_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddGetAnnouncements_result result = new ddGetAnnouncements_result();
        try
        {
          try
          {
            result.Success = iface_.ddGetAnnouncements(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddGetAnnouncements", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddGetAnnouncements", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddCreateAnnouncement_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddCreateAnnouncement_args args = new ddCreateAnnouncement_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddCreateAnnouncement_result result = new ddCreateAnnouncement_result();
        try
        {
          try
          {
            result.Success = iface_.ddCreateAnnouncement(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddCreateAnnouncement", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddCreateAnnouncement", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddUpdateAnnouncement_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddUpdateAnnouncement_args args = new ddUpdateAnnouncement_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddUpdateAnnouncement_result result = new ddUpdateAnnouncement_result();
        try
        {
          try
          {
            result.Success = iface_.ddUpdateAnnouncement(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddUpdateAnnouncement", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddUpdateAnnouncement", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddGetReactions_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddGetReactions_args args = new ddGetReactions_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddGetReactions_result result = new ddGetReactions_result();
        try
        {
          try
          {
            result.Success = iface_.ddGetReactions(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddGetReactions", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddGetReactions", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddCreateReactions_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddCreateReactions_args args = new ddCreateReactions_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddCreateReactions_result result = new ddCreateReactions_result();
        try
        {
          try
          {
            result.Success = iface_.ddCreateReactions(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddCreateReactions", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddCreateReactions", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddDeleteReactions_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddDeleteReactions_args args = new ddDeleteReactions_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddDeleteReactions_result result = new ddDeleteReactions_result();
        try
        {
          try
          {
            result.Success = iface_.ddDeleteReactions(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddDeleteReactions", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddDeleteReactions", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddPurgeActivities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddPurgeActivities_args args = new ddPurgeActivities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddPurgeActivities_result result = new ddPurgeActivities_result();
        try
        {
          try
          {
            result.Success = iface_.ddPurgeActivities(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddPurgeActivities", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddPurgeActivities", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddGetActivitiesForModeration_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddGetActivitiesForModeration_args args = new ddGetActivitiesForModeration_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddGetActivitiesForModeration_result result = new ddGetActivitiesForModeration_result();
        try
        {
          try
          {
            result.Success = iface_.ddGetActivitiesForModeration(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddGetActivitiesForModeration", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddGetActivitiesForModeration", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void runETLQuery_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        runETLQuery_args args = new runETLQuery_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        runETLQuery_result result = new runETLQuery_result();
        try
        {
          try
          {
            result.Success = iface_.runETLQuery(args.SessionId, args.AppId, args.Queries);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("runETLQuery", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("runETLQuery", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getETLQueryResults_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getETLQueryResults_args args = new getETLQueryResults_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getETLQueryResults_result result = new getETLQueryResults_result();
        try
        {
          try
          {
            result.Success = iface_.getETLQueryResults(args.SessionId, args.QueryId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getETLQueryResults", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getETLQueryResults", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createCampaign_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createCampaign_args args = new createCampaign_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createCampaign_result result = new createCampaign_result();
        try
        {
          try
          {
            result.Success = iface_.createCampaign(args.SessionId, args.AppId, args.Name);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("createCampaign", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("createCampaign", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateCampaign_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateCampaign_args args = new updateCampaign_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateCampaign_result result = new updateCampaign_result();
        try
        {
          try
          {
            result.Success = iface_.updateCampaign(args.SessionId, args.Campaign);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("updateCampaign", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateCampaign", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setMarketingLink_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setMarketingLink_args args = new setMarketingLink_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setMarketingLink_result result = new setMarketingLink_result();
        try
        {
          try
          {
            result.Success = iface_.setMarketingLink(args.SessionId, args.Link);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("setMarketingLink", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("setMarketingLink", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getMarketingLink_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getMarketingLink_args args = new getMarketingLink_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getMarketingLink_result result = new getMarketingLink_result();
        try
        {
          try
          {
            result.Success = iface_.getMarketingLink(args.SessionId, args.Id);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getMarketingLink", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getMarketingLink", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCampaigns_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCampaigns_args args = new getCampaigns_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCampaigns_result result = new getCampaigns_result();
        try
        {
          try
          {
            result.Success = iface_.getCampaigns(args.SessionId, args.AppId, args.Status);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getCampaigns", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getCampaigns", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setBannerLink_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setBannerLink_args args = new setBannerLink_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setBannerLink_result result = new setBannerLink_result();
        try
        {
          try
          {
            result.Success = iface_.setBannerLink(args.SessionId, args.Link);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("setBannerLink", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("setBannerLink", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getBannerLink_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getBannerLink_args args = new getBannerLink_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getBannerLink_result result = new getBannerLink_result();
        try
        {
          try
          {
            result.Success = iface_.getBannerLink(args.SessionId, args.Id);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getBannerLink", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getBannerLink", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getBannerLinks_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getBannerLinks_args args = new getBannerLinks_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getBannerLinks_result result = new getBannerLinks_result();
        try
        {
          try
          {
            result.Success = iface_.getBannerLinks(args.SessionId, args.AppId, args.Status);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getBannerLinks", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getBannerLinks", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getReportedActivities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getReportedActivities_args args = new getReportedActivities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getReportedActivities_result result = new getReportedActivities_result();
        try
        {
          try
          {
            result.Success = iface_.getReportedActivities(args.SessionId, args.AppId, args.Query);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getReportedActivities", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getReportedActivities", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void closeReports_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        closeReports_args args = new closeReports_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        closeReports_result result = new closeReports_result();
        try
        {
          try
          {
            result.Success = iface_.closeReports(args.SessionId, args.AppId, args.ActivityIds);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("closeReports", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("closeReports", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void banUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        banUsers_args args = new banUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        banUsers_result result = new banUsers_result();
        try
        {
          try
          {
            result.Success = iface_.banUsers(args.SessionId, args.AppId, args.UserIds, args.BanExpiry, args.Reason);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("banUsers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("banUsers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void unbanUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        unbanUsers_args args = new unbanUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        unbanUsers_result result = new unbanUsers_result();
        try
        {
          try
          {
            result.Success = iface_.unbanUsers(args.SessionId, args.AppId, args.UserIds);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("unbanUsers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("unbanUsers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getBannedUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getBannedUsers_args args = new getBannedUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getBannedUsers_result result = new getBannedUsers_result();
        try
        {
          try
          {
            result.Success = iface_.getBannedUsers(args.SessionId, args.AppId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getBannedUsers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getBannedUsers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAudiences_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAudiences_args args = new getAudiences_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAudiences_result result = new getAudiences_result();
        try
        {
          try
          {
            result.Success = iface_.getAudiences(args.SessionId, args.AppId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getAudiences", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getAudiences", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setAudience_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setAudience_args args = new setAudience_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setAudience_result result = new setAudience_result();
        try
        {
          try
          {
            result.Success = iface_.setAudience(args.SessionId, args.Audience);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("setAudience", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("setAudience", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAudience_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAudience_args args = new getAudience_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAudience_result result = new getAudience_result();
        try
        {
          try
          {
            result.Success = iface_.getAudience(args.SessionId, args.AudienceId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getAudience", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getAudience", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteAudience_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteAudience_args args = new deleteAudience_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteAudience_result result = new deleteAudience_result();
        try
        {
          try
          {
            result.Success = iface_.deleteAudience(args.SessionId, args.AudienceId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("deleteAudience", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("deleteAudience", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getWebhookEvents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getWebhookEvents_args args = new getWebhookEvents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getWebhookEvents_result result = new getWebhookEvents_result();
        try
        {
          try
          {
            result.Success = iface_.getWebhookEvents(args.SessionId, args.AppId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getWebhookEvents", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getWebhookEvents", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getWebhookSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getWebhookSettings_args args = new getWebhookSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getWebhookSettings_result result = new getWebhookSettings_result();
        try
        {
          try
          {
            result.Success = iface_.getWebhookSettings(args.SessionId, args.AppId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getWebhookSettings", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getWebhookSettings", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateWebhookSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateWebhookSettings_args args = new updateWebhookSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateWebhookSettings_result result = new updateWebhookSettings_result();
        try
        {
          try
          {
            result.Success = iface_.updateWebhookSettings(args.SessionId, args.AppId, args.Settings);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("updateWebhookSettings", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateWebhookSettings", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setTestDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setTestDevice_args args = new setTestDevice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setTestDevice_result result = new setTestDevice_result();
        try
        {
          try
          {
            result.Success = iface_.setTestDevice(args.SessionId, args.CompanyId, args.Device);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("setTestDevice", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("setTestDevice", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTestDevices_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTestDevices_args args = new getTestDevices_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTestDevices_result result = new getTestDevices_result();
        try
        {
          try
          {
            result.Success = iface_.getTestDevices(args.SessionId, args.CompanyId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getTestDevices", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getTestDevices", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTestDeviceRemoteLogs_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTestDeviceRemoteLogs_args args = new getTestDeviceRemoteLogs_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTestDeviceRemoteLogs_result result = new getTestDeviceRemoteLogs_result();
        try
        {
          try
          {
            result.Success = iface_.getTestDeviceRemoteLogs(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getTestDeviceRemoteLogs", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getTestDeviceRemoteLogs", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteTestDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteTestDevice_args args = new deleteTestDevice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteTestDevice_result result = new deleteTestDevice_result();
        try
        {
          try
          {
            result.Success = iface_.deleteTestDevice(args.SessionId, args.Id);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("deleteTestDevice", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("deleteTestDevice", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void describeNotifications_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        describeNotifications_args args = new describeNotifications_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        describeNotifications_result result = new describeNotifications_result();
        try
        {
          try
          {
            result.Success = iface_.describeNotifications(args.SessionId, args.AppId, args.Query);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("describeNotifications", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("describeNotifications", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getNotificationsTexts_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNotificationsTexts_args args = new getNotificationsTexts_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNotificationsTexts_result result = new getNotificationsTexts_result();
        try
        {
          try
          {
            result.Success = iface_.getNotificationsTexts(args.SessionId, args.Query);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getNotificationsTexts", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getNotificationsTexts", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTargetedNotifications_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTargetedNotifications_args args = new getTargetedNotifications_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTargetedNotifications_result result = new getTargetedNotifications_result();
        try
        {
          try
          {
            result.Success = iface_.getTargetedNotifications(args.SessionId, args.AppId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getTargetedNotifications", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getTargetedNotifications", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setTargetedNotification_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setTargetedNotification_args args = new setTargetedNotification_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setTargetedNotification_result result = new setTargetedNotification_result();
        try
        {
          try
          {
            result.Success = iface_.setTargetedNotification(args.SessionId, args.Notification);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("setTargetedNotification", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("setTargetedNotification", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void cancelTargetedNotification_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        cancelTargetedNotification_args args = new cancelTargetedNotification_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        cancelTargetedNotification_result result = new cancelTargetedNotification_result();
        try
        {
          try
          {
            result.Success = iface_.cancelTargetedNotification(args.SessionId, args.AppId, args.NotificationId, args.Remove);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("cancelTargetedNotification", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("cancelTargetedNotification", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setTemplate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setTemplate_args args = new setTemplate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setTemplate_result result = new setTemplate_result();
        try
        {
          try
          {
            result.Success = iface_.setTemplate(args.SessionId, args.Tmpl);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("setTemplate", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("setTemplate", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteTemplate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteTemplate_args args = new deleteTemplate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteTemplate_result result = new deleteTemplate_result();
        try
        {
          try
          {
            result.Success = iface_.deleteTemplate(args.SessionId, args.AppId, args.TmplId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("deleteTemplate", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("deleteTemplate", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTemplates_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTemplates_args args = new getTemplates_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTemplates_result result = new getTemplates_result();
        try
        {
          try
          {
            result.Success = iface_.getTemplates(args.SessionId, args.AppId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getTemplates", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getTemplates", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCompanyApiKeys_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCompanyApiKeys_args args = new getCompanyApiKeys_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCompanyApiKeys_result result = new getCompanyApiKeys_result();
        try
        {
          try
          {
            result.Success = iface_.getCompanyApiKeys(args.SessionId, args.CompanyId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getCompanyApiKeys", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getCompanyApiKeys", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setCompanyApiKey_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setCompanyApiKey_args args = new setCompanyApiKey_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setCompanyApiKey_result result = new setCompanyApiKey_result();
        try
        {
          try
          {
            result.Success = iface_.setCompanyApiKey(args.SessionId, args.ApiKey);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("setCompanyApiKey", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("setCompanyApiKey", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getEstimatedBalance_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getEstimatedBalance_args args = new getEstimatedBalance_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getEstimatedBalance_result result = new getEstimatedBalance_result();
        try
        {
          try
          {
            result.Success = iface_.getEstimatedBalance(args.SessionId, args.CompanyId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getEstimatedBalance", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getEstimatedBalance", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getInvoices_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getInvoices_args args = new getInvoices_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getInvoices_result result = new getInvoices_result();
        try
        {
          try
          {
            result.Success = iface_.getInvoices(args.SessionId, args.CompanyId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getInvoices", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getInvoices", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPaymentMethod_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPaymentMethod_args args = new getPaymentMethod_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPaymentMethod_result result = new getPaymentMethod_result();
        try
        {
          try
          {
            result.Success = iface_.getPaymentMethod(args.SessionId, args.CompanyId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getPaymentMethod", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getPaymentMethod", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setCreditCard_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setCreditCard_args args = new setCreditCard_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setCreditCard_result result = new setCreditCard_result();
        try
        {
          try
          {
            result.Success = iface_.setCreditCard(args.SessionId, args.CompanyId, args.StripeResponse);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("setCreditCard", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("setCreditCard", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPaymentIntentClientSecret_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPaymentIntentClientSecret_args args = new getPaymentIntentClientSecret_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPaymentIntentClientSecret_result result = new getPaymentIntentClientSecret_result();
        try
        {
          try
          {
            result.Success = iface_.getPaymentIntentClientSecret(args.SessionId, args.CompanyId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getPaymentIntentClientSecret", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getPaymentIntentClientSecret", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSFTriggers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSFTriggers_args args = new getSFTriggers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSFTriggers_result result = new getSFTriggers_result();
        try
        {
          try
          {
            result.Success = iface_.getSFTriggers(args.SessionId, args.AppId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getSFTriggers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getSFTriggers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setSFTrigger_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setSFTrigger_args args = new setSFTrigger_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setSFTrigger_result result = new setSFTrigger_result();
        try
        {
          try
          {
            result.Success = iface_.setSFTrigger(args.SessionId, args.Trigger);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("setSFTrigger", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("setSFTrigger", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteSFTrigger_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteSFTrigger_args args = new deleteSFTrigger_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteSFTrigger_result result = new deleteSFTrigger_result();
        try
        {
          try
          {
            result.Success = iface_.deleteSFTrigger(args.SessionId, args.TriggerId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("deleteSFTrigger", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("deleteSFTrigger", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSFActions_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSFActions_args args = new getSFActions_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSFActions_result result = new getSFActions_result();
        try
        {
          try
          {
            result.Success = iface_.getSFActions(args.SessionId, args.TriggerId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getSFActions", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getSFActions", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setSFAction_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setSFAction_args args = new setSFAction_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setSFAction_result result = new setSFAction_result();
        try
        {
          try
          {
            result.Success = iface_.setSFAction(args.SessionId, args.Action);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("setSFAction", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("setSFAction", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteSFAction_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteSFAction_args args = new deleteSFAction_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteSFAction_result result = new deleteSFAction_result();
        try
        {
          try
          {
            result.Success = iface_.deleteSFAction(args.SessionId, args.ActionId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("deleteSFAction", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("deleteSFAction", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void notificationTemplateInUse_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        notificationTemplateInUse_args args = new notificationTemplateInUse_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        notificationTemplateInUse_result result = new notificationTemplateInUse_result();
        try
        {
          try
          {
            result.Success = iface_.notificationTemplateInUse(args.SessionId, args.AppId, args.Tpl);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("notificationTemplateInUse", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("notificationTemplateInUse", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void audienceInUse_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        audienceInUse_args args = new audienceInUse_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        audienceInUse_result result = new audienceInUse_result();
        try
        {
          try
          {
            result.Success = iface_.audienceInUse(args.SessionId, args.AppId, args.AudienceId);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("audienceInUse", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("audienceInUse", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPromoCodes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPromoCodes_args args = new getPromoCodes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPromoCodes_result result = new getPromoCodes_result();
        try
        {
          try
          {
            result.Success = iface_.getPromoCodes(args.SessionId, args.AppId, args.OffsetId, args.Limit);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("getPromoCodes", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getPromoCodes", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deletePromoCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deletePromoCode_args args = new deletePromoCode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deletePromoCode_result result = new deletePromoCode_result();
        try
        {
          try
          {
            result.Success = iface_.deletePromoCode(args.SessionId, args.Id);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("deletePromoCode", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("deletePromoCode", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ddFindUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ddFindUsers_args args = new ddFindUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ddFindUsers_result result = new ddFindUsers_result();
        try
        {
          try
          {
            result.Success = iface_.ddFindUsers(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("ddFindUsers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ddFindUsers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void parseIAP_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        parseIAP_args args = new parseIAP_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        parseIAP_result result = new parseIAP_result();
        try
        {
          try
          {
            result.Success = iface_.parseIAP(args.SessionId, args.Receipt);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("parseIAP", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("parseIAP", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void validateIAP_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        validateIAP_args args = new validateIAP_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        validateIAP_result result = new validateIAP_result();
        try
        {
          try
          {
            result.Success = iface_.validateIAP(args.SessionId, args.Receipt, args.Signature, args.Checkpoint, args.IsSubscription, args.ValidateOnline);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("validateIAP", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("validateIAP", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void trackLatency_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        trackLatency_args args = new trackLatency_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        trackLatency_result result = new trackLatency_result();
        try
        {
          try
          {
            result.Success = iface_.trackLatency(args.Request);
          }
          catch (THErrors errors)
          {
            result.Errors = errors;
          }
          oprot.WriteMessageBegin(new TMessage("trackLatency", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("trackLatency", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class echo_args : TBase
    {
      private string _text;

      public string Text
      {
        get
        {
          return _text;
        }
        set
        {
          __isset.text = true;
          this._text = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool text;
      }

      public echo_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Text = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("echo_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Text != null && __isset.text) {
            field.Name = "text";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Text);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("echo_args(");
        bool __first = true;
        if (Text != null && __isset.text) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Text: ");
          __sb.Append(Text);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class echo_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public echo_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("echo_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("echo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class authenticateSdk_args : TBase
    {
      private THSdkAuthRequest _request;

      public THSdkAuthRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public authenticateSdk_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new THSdkAuthRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("authenticateSdk_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("authenticateSdk_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class authenticateSdk_result : TBase
    {
      private THSdkAuthResponse _success;
      private THErrors _errors;

      public THSdkAuthResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public authenticateSdk_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THSdkAuthResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("authenticateSdk_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("authenticateSdk_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class authenticateSdkAllInOne_args : TBase
    {
      private THSdkAuthRequestAllInOne _request;

      public THSdkAuthRequestAllInOne Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public authenticateSdkAllInOne_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new THSdkAuthRequestAllInOne();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("authenticateSdkAllInOne_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("authenticateSdkAllInOne_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class authenticateSdkAllInOne_result : TBase
    {
      private THSdkAuthResponseAllInOne _success;
      private THErrors _errors;

      public THSdkAuthResponseAllInOne Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public authenticateSdkAllInOne_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THSdkAuthResponseAllInOne();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("authenticateSdkAllInOne_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("authenticateSdkAllInOne_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSession_args : TBase
    {
      private string _sessionId;
      private THSuperProperties _superProperties;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THSuperProperties SuperProperties
      {
        get
        {
          return _superProperties;
        }
        set
        {
          __isset.superProperties = true;
          this._superProperties = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool superProperties;
      }

      public updateSession_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  SuperProperties = new THSuperProperties();
                  SuperProperties.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateSession_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (SuperProperties != null && __isset.superProperties) {
            field.Name = "superProperties";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            SuperProperties.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateSession_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (SuperProperties != null && __isset.superProperties) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SuperProperties: ");
          __sb.Append(SuperProperties== null ? "<null>" : SuperProperties.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSession_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public updateSession_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateSession_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateSession_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateUser_args : TBase
    {
      private string _sessionId;
      private THPrivateUser _request;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THPrivateUser Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool request;
      }

      public updateUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Request = new THPrivateUser();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateUser_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateUser_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateUser_result : TBase
    {
      private THPrivateUser _success;
      private THErrors _errors;

      public THPrivateUser Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public updateUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THPrivateUser();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateUser_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateUser_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addIdentity_args : TBase
    {
      private string _sessionId;
      private THIdentity _identity;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THIdentity Identity
      {
        get
        {
          return _identity;
        }
        set
        {
          __isset.identity = true;
          this._identity = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool identity;
      }

      public addIdentity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Identity = new THIdentity();
                  Identity.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("addIdentity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Identity != null && __isset.identity) {
            field.Name = "identity";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Identity.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addIdentity_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Identity != null && __isset.identity) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Identity: ");
          __sb.Append(Identity== null ? "<null>" : Identity.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addIdentity_result : TBase
    {
      private THPrivateUser _success;
      private THErrors _errors;

      public THPrivateUser Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public addIdentity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THPrivateUser();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("addIdentity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeIdentity_args : TBase
    {
      private string _sessionId;
      private THIdentity _identity;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THIdentity Identity
      {
        get
        {
          return _identity;
        }
        set
        {
          __isset.identity = true;
          this._identity = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool identity;
      }

      public removeIdentity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Identity = new THIdentity();
                  Identity.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeIdentity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Identity != null && __isset.identity) {
            field.Name = "identity";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Identity.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeIdentity_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Identity != null && __isset.identity) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Identity: ");
          __sb.Append(Identity== null ? "<null>" : Identity.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeIdentity_result : TBase
    {
      private THPrivateUser _success;
      private THErrors _errors;

      public THPrivateUser Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public removeIdentity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THPrivateUser();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeIdentity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPrivateUserByIdentity_args : TBase
    {
      private string _sessionId;
      private THIdentity _identity;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THIdentity Identity
      {
        get
        {
          return _identity;
        }
        set
        {
          __isset.identity = true;
          this._identity = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool identity;
      }

      public getPrivateUserByIdentity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Identity = new THIdentity();
                  Identity.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPrivateUserByIdentity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Identity != null && __isset.identity) {
            field.Name = "identity";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Identity.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPrivateUserByIdentity_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Identity != null && __isset.identity) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Identity: ");
          __sb.Append(Identity== null ? "<null>" : Identity.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPrivateUserByIdentity_result : TBase
    {
      private THPrivateUser _success;
      private THErrors _errors;

      public THPrivateUser Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getPrivateUserByIdentity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THPrivateUser();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPrivateUserByIdentity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPrivateUserByIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPublicUser_args : TBase
    {
      private string _sessionId;
      private string _id;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool id;
      }

      public getPublicUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPublicUser_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Id != null && __isset.id) {
            field.Name = "id";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPublicUser_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPublicUser_result : TBase
    {
      private THPublicUser _success;
      private THErrors _errors;

      public THPublicUser Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getPublicUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THPublicUser();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPublicUser_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPublicUser_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUsers_args : TBase
    {
      private GetUsersRequest _request;

      public GetUsersRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetUsersRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getUsers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUsers_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUsers_result : TBase
    {
      private GetUsersResponse _success;
      private THErrors _errors;

      public GetUsersResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetUsersResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getUsers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUsers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUsersById_args : TBase
    {
      private GetUsersRequestById _request;

      public GetUsersRequestById Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getUsersById_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetUsersRequestById();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getUsersById_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUsersById_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUsersById_result : TBase
    {
      private GetUsersResponseById _success;
      private THErrors _errors;

      public GetUsersResponseById Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getUsersById_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetUsersResponseById();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getUsersById_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUsersById_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPublicUsersByIdentity_args : TBase
    {
      private string _sessionId;
      private string _provider;
      private List<string> _providerIds;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Provider
      {
        get
        {
          return _provider;
        }
        set
        {
          __isset.provider = true;
          this._provider = value;
        }
      }

      public List<string> ProviderIds
      {
        get
        {
          return _providerIds;
        }
        set
        {
          __isset.providerIds = true;
          this._providerIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool provider;
        public bool providerIds;
      }

      public getPublicUsersByIdentity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Provider = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    ProviderIds = new List<string>();
                    TList _list0 = iprot.ReadListBegin();
                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      string _elem2;
                      _elem2 = iprot.ReadString();
                      ProviderIds.Add(_elem2);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPublicUsersByIdentity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Provider != null && __isset.provider) {
            field.Name = "provider";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Provider);
            oprot.WriteFieldEnd();
          }
          if (ProviderIds != null && __isset.providerIds) {
            field.Name = "providerIds";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, ProviderIds.Count));
              foreach (string _iter3 in ProviderIds)
              {
                oprot.WriteString(_iter3);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPublicUsersByIdentity_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Provider != null && __isset.provider) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Provider: ");
          __sb.Append(Provider);
        }
        if (ProviderIds != null && __isset.providerIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProviderIds: ");
          __sb.Append(ProviderIds.ToDebugString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPublicUsersByIdentity_result : TBase
    {
      private Dictionary<string, THPublicUser> _success;
      private THErrors _errors;

      public Dictionary<string, THPublicUser> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getPublicUsersByIdentity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map) {
                  {
                    Success = new Dictionary<string, THPublicUser>();
                    TMap _map4 = iprot.ReadMapBegin();
                    for( int _i5 = 0; _i5 < _map4.Count; ++_i5)
                    {
                      string _key6;
                      THPublicUser _val7;
                      _key6 = iprot.ReadString();
                      _val7 = new THPublicUser();
                      _val7.Read(iprot);
                      Success[_key6] = _val7;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPublicUsersByIdentity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Map;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
                foreach (string _iter8 in Success.Keys)
                {
                  oprot.WriteString(_iter8);
                  Success[_iter8].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPublicUsersByIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findUsers_args : TBase
    {
      private string _sessionId;
      private THUsersQuery _query;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THUsersQuery Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool query;
      }

      public findUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Query = new THUsersQuery();
                  Query.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findUsers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Query != null && __isset.query) {
            field.Name = "query";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Query.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findUsers_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Query != null && __isset.query) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Query: ");
          __sb.Append(Query== null ? "<null>" : Query.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findUsers_result : TBase
    {
      private List<THUserReference> _success;
      private THErrors _errors;

      public List<THUserReference> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public findUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THUserReference>();
                    TList _list9 = iprot.ReadListBegin();
                    for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                    {
                      THUserReference _elem11;
                      _elem11 = new THUserReference();
                      _elem11.Read(iprot);
                      Success.Add(_elem11);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findUsers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THUserReference _iter12 in Success)
                {
                  _iter12.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findUsers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addFriend_args : TBase
    {
      private string _sessionId;
      private string _userId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool userId;
      }

      public addFriend_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  UserId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("addFriend_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (UserId != null && __isset.userId) {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addFriend_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addFriend_result : TBase
    {
      private int _success;
      private THErrors _errors;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public addFriend_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("addFriend_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addFriend_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addFriends_args : TBase
    {
      private AddFriendsRequest _request;

      public AddFriendsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public addFriends_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new AddFriendsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("addFriends_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addFriends_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addFriends_result : TBase
    {
      private AddFriendsResponse _success;
      private THErrors _errors;

      public AddFriendsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public addFriends_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new AddFriendsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("addFriends_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addFriends_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addFriendsByIdentity_args : TBase
    {
      private string _sessionId;
      private string _provider;
      private List<string> _providerIds;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Provider
      {
        get
        {
          return _provider;
        }
        set
        {
          __isset.provider = true;
          this._provider = value;
        }
      }

      public List<string> ProviderIds
      {
        get
        {
          return _providerIds;
        }
        set
        {
          __isset.providerIds = true;
          this._providerIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool provider;
        public bool providerIds;
      }

      public addFriendsByIdentity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Provider = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    ProviderIds = new List<string>();
                    TList _list13 = iprot.ReadListBegin();
                    for( int _i14 = 0; _i14 < _list13.Count; ++_i14)
                    {
                      string _elem15;
                      _elem15 = iprot.ReadString();
                      ProviderIds.Add(_elem15);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("addFriendsByIdentity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Provider != null && __isset.provider) {
            field.Name = "provider";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Provider);
            oprot.WriteFieldEnd();
          }
          if (ProviderIds != null && __isset.providerIds) {
            field.Name = "providerIds";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, ProviderIds.Count));
              foreach (string _iter16 in ProviderIds)
              {
                oprot.WriteString(_iter16);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addFriendsByIdentity_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Provider != null && __isset.provider) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Provider: ");
          __sb.Append(Provider);
        }
        if (ProviderIds != null && __isset.providerIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProviderIds: ");
          __sb.Append(ProviderIds.ToDebugString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addFriendsByIdentity_result : TBase
    {
      private int _success;
      private THErrors _errors;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public addFriendsByIdentity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("addFriendsByIdentity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addFriendsByIdentity_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeFriend_args : TBase
    {
      private string _sessionId;
      private string _userId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool userId;
      }

      public removeFriend_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  UserId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeFriend_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (UserId != null && __isset.userId) {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeFriend_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeFriend_result : TBase
    {
      private int _success;
      private THErrors _errors;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public removeFriend_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeFriend_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeFriend_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeFriends_args : TBase
    {
      private RemoveFriendsRequest _request;

      public RemoveFriendsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public removeFriends_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new RemoveFriendsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeFriends_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeFriends_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeFriends_result : TBase
    {
      private RemoveFriendsResponse _success;
      private THErrors _errors;

      public RemoveFriendsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public removeFriends_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new RemoveFriendsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeFriends_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeFriends_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setFriends_args : TBase
    {
      private string _sessionId;
      private List<string> _userIds;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public List<string> UserIds
      {
        get
        {
          return _userIds;
        }
        set
        {
          __isset.userIds = true;
          this._userIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool userIds;
      }

      public setFriends_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    UserIds = new List<string>();
                    TList _list17 = iprot.ReadListBegin();
                    for( int _i18 = 0; _i18 < _list17.Count; ++_i18)
                    {
                      string _elem19;
                      _elem19 = iprot.ReadString();
                      UserIds.Add(_elem19);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setFriends_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (UserIds != null && __isset.userIds) {
            field.Name = "userIds";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, UserIds.Count));
              foreach (string _iter20 in UserIds)
              {
                oprot.WriteString(_iter20);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setFriends_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (UserIds != null && __isset.userIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserIds: ");
          __sb.Append(UserIds.ToDebugString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setFriends_result : TBase
    {
      private int _success;
      private THErrors _errors;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public setFriends_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setFriends_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setFriends_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeFriendsByIdentity_args : TBase
    {
      private string _sessionId;
      private string _provider;
      private List<string> _providerIds;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Provider
      {
        get
        {
          return _provider;
        }
        set
        {
          __isset.provider = true;
          this._provider = value;
        }
      }

      public List<string> ProviderIds
      {
        get
        {
          return _providerIds;
        }
        set
        {
          __isset.providerIds = true;
          this._providerIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool provider;
        public bool providerIds;
      }

      public removeFriendsByIdentity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Provider = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    ProviderIds = new List<string>();
                    TList _list21 = iprot.ReadListBegin();
                    for( int _i22 = 0; _i22 < _list21.Count; ++_i22)
                    {
                      string _elem23;
                      _elem23 = iprot.ReadString();
                      ProviderIds.Add(_elem23);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeFriendsByIdentity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Provider != null && __isset.provider) {
            field.Name = "provider";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Provider);
            oprot.WriteFieldEnd();
          }
          if (ProviderIds != null && __isset.providerIds) {
            field.Name = "providerIds";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, ProviderIds.Count));
              foreach (string _iter24 in ProviderIds)
              {
                oprot.WriteString(_iter24);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeFriendsByIdentity_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Provider != null && __isset.provider) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Provider: ");
          __sb.Append(Provider);
        }
        if (ProviderIds != null && __isset.providerIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProviderIds: ");
          __sb.Append(ProviderIds.ToDebugString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeFriendsByIdentity_result : TBase
    {
      private int _success;
      private THErrors _errors;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public removeFriendsByIdentity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeFriendsByIdentity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeFriendsByIdentity_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setFriendsByIdentity_args : TBase
    {
      private string _sessionId;
      private string _provider;
      private List<string> _providerIds;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Provider
      {
        get
        {
          return _provider;
        }
        set
        {
          __isset.provider = true;
          this._provider = value;
        }
      }

      public List<string> ProviderIds
      {
        get
        {
          return _providerIds;
        }
        set
        {
          __isset.providerIds = true;
          this._providerIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool provider;
        public bool providerIds;
      }

      public setFriendsByIdentity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Provider = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    ProviderIds = new List<string>();
                    TList _list25 = iprot.ReadListBegin();
                    for( int _i26 = 0; _i26 < _list25.Count; ++_i26)
                    {
                      string _elem27;
                      _elem27 = iprot.ReadString();
                      ProviderIds.Add(_elem27);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setFriendsByIdentity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Provider != null && __isset.provider) {
            field.Name = "provider";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Provider);
            oprot.WriteFieldEnd();
          }
          if (ProviderIds != null && __isset.providerIds) {
            field.Name = "providerIds";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, ProviderIds.Count));
              foreach (string _iter28 in ProviderIds)
              {
                oprot.WriteString(_iter28);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setFriendsByIdentity_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Provider != null && __isset.provider) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Provider: ");
          __sb.Append(Provider);
        }
        if (ProviderIds != null && __isset.providerIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProviderIds: ");
          __sb.Append(ProviderIds.ToDebugString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setFriendsByIdentity_result : TBase
    {
      private int _success;
      private THErrors _errors;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public setFriendsByIdentity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setFriendsByIdentity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setFriendsByIdentity_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isFriend_args : TBase
    {
      private string _sessionId;
      private string _userId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool userId;
      }

      public isFriend_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  UserId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("isFriend_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (UserId != null && __isset.userId) {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("isFriend_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isFriend_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public isFriend_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("isFriend_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("isFriend_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class areFriends_args : TBase
    {
      private AreFriendsRequest _request;

      public AreFriendsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public areFriends_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new AreFriendsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("areFriends_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("areFriends_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class areFriends_result : TBase
    {
      private AreFriendsResponse _success;
      private THErrors _errors;

      public AreFriendsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public areFriends_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new AreFriendsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("areFriends_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("areFriends_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFriendsCount_args : TBase
    {
      private string _sessionId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
      }

      public getFriendsCount_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getFriendsCount_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getFriendsCount_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFriendsCount_result : TBase
    {
      private int _success;
      private THErrors _errors;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getFriendsCount_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getFriendsCount_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getFriendsCount_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFriends_args : TBase
    {
      private string _sessionId;
      private int _offset;
      private int _limit;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public int Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public int Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool offset;
        public bool limit;
      }

      public getFriends_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Offset = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Limit = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getFriends_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getFriends_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFriends_result : TBase
    {
      private List<THPublicUser> _success;
      private THErrors _errors;

      public List<THPublicUser> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getFriends_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THPublicUser>();
                    TList _list29 = iprot.ReadListBegin();
                    for( int _i30 = 0; _i30 < _list29.Count; ++_i30)
                    {
                      THPublicUser _elem31;
                      _elem31 = new THPublicUser();
                      _elem31.Read(iprot);
                      Success.Add(_elem31);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getFriends_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THPublicUser _iter32 in Success)
                {
                  _iter32.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getFriends_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFriendsV2_args : TBase
    {
      private GetFriendsRequest _request;

      public GetFriendsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getFriendsV2_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetFriendsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getFriendsV2_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getFriendsV2_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFriendsV2_result : TBase
    {
      private GetFriendsResponse _success;
      private THErrors _errors;

      public GetFriendsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getFriendsV2_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetFriendsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getFriendsV2_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getFriendsV2_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSuggestedFriends_args : TBase
    {
      private string _sessionId;
      private int _offset;
      private int _limit;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public int Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public int Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool offset;
        public bool limit;
      }

      public getSuggestedFriends_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Offset = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Limit = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getSuggestedFriends_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSuggestedFriends_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSuggestedFriends_result : TBase
    {
      private List<THSuggestedFriend> _success;
      private THErrors _errors;

      public List<THSuggestedFriend> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getSuggestedFriends_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THSuggestedFriend>();
                    TList _list33 = iprot.ReadListBegin();
                    for( int _i34 = 0; _i34 < _list33.Count; ++_i34)
                    {
                      THSuggestedFriend _elem35;
                      _elem35 = new THSuggestedFriend();
                      _elem35.Read(iprot);
                      Success.Add(_elem35);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getSuggestedFriends_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THSuggestedFriend _iter36 in Success)
                {
                  _iter36.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSuggestedFriends_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSuggestedFriendsV2_args : TBase
    {
      private GetSuggestedFriendsRequest _request;

      public GetSuggestedFriendsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getSuggestedFriendsV2_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetSuggestedFriendsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getSuggestedFriendsV2_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSuggestedFriendsV2_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSuggestedFriendsV2_result : TBase
    {
      private GetSuggestedFriendsResponse _success;
      private THErrors _errors;

      public GetSuggestedFriendsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getSuggestedFriendsV2_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetSuggestedFriendsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getSuggestedFriendsV2_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSuggestedFriendsV2_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMentionFriends_args : TBase
    {
      private string _sessionId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
      }

      public getMentionFriends_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getMentionFriends_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getMentionFriends_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMentionFriends_result : TBase
    {
      private List<THUserReference> _success;
      private THErrors _errors;

      public List<THUserReference> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getMentionFriends_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THUserReference>();
                    TList _list37 = iprot.ReadListBegin();
                    for( int _i38 = 0; _i38 < _list37.Count; ++_i38)
                    {
                      THUserReference _elem39;
                      _elem39 = new THUserReference();
                      _elem39.Read(iprot);
                      Success.Add(_elem39);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getMentionFriends_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THUserReference _iter40 in Success)
                {
                  _iter40.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getMentionFriends_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopics_args : TBase
    {
      private GetTopicsRequest _request;

      public GetTopicsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getTopics_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetTopicsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getTopics_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getTopics_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopics_result : TBase
    {
      private GetTopicsResponse _success;
      private THErrors _errors;

      public GetTopicsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getTopics_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetTopicsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getTopics_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getTopics_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopic_args : TBase
    {
      private GetTopicRequest _request;

      public GetTopicRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getTopic_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetTopicRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getTopic_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getTopic_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopic_result : TBase
    {
      private GetTopicResponse _success;
      private THErrors _errors;

      public GetTopicResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getTopic_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetTopicResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getTopic_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getTopic_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class followEntities_args : TBase
    {
      private FollowEntitiesRequest _request;

      public FollowEntitiesRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public followEntities_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new FollowEntitiesRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("followEntities_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("followEntities_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class followEntities_result : TBase
    {
      private FollowEntitiesResponse _success;
      private THErrors _errors;

      public FollowEntitiesResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public followEntities_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new FollowEntitiesResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("followEntities_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("followEntities_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class unfollowEntities_args : TBase
    {
      private UnfollowEntitiesRequest _request;

      public UnfollowEntitiesRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public unfollowEntities_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new UnfollowEntitiesRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("unfollowEntities_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("unfollowEntities_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class unfollowEntities_result : TBase
    {
      private UnfollowEntitiesResponse _success;
      private THErrors _errors;

      public UnfollowEntitiesResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public unfollowEntities_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new UnfollowEntitiesResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("unfollowEntities_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("unfollowEntities_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getEntityFollowers_args : TBase
    {
      private GetEntityFollowersRequest _request;

      public GetEntityFollowersRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getEntityFollowers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetEntityFollowersRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getEntityFollowers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getEntityFollowers_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getEntityFollowers_result : TBase
    {
      private GetEntityFollowersResponse _success;
      private THErrors _errors;

      public GetEntityFollowersResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getEntityFollowers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetEntityFollowersResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getEntityFollowers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getEntityFollowers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isFollowing_args : TBase
    {
      private IsFollowingRequest _request;

      public IsFollowingRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public isFollowing_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new IsFollowingRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("isFollowing_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("isFollowing_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isFollowing_result : TBase
    {
      private IsFollowingResponse _success;
      private THErrors _errors;

      public IsFollowingResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public isFollowing_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new IsFollowingResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("isFollowing_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("isFollowing_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetTopics_args : TBase
    {
      private DDGetTopicsRequest _request;

      public DDGetTopicsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddGetTopics_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDGetTopicsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetTopics_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetTopics_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetTopics_result : TBase
    {
      private DDGetTopicsResponse _success;
      private THErrors _errors;

      public DDGetTopicsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddGetTopics_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDGetTopicsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetTopics_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetTopics_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetTopic_args : TBase
    {
      private DDGetTopicRequest _request;

      public DDGetTopicRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddGetTopic_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDGetTopicRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetTopic_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetTopic_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetTopic_result : TBase
    {
      private DDGetTopicResponse _success;
      private THErrors _errors;

      public DDGetTopicResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddGetTopic_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDGetTopicResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetTopic_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetTopic_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddCreateTopic_args : TBase
    {
      private DDCreateTopicRequest _request;

      public DDCreateTopicRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddCreateTopic_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDCreateTopicRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddCreateTopic_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddCreateTopic_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddCreateTopic_result : TBase
    {
      private DDCreateTopicResponse _success;
      private THErrors _errors;

      public DDCreateTopicResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddCreateTopic_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDCreateTopicResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddCreateTopic_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddCreateTopic_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddUpdateTopic_args : TBase
    {
      private DDUpdateTopicRequest _request;

      public DDUpdateTopicRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddUpdateTopic_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDUpdateTopicRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddUpdateTopic_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddUpdateTopic_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddUpdateTopic_result : TBase
    {
      private DDUpdateTopicResponse _success;
      private THErrors _errors;

      public DDUpdateTopicResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddUpdateTopic_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDUpdateTopicResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddUpdateTopic_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddUpdateTopic_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddDeleteTopics_args : TBase
    {
      private DDDeleteTopicsRequest _request;

      public DDDeleteTopicsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddDeleteTopics_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDDeleteTopicsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddDeleteTopics_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddDeleteTopics_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddDeleteTopics_result : TBase
    {
      private DDDeleteTopicsResponse _success;
      private THErrors _errors;

      public DDDeleteTopicsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddDeleteTopics_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDDeleteTopicsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddDeleteTopics_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddDeleteTopics_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetEntityFollowers_args : TBase
    {
      private DDGetEntityFollowersRequest _request;

      public DDGetEntityFollowersRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddGetEntityFollowers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDGetEntityFollowersRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetEntityFollowers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetEntityFollowers_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetEntityFollowers_result : TBase
    {
      private DDGetEntityFollowersResponse _success;
      private THErrors _errors;

      public DDGetEntityFollowersResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddGetEntityFollowers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDGetEntityFollowersResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetEntityFollowers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetEntityFollowers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createGroup_args : TBase
    {
      private CreateGroupRequest _request;

      public CreateGroupRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public createGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new CreateGroupRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createGroup_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createGroup_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createGroup_result : TBase
    {
      private CreateGroupResponse _success;
      private THErrors _errors;

      public CreateGroupResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public createGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new CreateGroupResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createGroup_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateGroup_args : TBase
    {
      private UpdateGroupRequest _request;

      public UpdateGroupRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public updateGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new UpdateGroupRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateGroup_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateGroup_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateGroup_result : TBase
    {
      private UpdateGroupResponse _success;
      private THErrors _errors;

      public UpdateGroupResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public updateGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new UpdateGroupResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateGroup_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteGroups_args : TBase
    {
      private DeleteGroupsRequest _request;

      public DeleteGroupsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public deleteGroups_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DeleteGroupsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteGroups_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteGroups_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteGroups_result : TBase
    {
      private DeleteGroupsResponse _success;
      private THErrors _errors;

      public DeleteGroupsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public deleteGroups_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DeleteGroupsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteGroups_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteGroups_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroups_args : TBase
    {
      private GetGroupsRequest _request;

      public GetGroupsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getGroups_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetGroupsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getGroups_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getGroups_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroups_result : TBase
    {
      private GetGroupsResponse _success;
      private THErrors _errors;

      public GetGroupsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getGroups_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetGroupsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getGroups_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getGroups_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroup_args : TBase
    {
      private GetGroupRequest _request;

      public GetGroupRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetGroupRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getGroup_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getGroup_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroup_result : TBase
    {
      private GetGroupResponse _success;
      private THErrors _errors;

      public GetGroupResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetGroupResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getGroup_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateGroupMembers_args : TBase
    {
      private UpdateGroupMembersRequest _request;

      public UpdateGroupMembersRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public updateGroupMembers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new UpdateGroupMembersRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateGroupMembers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateGroupMembers_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateGroupMembers_result : TBase
    {
      private UpdateGroupMembersResponse _success;
      private THErrors _errors;

      public UpdateGroupMembersResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public updateGroupMembers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new UpdateGroupMembersResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateGroupMembers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateGroupMembers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeGroupMembers_args : TBase
    {
      private RemoveGroupMembersRequest _request;

      public RemoveGroupMembersRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public removeGroupMembers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new RemoveGroupMembersRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeGroupMembers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeGroupMembers_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeGroupMembers_result : TBase
    {
      private RemoveGroupMembersResponse _success;
      private THErrors _errors;

      public RemoveGroupMembersResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public removeGroupMembers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new RemoveGroupMembersResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeGroupMembers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeGroupMembers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class areGroupMembers_args : TBase
    {
      private AreGroupMembersRequest _request;

      public AreGroupMembersRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public areGroupMembers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new AreGroupMembersRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("areGroupMembers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("areGroupMembers_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class areGroupMembers_result : TBase
    {
      private AreGroupMembersResponse _success;
      private THErrors _errors;

      public AreGroupMembersResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public areGroupMembers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new AreGroupMembersResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("areGroupMembers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("areGroupMembers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroupMembers_args : TBase
    {
      private GetGroupMembersRequest _request;

      public GetGroupMembersRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getGroupMembers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetGroupMembersRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getGroupMembers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getGroupMembers_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroupMembers_result : TBase
    {
      private GetGroupMembersResponse _success;
      private THErrors _errors;

      public GetGroupMembersResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getGroupMembers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetGroupMembersResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getGroupMembers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getGroupMembers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddCreateGroup_args : TBase
    {
      private DDCreateGroupRequest _request;

      public DDCreateGroupRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddCreateGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDCreateGroupRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddCreateGroup_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddCreateGroup_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddCreateGroup_result : TBase
    {
      private DDCreateGroupResponse _success;
      private THErrors _errors;

      public DDCreateGroupResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddCreateGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDCreateGroupResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddCreateGroup_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddCreateGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddUpdateGroup_args : TBase
    {
      private DDUpdateGroupRequest _request;

      public DDUpdateGroupRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddUpdateGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDUpdateGroupRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddUpdateGroup_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddUpdateGroup_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddUpdateGroup_result : TBase
    {
      private DDUpdateGroupResponse _success;
      private THErrors _errors;

      public DDUpdateGroupResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddUpdateGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDUpdateGroupResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddUpdateGroup_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddUpdateGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddDeleteGroups_args : TBase
    {
      private DDDeleteGroupsRequest _request;

      public DDDeleteGroupsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddDeleteGroups_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDDeleteGroupsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddDeleteGroups_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddDeleteGroups_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddDeleteGroups_result : TBase
    {
      private DDDeleteGroupsResponse _success;
      private THErrors _errors;

      public DDDeleteGroupsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddDeleteGroups_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDDeleteGroupsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddDeleteGroups_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddDeleteGroups_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetGroup_args : TBase
    {
      private DDGetGroupRequest _request;

      public DDGetGroupRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddGetGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDGetGroupRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetGroup_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetGroup_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetGroup_result : TBase
    {
      private DDGetGroupResponse _success;
      private THErrors _errors;

      public DDGetGroupResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddGetGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDGetGroupResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetGroup_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetGroups_args : TBase
    {
      private DDGetGroupsRequest _request;

      public DDGetGroupsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddGetGroups_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDGetGroupsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetGroups_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetGroups_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetGroups_result : TBase
    {
      private DDGetGroupsResponse _success;
      private THErrors _errors;

      public DDGetGroupsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddGetGroups_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDGetGroupsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetGroups_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetGroups_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetGroupMembers_args : TBase
    {
      private DDGetGroupMembersRequest _request;

      public DDGetGroupMembersRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddGetGroupMembers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDGetGroupMembersRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetGroupMembers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetGroupMembers_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetGroupMembers_result : TBase
    {
      private DDGetGroupMembersResponse _success;
      private THErrors _errors;

      public DDGetGroupMembersResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddGetGroupMembers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDGetGroupMembersResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetGroupMembers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetGroupMembers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddUpdateGroupMembers_args : TBase
    {
      private DDUpdateGroupMembersRequest _request;

      public DDUpdateGroupMembersRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddUpdateGroupMembers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDUpdateGroupMembersRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddUpdateGroupMembers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddUpdateGroupMembers_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddUpdateGroupMembers_result : TBase
    {
      private DDUpdateGroupMembersResponse _success;
      private THErrors _errors;

      public DDUpdateGroupMembersResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddUpdateGroupMembers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDUpdateGroupMembersResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddUpdateGroupMembers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddUpdateGroupMembers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddRemoveGroupMembers_args : TBase
    {
      private DDRemoveGroupMembersRequest _request;

      public DDRemoveGroupMembersRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddRemoveGroupMembers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDRemoveGroupMembersRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddRemoveGroupMembers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddRemoveGroupMembers_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddRemoveGroupMembers_result : TBase
    {
      private DDRemoveGroupMembersResponse _success;
      private THErrors _errors;

      public DDRemoveGroupMembersResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddRemoveGroupMembers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDRemoveGroupMembersResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddRemoveGroupMembers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddRemoveGroupMembers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getChats_args : TBase
    {
      private GetChatsRequest _request;

      public GetChatsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getChats_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetChatsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getChats_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getChats_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getChats_result : TBase
    {
      private GetChatsResponse _success;
      private THErrors _errors;

      public GetChatsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getChats_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetChatsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getChats_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getChats_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getChat_args : TBase
    {
      private GetChatRequest _request;

      public GetChatRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getChat_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetChatRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getChat_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getChat_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getChat_result : TBase
    {
      private GetChatResponse _success;
      private THErrors _errors;

      public GetChatResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getChat_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetChatResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getChat_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getChat_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getChatMessages_args : TBase
    {
      private GetChatMessagesRequest _request;

      public GetChatMessagesRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getChatMessages_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetChatMessagesRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getChatMessages_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getChatMessages_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getChatMessages_result : TBase
    {
      private GetChatMessagesResponse _success;
      private THErrors _errors;

      public GetChatMessagesResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getChatMessages_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetChatMessagesResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getChatMessages_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getChatMessages_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendChatMessage_args : TBase
    {
      private SendChatMessageRequest _request;

      public SendChatMessageRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public sendChatMessage_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new SendChatMessageRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("sendChatMessage_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sendChatMessage_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendChatMessage_result : TBase
    {
      private SendChatMessageResponse _success;
      private THErrors _errors;

      public SendChatMessageResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public sendChatMessage_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new SendChatMessageResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("sendChatMessage_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sendChatMessage_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createInviteUrl_args : TBase
    {
      private string _sessionId;
      private THCreateTokenRequest _request;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THCreateTokenRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool request;
      }

      public createInviteUrl_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Request = new THCreateTokenRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createInviteUrl_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createInviteUrl_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createInviteUrl_result : TBase
    {
      private THCreateTokenResponse _success;
      private THErrors _errors;

      public THCreateTokenResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public createInviteUrl_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THCreateTokenResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createInviteUrl_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createInviteUrl_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createInvite_args : TBase
    {
      private CreateInviteRequest _request;

      public CreateInviteRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public createInvite_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new CreateInviteRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createInvite_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createInvite_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createInvite_result : TBase
    {
      private CreateInviteResponse _success;
      private THErrors _errors;

      public CreateInviteResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public createInvite_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new CreateInviteResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createInvite_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createInvite_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getInviteProviders_args : TBase
    {
      private string _sessionId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
      }

      public getInviteProviders_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getInviteProviders_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getInviteProviders_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getInviteProviders_result : TBase
    {
      private THInviteProviders _success;
      private THErrors _errors;

      public THInviteProviders Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getInviteProviders_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THInviteProviders();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getInviteProviders_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getInviteProviders_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAvailableInviteChannels_args : TBase
    {
      private GetAvailableInviteChannelsRequest _request;

      public GetAvailableInviteChannelsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getAvailableInviteChannels_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetAvailableInviteChannelsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAvailableInviteChannels_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAvailableInviteChannels_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAvailableInviteChannels_result : TBase
    {
      private GetAvailableInviteChannelsResponse _success;
      private THErrors _errors;

      public GetAvailableInviteChannelsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getAvailableInviteChannels_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetAvailableInviteChannelsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAvailableInviteChannels_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAvailableInviteChannels_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class processAppOpen_args : TBase
    {
      private string _sessionId;
      private THProcessAppOpenRequest _request;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THProcessAppOpenRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool request;
      }

      public processAppOpen_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Request = new THProcessAppOpenRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("processAppOpen_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("processAppOpen_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class processAppOpen_result : TBase
    {
      private THTokenInfo _success;
      private THErrors _errors;

      public THTokenInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public processAppOpen_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THTokenInfo();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("processAppOpen_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("processAppOpen_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getReferredUsers_args : TBase
    {
      private string _sessionId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
      }

      public getReferredUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getReferredUsers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getReferredUsers_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getReferredUsers_result : TBase
    {
      private List<THPublicUser> _success;
      private THErrors _errors;

      public List<THPublicUser> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getReferredUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THPublicUser>();
                    TList _list41 = iprot.ReadListBegin();
                    for( int _i42 = 0; _i42 < _list41.Count; ++_i42)
                    {
                      THPublicUser _elem43;
                      _elem43 = new THPublicUser();
                      _elem43.Read(iprot);
                      Success.Add(_elem43);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getReferredUsers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THPublicUser _iter44 in Success)
                {
                  _iter44.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getReferredUsers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getReferredUsersV2_args : TBase
    {
      private string _sessionId;
      private string _event;
      private int _offset;
      private int _limit;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Event
      {
        get
        {
          return _event;
        }
        set
        {
          __isset.@event = true;
          this._event = value;
        }
      }

      public int Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public int Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool @event;
        public bool offset;
        public bool limit;
      }

      public getReferredUsersV2_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Event = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Offset = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  Limit = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getReferredUsersV2_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Event != null && __isset.@event) {
            field.Name = "event";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Event);
            oprot.WriteFieldEnd();
          }
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getReferredUsersV2_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Event != null && __isset.@event) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Event: ");
          __sb.Append(Event);
        }
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getReferredUsersV2_result : TBase
    {
      private List<THReferralUser> _success;
      private THErrors _errors;

      public List<THReferralUser> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getReferredUsersV2_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THReferralUser>();
                    TList _list45 = iprot.ReadListBegin();
                    for( int _i46 = 0; _i46 < _list45.Count; ++_i46)
                    {
                      THReferralUser _elem47;
                      _elem47 = new THReferralUser();
                      _elem47.Read(iprot);
                      Success.Add(_elem47);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getReferredUsersV2_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THReferralUser _iter48 in Success)
                {
                  _iter48.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getReferredUsersV2_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getReferrerUsers_args : TBase
    {
      private string _sessionId;
      private string _event;
      private int _offset;
      private int _limit;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Event
      {
        get
        {
          return _event;
        }
        set
        {
          __isset.@event = true;
          this._event = value;
        }
      }

      public int Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public int Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool @event;
        public bool offset;
        public bool limit;
      }

      public getReferrerUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Event = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Offset = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  Limit = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getReferrerUsers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Event != null && __isset.@event) {
            field.Name = "event";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Event);
            oprot.WriteFieldEnd();
          }
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getReferrerUsers_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Event != null && __isset.@event) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Event: ");
          __sb.Append(Event);
        }
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getReferrerUsers_result : TBase
    {
      private List<THReferralUser> _success;
      private THErrors _errors;

      public List<THReferralUser> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getReferrerUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THReferralUser>();
                    TList _list49 = iprot.ReadListBegin();
                    for( int _i50 = 0; _i50 < _list49.Count; ++_i50)
                    {
                      THReferralUser _elem51;
                      _elem51 = new THReferralUser();
                      _elem51.Read(iprot);
                      Success.Add(_elem51);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getReferrerUsers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THReferralUser _iter52 in Success)
                {
                  _iter52.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getReferrerUsers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setReferrer_args : TBase
    {
      private string _sessionId;
      private string _referrerId;
      private string _event;
      private Dictionary<string, string> _customData;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string ReferrerId
      {
        get
        {
          return _referrerId;
        }
        set
        {
          __isset.referrerId = true;
          this._referrerId = value;
        }
      }

      public string Event
      {
        get
        {
          return _event;
        }
        set
        {
          __isset.@event = true;
          this._event = value;
        }
      }

      public Dictionary<string, string> CustomData
      {
        get
        {
          return _customData;
        }
        set
        {
          __isset.customData = true;
          this._customData = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool referrerId;
        public bool @event;
        public bool customData;
      }

      public setReferrer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ReferrerId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Event = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Map) {
                  {
                    CustomData = new Dictionary<string, string>();
                    TMap _map53 = iprot.ReadMapBegin();
                    for( int _i54 = 0; _i54 < _map53.Count; ++_i54)
                    {
                      string _key55;
                      string _val56;
                      _key55 = iprot.ReadString();
                      _val56 = iprot.ReadString();
                      CustomData[_key55] = _val56;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setReferrer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (ReferrerId != null && __isset.referrerId) {
            field.Name = "referrerId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ReferrerId);
            oprot.WriteFieldEnd();
          }
          if (Event != null && __isset.@event) {
            field.Name = "event";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Event);
            oprot.WriteFieldEnd();
          }
          if (CustomData != null && __isset.customData) {
            field.Name = "customData";
            field.Type = TType.Map;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, CustomData.Count));
              foreach (string _iter57 in CustomData.Keys)
              {
                oprot.WriteString(_iter57);
                oprot.WriteString(CustomData[_iter57]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setReferrer_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (ReferrerId != null && __isset.referrerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ReferrerId: ");
          __sb.Append(ReferrerId);
        }
        if (Event != null && __isset.@event) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Event: ");
          __sb.Append(Event);
        }
        if (CustomData != null && __isset.customData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CustomData: ");
          __sb.Append(CustomData.ToDebugString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setReferrer_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public setReferrer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setReferrer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setReferrer_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetReferredUsers_args : TBase
    {
      private DDGetReferralUsersRequest _request;

      public DDGetReferralUsersRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddGetReferredUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDGetReferralUsersRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetReferredUsers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetReferredUsers_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetReferredUsers_result : TBase
    {
      private DDGetReferralUsersResponse _success;
      private THErrors _errors;

      public DDGetReferralUsersResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddGetReferredUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDGetReferralUsersResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetReferredUsers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetReferredUsers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetReferrerUsers_args : TBase
    {
      private DDGetReferralUsersRequest _request;

      public DDGetReferralUsersRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddGetReferrerUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDGetReferralUsersRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetReferrerUsers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetReferrerUsers_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetReferrerUsers_result : TBase
    {
      private DDGetReferralUsersResponse _success;
      private THErrors _errors;

      public DDGetReferralUsersResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddGetReferrerUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDGetReferralUsersResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetReferrerUsers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetReferrerUsers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class processCrossPromoClick_args : TBase
    {
      private string _sessionId;
      private string _link;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Link
      {
        get
        {
          return _link;
        }
        set
        {
          __isset.link = true;
          this._link = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool link;
      }

      public processCrossPromoClick_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Link = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("processCrossPromoClick_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Link != null && __isset.link) {
            field.Name = "link";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Link);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("processCrossPromoClick_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Link != null && __isset.link) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Link: ");
          __sb.Append(Link);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class processCrossPromoClick_result : TBase
    {
      private string _success;
      private THErrors _errors;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public processCrossPromoClick_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("processCrossPromoClick_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("processCrossPromoClick_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getActivities_args : TBase
    {
      private string _sessionId;
      private string _feed;
      private THActivitiesQuery _query;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Feed
      {
        get
        {
          return _feed;
        }
        set
        {
          __isset.feed = true;
          this._feed = value;
        }
      }

      public THActivitiesQuery Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool feed;
        public bool query;
      }

      public getActivities_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Feed = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Query = new THActivitiesQuery();
                  Query.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getActivities_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Feed != null && __isset.feed) {
            field.Name = "feed";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Feed);
            oprot.WriteFieldEnd();
          }
          if (Query != null && __isset.query) {
            field.Name = "query";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Query.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getActivities_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Feed != null && __isset.feed) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Feed: ");
          __sb.Append(Feed);
        }
        if (Query != null && __isset.query) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Query: ");
          __sb.Append(Query== null ? "<null>" : Query.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getActivities_result : TBase
    {
      private List<THActivityPost> _success;
      private THErrors _errors;

      public List<THActivityPost> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getActivities_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THActivityPost>();
                    TList _list58 = iprot.ReadListBegin();
                    for( int _i59 = 0; _i59 < _list58.Count; ++_i59)
                    {
                      THActivityPost _elem60;
                      _elem60 = new THActivityPost();
                      _elem60.Read(iprot);
                      Success.Add(_elem60);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getActivities_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THActivityPost _iter61 in Success)
                {
                  _iter61.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getActivities_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getStickyActivities_args : TBase
    {
      private string _sessionId;
      private string _feed;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Feed
      {
        get
        {
          return _feed;
        }
        set
        {
          __isset.feed = true;
          this._feed = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool feed;
      }

      public getStickyActivities_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Feed = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getStickyActivities_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Feed != null && __isset.feed) {
            field.Name = "feed";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Feed);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getStickyActivities_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Feed != null && __isset.feed) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Feed: ");
          __sb.Append(Feed);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getStickyActivities_result : TBase
    {
      private List<THActivityPost> _success;
      private THErrors _errors;

      public List<THActivityPost> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getStickyActivities_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THActivityPost>();
                    TList _list62 = iprot.ReadListBegin();
                    for( int _i63 = 0; _i63 < _list62.Count; ++_i63)
                    {
                      THActivityPost _elem64;
                      _elem64 = new THActivityPost();
                      _elem64.Read(iprot);
                      Success.Add(_elem64);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getStickyActivities_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THActivityPost _iter65 in Success)
                {
                  _iter65.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getStickyActivities_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getComments_args : TBase
    {
      private string _sessionId;
      private string _activityId;
      private THActivitiesQuery _query;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string ActivityId
      {
        get
        {
          return _activityId;
        }
        set
        {
          __isset.activityId = true;
          this._activityId = value;
        }
      }

      public THActivitiesQuery Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool activityId;
        public bool query;
      }

      public getComments_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ActivityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Query = new THActivitiesQuery();
                  Query.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getComments_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (ActivityId != null && __isset.activityId) {
            field.Name = "activityId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ActivityId);
            oprot.WriteFieldEnd();
          }
          if (Query != null && __isset.query) {
            field.Name = "query";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Query.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getComments_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (ActivityId != null && __isset.activityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityId: ");
          __sb.Append(ActivityId);
        }
        if (Query != null && __isset.query) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Query: ");
          __sb.Append(Query== null ? "<null>" : Query.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getComments_result : TBase
    {
      private List<THActivityPost> _success;
      private THErrors _errors;

      public List<THActivityPost> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getComments_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THActivityPost>();
                    TList _list66 = iprot.ReadListBegin();
                    for( int _i67 = 0; _i67 < _list66.Count; ++_i67)
                    {
                      THActivityPost _elem68;
                      _elem68 = new THActivityPost();
                      _elem68.Read(iprot);
                      Success.Add(_elem68);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getComments_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THActivityPost _iter69 in Success)
                {
                  _iter69.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getComments_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findTags_args : TBase
    {
      private string _sessionId;
      private THTagsQuery _query;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THTagsQuery Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool query;
      }

      public findTags_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Query = new THTagsQuery();
                  Query.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findTags_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Query != null && __isset.query) {
            field.Name = "query";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Query.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findTags_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Query != null && __isset.query) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Query: ");
          __sb.Append(Query== null ? "<null>" : Query.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findTags_result : TBase
    {
      private List<string> _success;
      private THErrors _errors;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public findTags_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<string>();
                    TList _list70 = iprot.ReadListBegin();
                    for( int _i71 = 0; _i71 < _list70.Count; ++_i71)
                    {
                      string _elem72;
                      _elem72 = iprot.ReadString();
                      Success.Add(_elem72);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findTags_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.String, Success.Count));
                foreach (string _iter73 in Success)
                {
                  oprot.WriteString(_iter73);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findTags_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findTagsV2_args : TBase
    {
      private FindTagsRequest _request;

      public FindTagsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public findTagsV2_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new FindTagsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findTagsV2_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findTagsV2_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findTagsV2_result : TBase
    {
      private FindTagsResponse _success;
      private THErrors _errors;

      public FindTagsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public findTagsV2_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new FindTagsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findTagsV2_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findTagsV2_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getActivity_args : TBase
    {
      private string _sessionId;
      private string _activityId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string ActivityId
      {
        get
        {
          return _activityId;
        }
        set
        {
          __isset.activityId = true;
          this._activityId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool activityId;
      }

      public getActivity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ActivityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getActivity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (ActivityId != null && __isset.activityId) {
            field.Name = "activityId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ActivityId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getActivity_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (ActivityId != null && __isset.activityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityId: ");
          __sb.Append(ActivityId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getActivity_result : TBase
    {
      private THActivityPost _success;
      private THErrors _errors;

      public THActivityPost Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getActivity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THActivityPost();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getActivity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getActivity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class postActivity_args : TBase
    {
      private string _sessionId;
      private string _feed;
      private THActivityPostContent _activityPostContent;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Feed
      {
        get
        {
          return _feed;
        }
        set
        {
          __isset.feed = true;
          this._feed = value;
        }
      }

      public THActivityPostContent ActivityPostContent
      {
        get
        {
          return _activityPostContent;
        }
        set
        {
          __isset.activityPostContent = true;
          this._activityPostContent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool feed;
        public bool activityPostContent;
      }

      public postActivity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Feed = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  ActivityPostContent = new THActivityPostContent();
                  ActivityPostContent.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("postActivity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Feed != null && __isset.feed) {
            field.Name = "feed";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Feed);
            oprot.WriteFieldEnd();
          }
          if (ActivityPostContent != null && __isset.activityPostContent) {
            field.Name = "activityPostContent";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            ActivityPostContent.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("postActivity_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Feed != null && __isset.feed) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Feed: ");
          __sb.Append(Feed);
        }
        if (ActivityPostContent != null && __isset.activityPostContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityPostContent: ");
          __sb.Append(ActivityPostContent== null ? "<null>" : ActivityPostContent.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class postActivity_result : TBase
    {
      private THActivityPost _success;
      private THErrors _errors;

      public THActivityPost Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public postActivity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THActivityPost();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("postActivity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("postActivity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class postComment_args : TBase
    {
      private string _sessionId;
      private string _activityId;
      private THActivityPostContent _activityPostContent;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string ActivityId
      {
        get
        {
          return _activityId;
        }
        set
        {
          __isset.activityId = true;
          this._activityId = value;
        }
      }

      public THActivityPostContent ActivityPostContent
      {
        get
        {
          return _activityPostContent;
        }
        set
        {
          __isset.activityPostContent = true;
          this._activityPostContent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool activityId;
        public bool activityPostContent;
      }

      public postComment_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ActivityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  ActivityPostContent = new THActivityPostContent();
                  ActivityPostContent.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("postComment_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (ActivityId != null && __isset.activityId) {
            field.Name = "activityId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ActivityId);
            oprot.WriteFieldEnd();
          }
          if (ActivityPostContent != null && __isset.activityPostContent) {
            field.Name = "activityPostContent";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            ActivityPostContent.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("postComment_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (ActivityId != null && __isset.activityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityId: ");
          __sb.Append(ActivityId);
        }
        if (ActivityPostContent != null && __isset.activityPostContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityPostContent: ");
          __sb.Append(ActivityPostContent== null ? "<null>" : ActivityPostContent.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class postComment_result : TBase
    {
      private THActivityPost _success;
      private THErrors _errors;

      public THActivityPost Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public postComment_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THActivityPost();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("postComment_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("postComment_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class likeActivity_args : TBase
    {
      private string _sessionId;
      private string _activityId;
      private bool _isLiked;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string ActivityId
      {
        get
        {
          return _activityId;
        }
        set
        {
          __isset.activityId = true;
          this._activityId = value;
        }
      }

      public bool IsLiked
      {
        get
        {
          return _isLiked;
        }
        set
        {
          __isset.isLiked = true;
          this._isLiked = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool activityId;
        public bool isLiked;
      }

      public likeActivity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ActivityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Bool) {
                  IsLiked = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("likeActivity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (ActivityId != null && __isset.activityId) {
            field.Name = "activityId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ActivityId);
            oprot.WriteFieldEnd();
          }
          if (__isset.isLiked) {
            field.Name = "isLiked";
            field.Type = TType.Bool;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IsLiked);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("likeActivity_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (ActivityId != null && __isset.activityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityId: ");
          __sb.Append(ActivityId);
        }
        if (__isset.isLiked) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IsLiked: ");
          __sb.Append(IsLiked);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class likeActivity_result : TBase
    {
      private THActivityPost _success;
      private THErrors _errors;

      public THActivityPost Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public likeActivity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THActivityPost();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("likeActivity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("likeActivity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getActivityLikers_args : TBase
    {
      private string _sessionId;
      private string _activityId;
      private int _offset;
      private int _limit;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string ActivityId
      {
        get
        {
          return _activityId;
        }
        set
        {
          __isset.activityId = true;
          this._activityId = value;
        }
      }

      public int Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public int Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool activityId;
        public bool offset;
        public bool limit;
      }

      public getActivityLikers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ActivityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Offset = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  Limit = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getActivityLikers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (ActivityId != null && __isset.activityId) {
            field.Name = "activityId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ActivityId);
            oprot.WriteFieldEnd();
          }
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getActivityLikers_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (ActivityId != null && __isset.activityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityId: ");
          __sb.Append(ActivityId);
        }
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getActivityLikers_result : TBase
    {
      private List<THPostAuthor> _success;
      private THErrors _errors;

      public List<THPostAuthor> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getActivityLikers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THPostAuthor>();
                    TList _list74 = iprot.ReadListBegin();
                    for( int _i75 = 0; _i75 < _list74.Count; ++_i75)
                    {
                      THPostAuthor _elem76;
                      _elem76 = new THPostAuthor();
                      _elem76.Read(iprot);
                      Success.Add(_elem76);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getActivityLikers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THPostAuthor _iter77 in Success)
                {
                  _iter77.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getActivityLikers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteActivity_args : TBase
    {
      private string _sessionId;
      private string _activityId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string ActivityId
      {
        get
        {
          return _activityId;
        }
        set
        {
          __isset.activityId = true;
          this._activityId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool activityId;
      }

      public deleteActivity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ActivityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteActivity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (ActivityId != null && __isset.activityId) {
            field.Name = "activityId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ActivityId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteActivity_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (ActivityId != null && __isset.activityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityId: ");
          __sb.Append(ActivityId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteActivity_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public deleteActivity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteActivity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteActivity_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeActivities_args : TBase
    {
      private string _sessionId;
      private List<string> _activityIds;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public List<string> ActivityIds
      {
        get
        {
          return _activityIds;
        }
        set
        {
          __isset.activityIds = true;
          this._activityIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool activityIds;
      }

      public removeActivities_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    ActivityIds = new List<string>();
                    TList _list78 = iprot.ReadListBegin();
                    for( int _i79 = 0; _i79 < _list78.Count; ++_i79)
                    {
                      string _elem80;
                      _elem80 = iprot.ReadString();
                      ActivityIds.Add(_elem80);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeActivities_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (ActivityIds != null && __isset.activityIds) {
            field.Name = "activityIds";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, ActivityIds.Count));
              foreach (string _iter81 in ActivityIds)
              {
                oprot.WriteString(_iter81);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeActivities_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (ActivityIds != null && __isset.activityIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityIds: ");
          __sb.Append(ActivityIds.ToDebugString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeActivities_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public removeActivities_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeActivities_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeActivities_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reportActivity_args : TBase
    {
      private string _sessionId;
      private string _activityId;
      private THReportingReason _reportingReason;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string ActivityId
      {
        get
        {
          return _activityId;
        }
        set
        {
          __isset.activityId = true;
          this._activityId = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref=".THReportingReason"/>
      /// </summary>
      public THReportingReason ReportingReason
      {
        get
        {
          return _reportingReason;
        }
        set
        {
          __isset.reportingReason = true;
          this._reportingReason = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool activityId;
        public bool reportingReason;
      }

      public reportActivity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ActivityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ReportingReason = (THReportingReason)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("reportActivity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (ActivityId != null && __isset.activityId) {
            field.Name = "activityId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ActivityId);
            oprot.WriteFieldEnd();
          }
          if (__isset.reportingReason) {
            field.Name = "reportingReason";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)ReportingReason);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("reportActivity_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (ActivityId != null && __isset.activityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityId: ");
          __sb.Append(ActivityId);
        }
        if (__isset.reportingReason) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ReportingReason: ");
          __sb.Append(ReportingReason);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reportActivity_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public reportActivity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("reportActivity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("reportActivity_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class trackAnalyticsEvents_args : TBase
    {
      private string _sessionId;
      private THSuperProperties _commonProperties;
      private List<THAnalyticsBaseEvent> _events;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THSuperProperties CommonProperties
      {
        get
        {
          return _commonProperties;
        }
        set
        {
          __isset.commonProperties = true;
          this._commonProperties = value;
        }
      }

      public List<THAnalyticsBaseEvent> Events
      {
        get
        {
          return _events;
        }
        set
        {
          __isset.events = true;
          this._events = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool commonProperties;
        public bool events;
      }

      public trackAnalyticsEvents_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  CommonProperties = new THSuperProperties();
                  CommonProperties.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    Events = new List<THAnalyticsBaseEvent>();
                    TList _list82 = iprot.ReadListBegin();
                    for( int _i83 = 0; _i83 < _list82.Count; ++_i83)
                    {
                      THAnalyticsBaseEvent _elem84;
                      _elem84 = new THAnalyticsBaseEvent();
                      _elem84.Read(iprot);
                      Events.Add(_elem84);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("trackAnalyticsEvents_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (CommonProperties != null && __isset.commonProperties) {
            field.Name = "commonProperties";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            CommonProperties.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Events != null && __isset.events) {
            field.Name = "events";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Events.Count));
              foreach (THAnalyticsBaseEvent _iter85 in Events)
              {
                _iter85.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("trackAnalyticsEvents_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (CommonProperties != null && __isset.commonProperties) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CommonProperties: ");
          __sb.Append(CommonProperties== null ? "<null>" : CommonProperties.ToString());
        }
        if (Events != null && __isset.events) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Events: ");
          __sb.Append(Events.ToDebugString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class trackAnalyticsEvents_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public trackAnalyticsEvents_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("trackAnalyticsEvents_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("trackAnalyticsEvents_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerPushTarget_args : TBase
    {
      private string _sessionId;
      private THPushTarget _pushTargetData;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THPushTarget PushTargetData
      {
        get
        {
          return _pushTargetData;
        }
        set
        {
          __isset.pushTargetData = true;
          this._pushTargetData = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool pushTargetData;
      }

      public registerPushTarget_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  PushTargetData = new THPushTarget();
                  PushTargetData.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("registerPushTarget_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (PushTargetData != null && __isset.pushTargetData) {
            field.Name = "pushTargetData";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            PushTargetData.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("registerPushTarget_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (PushTargetData != null && __isset.pushTargetData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PushTargetData: ");
          __sb.Append(PushTargetData== null ? "<null>" : PushTargetData.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerPushTarget_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public registerPushTarget_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("registerPushTarget_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("registerPushTarget_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setPushNotificationsEnabled_args : TBase
    {
      private string _sessionId;
      private bool _enabled;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public bool Enabled
      {
        get
        {
          return _enabled;
        }
        set
        {
          __isset.enabled = true;
          this._enabled = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool enabled;
      }

      public setPushNotificationsEnabled_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Bool) {
                  Enabled = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setPushNotificationsEnabled_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (__isset.enabled) {
            field.Name = "enabled";
            field.Type = TType.Bool;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Enabled);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setPushNotificationsEnabled_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (__isset.enabled) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Enabled: ");
          __sb.Append(Enabled);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setPushNotificationsEnabled_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public setPushNotificationsEnabled_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setPushNotificationsEnabled_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setPushNotificationsEnabled_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isPushNotificationsEnabled_args : TBase
    {
      private string _sessionId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
      }

      public isPushNotificationsEnabled_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("isPushNotificationsEnabled_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("isPushNotificationsEnabled_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isPushNotificationsEnabled_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public isPushNotificationsEnabled_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("isPushNotificationsEnabled_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("isPushNotificationsEnabled_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendPushNotification_args : TBase
    {
      private string _sessionId;
      private THCustomNotification _notification;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THCustomNotification Notification
      {
        get
        {
          return _notification;
        }
        set
        {
          __isset.notification = true;
          this._notification = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool notification;
      }

      public sendPushNotification_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Notification = new THCustomNotification();
                  Notification.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("sendPushNotification_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Notification != null && __isset.notification) {
            field.Name = "notification";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Notification.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sendPushNotification_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Notification != null && __isset.notification) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Notification: ");
          __sb.Append(Notification== null ? "<null>" : Notification.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendPushNotification_result : TBase
    {
      private THNotificationsSummary _success;
      private THErrors _errors;

      public THNotificationsSummary Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public sendPushNotification_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THNotificationsSummary();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("sendPushNotification_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sendPushNotification_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendNotification_args : TBase
    {
      private SendNotificationRequest _request;

      public SendNotificationRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public sendNotification_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new SendNotificationRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("sendNotification_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sendNotification_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendNotification_result : TBase
    {
      private SendNotificationResponse _success;
      private THErrors _errors;

      public SendNotificationResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public sendNotification_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new SendNotificationResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("sendNotification_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sendNotification_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNotificationsList_args : TBase
    {
      private string _sessionId;
      private THNotificationsQuery _query;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THNotificationsQuery Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool query;
      }

      public getNotificationsList_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Query = new THNotificationsQuery();
                  Query.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getNotificationsList_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Query != null && __isset.query) {
            field.Name = "query";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Query.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getNotificationsList_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Query != null && __isset.query) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Query: ");
          __sb.Append(Query== null ? "<null>" : Query.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNotificationsList_result : TBase
    {
      private List<THNotification> _success;
      private THErrors _errors;

      public List<THNotification> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getNotificationsList_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THNotification>();
                    TList _list86 = iprot.ReadListBegin();
                    for( int _i87 = 0; _i87 < _list86.Count; ++_i87)
                    {
                      THNotification _elem88;
                      _elem88 = new THNotification();
                      _elem88.Read(iprot);
                      Success.Add(_elem88);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getNotificationsList_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THNotification _iter89 in Success)
                {
                  _iter89.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getNotificationsList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNotificationsCount_args : TBase
    {
      private string _sessionId;
      private THNotificationsQuery _query;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THNotificationsQuery Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool query;
      }

      public getNotificationsCount_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Query = new THNotificationsQuery();
                  Query.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getNotificationsCount_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Query != null && __isset.query) {
            field.Name = "query";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Query.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getNotificationsCount_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Query != null && __isset.query) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Query: ");
          __sb.Append(Query== null ? "<null>" : Query.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNotificationsCount_result : TBase
    {
      private int _success;
      private THErrors _errors;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getNotificationsCount_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getNotificationsCount_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getNotificationsCount_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setNotificationsStatus_args : TBase
    {
      private string _sessionId;
      private THNotificationsSetStatusParams _query;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THNotificationsSetStatusParams Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool query;
      }

      public setNotificationsStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Query = new THNotificationsSetStatusParams();
                  Query.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setNotificationsStatus_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Query != null && __isset.query) {
            field.Name = "query";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Query.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setNotificationsStatus_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Query != null && __isset.query) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Query: ");
          __sb.Append(Query== null ? "<null>" : Query.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setNotificationsStatus_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public setNotificationsStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setNotificationsStatus_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setNotificationsStatus_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNotifications_args : TBase
    {
      private GetNotificationsRequest _request;

      public GetNotificationsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getNotifications_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetNotificationsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getNotifications_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getNotifications_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNotifications_result : TBase
    {
      private GetNotificationsResponse _success;
      private THErrors _errors;

      public GetNotificationsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getNotifications_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetNotificationsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getNotifications_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getNotifications_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class claimPromoCode_args : TBase
    {
      private string _sessionId;
      private string _code;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Code
      {
        get
        {
          return _code;
        }
        set
        {
          __isset.code = true;
          this._code = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool code;
      }

      public claimPromoCode_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Code = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("claimPromoCode_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Code != null && __isset.code) {
            field.Name = "code";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Code);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("claimPromoCode_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Code != null && __isset.code) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Code: ");
          __sb.Append(Code);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class claimPromoCode_result : TBase
    {
      private THPromoCode _success;
      private THErrors _errors;

      public THPromoCode Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public claimPromoCode_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THPromoCode();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("claimPromoCode_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("claimPromoCode_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPromoCode_args : TBase
    {
      private string _sessionId;
      private string _code;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Code
      {
        get
        {
          return _code;
        }
        set
        {
          __isset.code = true;
          this._code = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool code;
      }

      public getPromoCode_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Code = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPromoCode_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Code != null && __isset.code) {
            field.Name = "code";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Code);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPromoCode_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Code != null && __isset.code) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Code: ");
          __sb.Append(Code);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPromoCode_result : TBase
    {
      private THPromoCode _success;
      private THErrors _errors;

      public THPromoCode Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getPromoCode_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THPromoCode();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPromoCode_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPromoCode_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setPromoCode_args : TBase
    {
      private string _sessionId;
      private THPromoCode _code;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THPromoCode Code
      {
        get
        {
          return _code;
        }
        set
        {
          __isset.code = true;
          this._code = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool code;
      }

      public setPromoCode_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Code = new THPromoCode();
                  Code.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setPromoCode_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Code != null && __isset.code) {
            field.Name = "code";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Code.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setPromoCode_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Code != null && __isset.code) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Code: ");
          __sb.Append(Code== null ? "<null>" : Code.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setPromoCode_result : TBase
    {
      private THPromoCode _success;
      private THErrors _errors;

      public THPromoCode Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public setPromoCode_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THPromoCode();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setPromoCode_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setPromoCode_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createPromoCode_args : TBase
    {
      private CreatePromoCodeRequest _request;

      public CreatePromoCodeRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public createPromoCode_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new CreatePromoCodeRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createPromoCode_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createPromoCode_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createPromoCode_result : TBase
    {
      private CreatePromoCodeResponse _success;
      private THErrors _errors;

      public CreatePromoCodeResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public createPromoCode_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new CreatePromoCodeResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createPromoCode_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createPromoCode_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPromoCodeV2_args : TBase
    {
      private GetPromoCodeRequest _request;

      public GetPromoCodeRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getPromoCodeV2_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetPromoCodeRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPromoCodeV2_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPromoCodeV2_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPromoCodeV2_result : TBase
    {
      private GetPromoCodeResponse _success;
      private THErrors _errors;

      public GetPromoCodeResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getPromoCodeV2_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetPromoCodeResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPromoCodeV2_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPromoCodeV2_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class claimPromoCodeV2_args : TBase
    {
      private ClaimPromoCodeRequest _request;

      public ClaimPromoCodeRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public claimPromoCodeV2_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new ClaimPromoCodeRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("claimPromoCodeV2_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("claimPromoCodeV2_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class claimPromoCodeV2_result : TBase
    {
      private ClaimPromoCodeResponse _success;
      private THErrors _errors;

      public ClaimPromoCodeResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public claimPromoCodeV2_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new ClaimPromoCodeResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("claimPromoCodeV2_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("claimPromoCodeV2_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getInviteProvidersByApp_args : TBase
    {
      private string _sessionId;
      private string _appId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
      }

      public getInviteProvidersByApp_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getInviteProvidersByApp_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getInviteProvidersByApp_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getInviteProvidersByApp_result : TBase
    {
      private THInviteProviders _success;
      private THErrors _errors;

      public THInviteProviders Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getInviteProvidersByApp_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THInviteProviders();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getInviteProvidersByApp_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getInviteProvidersByApp_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTokenInfo_args : TBase
    {
      private string _sessionId;
      private string _token;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Token
      {
        get
        {
          return _token;
        }
        set
        {
          __isset.token = true;
          this._token = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool token;
      }

      public getTokenInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Token = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getTokenInfo_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Token != null && __isset.token) {
            field.Name = "token";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Token);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getTokenInfo_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Token != null && __isset.token) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Token: ");
          __sb.Append(Token);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTokenInfo_result : TBase
    {
      private THTokenInfo _success;
      private THErrors _errors;

      public THTokenInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getTokenInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THTokenInfo();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getTokenInfo_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getTokenInfo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class trackAnalyticsEvent_args : TBase
    {
      private string _sessionId;
      private THAnalyticsEvent _event;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THAnalyticsEvent Event
      {
        get
        {
          return _event;
        }
        set
        {
          __isset.@event = true;
          this._event = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool @event;
      }

      public trackAnalyticsEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Event = new THAnalyticsEvent();
                  Event.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("trackAnalyticsEvent_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Event != null && __isset.@event) {
            field.Name = "event";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Event.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("trackAnalyticsEvent_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Event != null && __isset.@event) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Event: ");
          __sb.Append(Event== null ? "<null>" : Event.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class trackAnalyticsEvent_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public trackAnalyticsEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("trackAnalyticsEvent_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("trackAnalyticsEvent_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class trackInstall_args : TBase
    {
      private string _sessionId;
      private THFingerprint _fingerprint;
      private string _referrer;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THFingerprint Fingerprint
      {
        get
        {
          return _fingerprint;
        }
        set
        {
          __isset.fingerprint = true;
          this._fingerprint = value;
        }
      }

      public string Referrer
      {
        get
        {
          return _referrer;
        }
        set
        {
          __isset.referrer = true;
          this._referrer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool fingerprint;
        public bool referrer;
      }

      public trackInstall_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Fingerprint = new THFingerprint();
                  Fingerprint.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Referrer = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("trackInstall_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Fingerprint != null && __isset.fingerprint) {
            field.Name = "fingerprint";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Fingerprint.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Referrer != null && __isset.referrer) {
            field.Name = "referrer";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Referrer);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("trackInstall_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Fingerprint != null && __isset.fingerprint) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Fingerprint: ");
          __sb.Append(Fingerprint== null ? "<null>" : Fingerprint.ToString());
        }
        if (Referrer != null && __isset.referrer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Referrer: ");
          __sb.Append(Referrer);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class trackInstall_result : TBase
    {
      private string _success;
      private THErrors _errors;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public trackInstall_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("trackInstall_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("trackInstall_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUploadURL_args : TBase
    {
      private string _sessionId;
      private THUploadParams _uploadParams;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THUploadParams UploadParams
      {
        get
        {
          return _uploadParams;
        }
        set
        {
          __isset.uploadParams = true;
          this._uploadParams = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool uploadParams;
      }

      public getUploadURL_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  UploadParams = new THUploadParams();
                  UploadParams.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getUploadURL_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (UploadParams != null && __isset.uploadParams) {
            field.Name = "uploadParams";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            UploadParams.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUploadURL_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (UploadParams != null && __isset.uploadParams) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UploadParams: ");
          __sb.Append(UploadParams== null ? "<null>" : UploadParams.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUploadURL_result : TBase
    {
      private string _success;
      private THErrors _errors;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getUploadURL_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getUploadURL_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUploadURL_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class login_args : TBase
    {
      private string _email;
      private string _password;

      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool email;
        public bool password;
      }

      public login_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Email = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Password = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("login_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Email != null && __isset.email) {
            field.Name = "email";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Email);
            oprot.WriteFieldEnd();
          }
          if (Password != null && __isset.password) {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Password);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("login_args(");
        bool __first = true;
        if (Email != null && __isset.email) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Email: ");
          __sb.Append(Email);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class login_result : TBase
    {
      private THLoginResponse _success;
      private THErrors _errors;

      public THLoginResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public login_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THLoginResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("login_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("login_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loginWithSession_args : TBase
    {
      private string _sessionId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
      }

      public loginWithSession_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("loginWithSession_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("loginWithSession_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loginWithSession_result : TBase
    {
      private THLoginResponse _success;
      private THErrors _errors;

      public THLoginResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public loginWithSession_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THLoginResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("loginWithSession_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("loginWithSession_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getOAuthLoginURL_args : TBase
    {
      private string _provider;

      public string Provider
      {
        get
        {
          return _provider;
        }
        set
        {
          __isset.provider = true;
          this._provider = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool provider;
      }

      public getOAuthLoginURL_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Provider = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getOAuthLoginURL_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Provider != null && __isset.provider) {
            field.Name = "provider";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Provider);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getOAuthLoginURL_args(");
        bool __first = true;
        if (Provider != null && __isset.provider) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Provider: ");
          __sb.Append(Provider);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getOAuthLoginURL_result : TBase
    {
      private string _success;
      private THErrors _errors;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getOAuthLoginURL_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getOAuthLoginURL_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getOAuthLoginURL_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loginWithOAuthCode_args : TBase
    {
      private string _provider;
      private string _code;
      private string _referrer;

      public string Provider
      {
        get
        {
          return _provider;
        }
        set
        {
          __isset.provider = true;
          this._provider = value;
        }
      }

      public string Code
      {
        get
        {
          return _code;
        }
        set
        {
          __isset.code = true;
          this._code = value;
        }
      }

      public string Referrer
      {
        get
        {
          return _referrer;
        }
        set
        {
          __isset.referrer = true;
          this._referrer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool provider;
        public bool code;
        public bool referrer;
      }

      public loginWithOAuthCode_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Provider = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Code = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Referrer = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("loginWithOAuthCode_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Provider != null && __isset.provider) {
            field.Name = "provider";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Provider);
            oprot.WriteFieldEnd();
          }
          if (Code != null && __isset.code) {
            field.Name = "code";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Code);
            oprot.WriteFieldEnd();
          }
          if (Referrer != null && __isset.referrer) {
            field.Name = "referrer";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Referrer);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("loginWithOAuthCode_args(");
        bool __first = true;
        if (Provider != null && __isset.provider) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Provider: ");
          __sb.Append(Provider);
        }
        if (Code != null && __isset.code) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Code: ");
          __sb.Append(Code);
        }
        if (Referrer != null && __isset.referrer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Referrer: ");
          __sb.Append(Referrer);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loginWithOAuthCode_result : TBase
    {
      private THLoginOrRegisterResponse _success;
      private THErrors _errors;

      public THLoginOrRegisterResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public loginWithOAuthCode_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THLoginOrRegisterResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("loginWithOAuthCode_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("loginWithOAuthCode_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loginETLOnly_args : TBase
    {
      private string _appId;
      private string _token;

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string Token
      {
        get
        {
          return _token;
        }
        set
        {
          __isset.token = true;
          this._token = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool appId;
        public bool token;
      }

      public loginETLOnly_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Token = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("loginETLOnly_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Token != null && __isset.token) {
            field.Name = "token";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Token);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("loginETLOnly_args(");
        bool __first = true;
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Token != null && __isset.token) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Token: ");
          __sb.Append(Token);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loginETLOnly_result : TBase
    {
      private string _success;
      private THErrors _errors;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public loginETLOnly_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("loginETLOnly_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("loginETLOnly_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logout_args : TBase
    {
      private string _sessionId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
      }

      public logout_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("logout_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("logout_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logout_result : TBase
    {
      private THErrors _errors;

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool errors;
      }

      public logout_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("logout_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("logout_result(");
        bool __first = true;
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerAccount_args : TBase
    {
      private string _email;
      private string _password;
      private string _companyName;
      private string _referrer;

      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      public string CompanyName
      {
        get
        {
          return _companyName;
        }
        set
        {
          __isset.companyName = true;
          this._companyName = value;
        }
      }

      public string Referrer
      {
        get
        {
          return _referrer;
        }
        set
        {
          __isset.referrer = true;
          this._referrer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool email;
        public bool password;
        public bool companyName;
        public bool referrer;
      }

      public registerAccount_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Email = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Password = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  CompanyName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  Referrer = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("registerAccount_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Email != null && __isset.email) {
            field.Name = "email";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Email);
            oprot.WriteFieldEnd();
          }
          if (Password != null && __isset.password) {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Password);
            oprot.WriteFieldEnd();
          }
          if (CompanyName != null && __isset.companyName) {
            field.Name = "companyName";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CompanyName);
            oprot.WriteFieldEnd();
          }
          if (Referrer != null && __isset.referrer) {
            field.Name = "referrer";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Referrer);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("registerAccount_args(");
        bool __first = true;
        if (Email != null && __isset.email) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Email: ");
          __sb.Append(Email);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        if (CompanyName != null && __isset.companyName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CompanyName: ");
          __sb.Append(CompanyName);
        }
        if (Referrer != null && __isset.referrer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Referrer: ");
          __sb.Append(Referrer);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerAccount_result : TBase
    {
      private THRegistrationResponse _success;
      private THErrors _errors;

      public THRegistrationResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public registerAccount_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THRegistrationResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("registerAccount_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("registerAccount_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerUser_args : TBase
    {
      private string _email;
      private string _password;
      private string _referrer;

      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      public string Referrer
      {
        get
        {
          return _referrer;
        }
        set
        {
          __isset.referrer = true;
          this._referrer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool email;
        public bool password;
        public bool referrer;
      }

      public registerUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Email = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Password = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Referrer = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("registerUser_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Email != null && __isset.email) {
            field.Name = "email";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Email);
            oprot.WriteFieldEnd();
          }
          if (Password != null && __isset.password) {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Password);
            oprot.WriteFieldEnd();
          }
          if (Referrer != null && __isset.referrer) {
            field.Name = "referrer";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Referrer);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("registerUser_args(");
        bool __first = true;
        if (Email != null && __isset.email) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Email: ");
          __sb.Append(Email);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        if (Referrer != null && __isset.referrer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Referrer: ");
          __sb.Append(Referrer);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerUser_result : TBase
    {
      private THRegistrationResponse _success;
      private THErrors _errors;

      public THRegistrationResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public registerUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THRegistrationResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("registerUser_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("registerUser_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createApplication_args : TBase
    {
      private string _sessionId;
      private string _companyId;
      private string _name;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string CompanyId
      {
        get
        {
          return _companyId;
        }
        set
        {
          __isset.companyId = true;
          this._companyId = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool companyId;
        public bool name;
      }

      public createApplication_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CompanyId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createApplication_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (CompanyId != null && __isset.companyId) {
            field.Name = "companyId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CompanyId);
            oprot.WriteFieldEnd();
          }
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createApplication_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (CompanyId != null && __isset.companyId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CompanyId: ");
          __sb.Append(CompanyId);
        }
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createApplication_result : TBase
    {
      private THApplication _success;
      private THErrors _errors;

      public THApplication Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public createApplication_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THApplication();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createApplication_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createApplication_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateApplication_args : TBase
    {
      private string _sessionId;
      private THApplication _app;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THApplication App
      {
        get
        {
          return _app;
        }
        set
        {
          __isset.app = true;
          this._app = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool app;
      }

      public updateApplication_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  App = new THApplication();
                  App.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateApplication_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (App != null && __isset.app) {
            field.Name = "app";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            App.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateApplication_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (App != null && __isset.app) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("App: ");
          __sb.Append(App== null ? "<null>" : App.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateApplication_result : TBase
    {
      private THApplication _success;
      private THErrors _errors;

      public THApplication Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public updateApplication_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THApplication();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateApplication_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateApplication_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteApplication_args : TBase
    {
      private string _sessionId;
      private string _appId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
      }

      public deleteApplication_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteApplication_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteApplication_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteApplication_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public deleteApplication_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteApplication_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteApplication_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addAppPlatform_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private THAppPlatform _platform;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public THAppPlatform Platform
      {
        get
        {
          return _platform;
        }
        set
        {
          __isset.platform = true;
          this._platform = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool platform;
      }

      public addAppPlatform_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Platform = new THAppPlatform();
                  Platform.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("addAppPlatform_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Platform != null && __isset.platform) {
            field.Name = "platform";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Platform.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addAppPlatform_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Platform != null && __isset.platform) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Platform: ");
          __sb.Append(Platform== null ? "<null>" : Platform.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addAppPlatform_result : TBase
    {
      private THAppPlatform _success;
      private THErrors _errors;

      public THAppPlatform Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public addAppPlatform_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THAppPlatform();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("addAppPlatform_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addAppPlatform_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAppPlatforms_args : TBase
    {
      private string _sessionId;
      private string _appId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
      }

      public getAppPlatforms_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAppPlatforms_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAppPlatforms_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAppPlatforms_result : TBase
    {
      private List<THAppPlatform> _success;
      private THErrors _errors;

      public List<THAppPlatform> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getAppPlatforms_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THAppPlatform>();
                    TList _list90 = iprot.ReadListBegin();
                    for( int _i91 = 0; _i91 < _list90.Count; ++_i91)
                    {
                      THAppPlatform _elem92;
                      _elem92 = new THAppPlatform();
                      _elem92.Read(iprot);
                      Success.Add(_elem92);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAppPlatforms_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THAppPlatform _iter93 in Success)
                {
                  _iter93.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAppPlatforms_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateAppPlatform_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private THAppPlatform _platform;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public THAppPlatform Platform
      {
        get
        {
          return _platform;
        }
        set
        {
          __isset.platform = true;
          this._platform = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool platform;
      }

      public updateAppPlatform_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Platform = new THAppPlatform();
                  Platform.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateAppPlatform_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Platform != null && __isset.platform) {
            field.Name = "platform";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Platform.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateAppPlatform_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Platform != null && __isset.platform) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Platform: ");
          __sb.Append(Platform== null ? "<null>" : Platform.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateAppPlatform_result : TBase
    {
      private THAppPlatform _success;
      private THErrors _errors;

      public THAppPlatform Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public updateAppPlatform_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THAppPlatform();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateAppPlatform_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateAppPlatform_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteAppPlatform_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private string _platformId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string PlatformId
      {
        get
        {
          return _platformId;
        }
        set
        {
          __isset.platformId = true;
          this._platformId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool platformId;
      }

      public deleteAppPlatform_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  PlatformId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteAppPlatform_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (PlatformId != null && __isset.platformId) {
            field.Name = "platformId";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(PlatformId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteAppPlatform_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (PlatformId != null && __isset.platformId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PlatformId: ");
          __sb.Append(PlatformId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteAppPlatform_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public deleteAppPlatform_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteAppPlatform_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteAppPlatform_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAppAndPlatforms_args : TBase
    {
      private string _sessionId;
      private string _appId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
      }

      public getAppAndPlatforms_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAppAndPlatforms_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAppAndPlatforms_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAppAndPlatforms_result : TBase
    {
      private THAppAndPlatformsResponse _success;
      private THErrors _errors;

      public THAppAndPlatformsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getAppAndPlatforms_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THAppAndPlatformsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAppAndPlatforms_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAppAndPlatforms_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createTeamMember_args : TBase
    {
      private string _sessionId;
      private THCompanyTeamMember _member;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THCompanyTeamMember Member
      {
        get
        {
          return _member;
        }
        set
        {
          __isset.member = true;
          this._member = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool member;
      }

      public createTeamMember_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Member = new THCompanyTeamMember();
                  Member.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createTeamMember_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Member != null && __isset.member) {
            field.Name = "member";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Member.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createTeamMember_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Member != null && __isset.member) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Member: ");
          __sb.Append(Member== null ? "<null>" : Member.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createTeamMember_result : TBase
    {
      private THCompanyTeamMember _success;
      private THErrors _errors;

      public THCompanyTeamMember Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public createTeamMember_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THCompanyTeamMember();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createTeamMember_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createTeamMember_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllTeamMembers_args : TBase
    {
      private string _sessionId;
      private string _companyId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string CompanyId
      {
        get
        {
          return _companyId;
        }
        set
        {
          __isset.companyId = true;
          this._companyId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool companyId;
      }

      public getAllTeamMembers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CompanyId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAllTeamMembers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (CompanyId != null && __isset.companyId) {
            field.Name = "companyId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CompanyId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAllTeamMembers_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (CompanyId != null && __isset.companyId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CompanyId: ");
          __sb.Append(CompanyId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllTeamMembers_result : TBase
    {
      private List<THCompanyTeamMember> _success;
      private THErrors _errors;

      public List<THCompanyTeamMember> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getAllTeamMembers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THCompanyTeamMember>();
                    TList _list94 = iprot.ReadListBegin();
                    for( int _i95 = 0; _i95 < _list94.Count; ++_i95)
                    {
                      THCompanyTeamMember _elem96;
                      _elem96 = new THCompanyTeamMember();
                      _elem96.Read(iprot);
                      Success.Add(_elem96);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAllTeamMembers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THCompanyTeamMember _iter97 in Success)
                {
                  _iter97.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAllTeamMembers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateTeamMember_args : TBase
    {
      private string _sessionId;
      private THCompanyTeamMember _member;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THCompanyTeamMember Member
      {
        get
        {
          return _member;
        }
        set
        {
          __isset.member = true;
          this._member = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool member;
      }

      public updateTeamMember_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Member = new THCompanyTeamMember();
                  Member.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateTeamMember_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Member != null && __isset.member) {
            field.Name = "member";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Member.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateTeamMember_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Member != null && __isset.member) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Member: ");
          __sb.Append(Member== null ? "<null>" : Member.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateTeamMember_result : TBase
    {
      private THCompanyTeamMember _success;
      private THErrors _errors;

      public THCompanyTeamMember Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public updateTeamMember_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THCompanyTeamMember();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateTeamMember_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateTeamMember_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteTeamMember_args : TBase
    {
      private string _sessionId;
      private string _memberId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string MemberId
      {
        get
        {
          return _memberId;
        }
        set
        {
          __isset.memberId = true;
          this._memberId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool memberId;
      }

      public deleteTeamMember_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  MemberId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteTeamMember_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (MemberId != null && __isset.memberId) {
            field.Name = "memberId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MemberId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteTeamMember_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (MemberId != null && __isset.memberId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemberId: ");
          __sb.Append(MemberId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteTeamMember_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public deleteTeamMember_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteTeamMember_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteTeamMember_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompany_args : TBase
    {
      private string _sessionId;
      private string _companyId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string CompanyId
      {
        get
        {
          return _companyId;
        }
        set
        {
          __isset.companyId = true;
          this._companyId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool companyId;
      }

      public getCompany_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CompanyId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getCompany_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (CompanyId != null && __isset.companyId) {
            field.Name = "companyId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CompanyId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCompany_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (CompanyId != null && __isset.companyId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CompanyId: ");
          __sb.Append(CompanyId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompany_result : TBase
    {
      private THCompany _success;
      private THErrors _errors;

      public THCompany Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getCompany_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THCompany();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getCompany_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCompany_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateCompany_args : TBase
    {
      private string _sessionId;
      private THCompany _company;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THCompany Company
      {
        get
        {
          return _company;
        }
        set
        {
          __isset.company = true;
          this._company = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool company;
      }

      public updateCompany_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Company = new THCompany();
                  Company.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateCompany_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Company != null && __isset.company) {
            field.Name = "company";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Company.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateCompany_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Company != null && __isset.company) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Company: ");
          __sb.Append(Company== null ? "<null>" : Company.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateCompany_result : TBase
    {
      private THCompany _success;
      private THErrors _errors;

      public THCompany Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public updateCompany_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THCompany();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateCompany_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateCompany_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendPasswordResetEmail_args : TBase
    {
      private string _email;

      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool email;
      }

      public sendPasswordResetEmail_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Email = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("sendPasswordResetEmail_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Email != null && __isset.email) {
            field.Name = "email";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Email);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sendPasswordResetEmail_args(");
        bool __first = true;
        if (Email != null && __isset.email) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Email: ");
          __sb.Append(Email);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendPasswordResetEmail_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public sendPasswordResetEmail_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("sendPasswordResetEmail_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sendPasswordResetEmail_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class resetPassword_args : TBase
    {
      private string _token;
      private string _email;
      private string _password;
      private string _passwordRepeat;

      public string Token
      {
        get
        {
          return _token;
        }
        set
        {
          __isset.token = true;
          this._token = value;
        }
      }

      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      public string PasswordRepeat
      {
        get
        {
          return _passwordRepeat;
        }
        set
        {
          __isset.passwordRepeat = true;
          this._passwordRepeat = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool token;
        public bool email;
        public bool password;
        public bool passwordRepeat;
      }

      public resetPassword_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Token = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Email = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Password = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  PasswordRepeat = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("resetPassword_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Token != null && __isset.token) {
            field.Name = "token";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Token);
            oprot.WriteFieldEnd();
          }
          if (Email != null && __isset.email) {
            field.Name = "email";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Email);
            oprot.WriteFieldEnd();
          }
          if (Password != null && __isset.password) {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Password);
            oprot.WriteFieldEnd();
          }
          if (PasswordRepeat != null && __isset.passwordRepeat) {
            field.Name = "passwordRepeat";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(PasswordRepeat);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("resetPassword_args(");
        bool __first = true;
        if (Token != null && __isset.token) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Token: ");
          __sb.Append(Token);
        }
        if (Email != null && __isset.email) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Email: ");
          __sb.Append(Email);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        if (PasswordRepeat != null && __isset.passwordRepeat) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PasswordRepeat: ");
          __sb.Append(PasswordRepeat);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class resetPassword_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public resetPassword_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("resetPassword_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("resetPassword_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createPassword_args : TBase
    {
      private string _token;
      private string _email;
      private string _password;
      private string _passwordRepeat;

      public string Token
      {
        get
        {
          return _token;
        }
        set
        {
          __isset.token = true;
          this._token = value;
        }
      }

      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      public string PasswordRepeat
      {
        get
        {
          return _passwordRepeat;
        }
        set
        {
          __isset.passwordRepeat = true;
          this._passwordRepeat = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool token;
        public bool email;
        public bool password;
        public bool passwordRepeat;
      }

      public createPassword_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Token = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Email = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Password = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  PasswordRepeat = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createPassword_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Token != null && __isset.token) {
            field.Name = "token";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Token);
            oprot.WriteFieldEnd();
          }
          if (Email != null && __isset.email) {
            field.Name = "email";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Email);
            oprot.WriteFieldEnd();
          }
          if (Password != null && __isset.password) {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Password);
            oprot.WriteFieldEnd();
          }
          if (PasswordRepeat != null && __isset.passwordRepeat) {
            field.Name = "passwordRepeat";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(PasswordRepeat);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createPassword_args(");
        bool __first = true;
        if (Token != null && __isset.token) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Token: ");
          __sb.Append(Token);
        }
        if (Email != null && __isset.email) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Email: ");
          __sb.Append(Email);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        if (PasswordRepeat != null && __isset.passwordRepeat) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PasswordRepeat: ");
          __sb.Append(PasswordRepeat);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createPassword_result : TBase
    {
      private THLoginResponse _success;
      private THErrors _errors;

      public THLoginResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public createPassword_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THLoginResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createPassword_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createPassword_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class extendSession_args : TBase
    {
      private string _sessionId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
      }

      public extendSession_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("extendSession_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("extendSession_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class extendSession_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public extendSession_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("extendSession_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("extendSession_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRemainingSessionTime_args : TBase
    {
      private string _sessionId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
      }

      public getRemainingSessionTime_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getRemainingSessionTime_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getRemainingSessionTime_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRemainingSessionTime_result : TBase
    {
      private long _success;
      private THErrors _errors;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getRemainingSessionTime_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getRemainingSessionTime_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getRemainingSessionTime_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class validatePasswordLink_args : TBase
    {
      private string _email;
      private string _hash;

      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      public string Hash
      {
        get
        {
          return _hash;
        }
        set
        {
          __isset.hash = true;
          this._hash = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool email;
        public bool hash;
      }

      public validatePasswordLink_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Email = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Hash = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("validatePasswordLink_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Email != null && __isset.email) {
            field.Name = "email";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Email);
            oprot.WriteFieldEnd();
          }
          if (Hash != null && __isset.hash) {
            field.Name = "hash";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Hash);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("validatePasswordLink_args(");
        bool __first = true;
        if (Email != null && __isset.email) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Email: ");
          __sb.Append(Email);
        }
        if (Hash != null && __isset.hash) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Hash: ");
          __sb.Append(Hash);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class validatePasswordLink_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public validatePasswordLink_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("validatePasswordLink_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("validatePasswordLink_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPublicUsers_args : TBase
    {
      private string _sessionId;
      private List<string> _ids;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public List<string> Ids
      {
        get
        {
          return _ids;
        }
        set
        {
          __isset.ids = true;
          this._ids = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool ids;
      }

      public getPublicUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    Ids = new List<string>();
                    TList _list98 = iprot.ReadListBegin();
                    for( int _i99 = 0; _i99 < _list98.Count; ++_i99)
                    {
                      string _elem100;
                      _elem100 = iprot.ReadString();
                      Ids.Add(_elem100);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPublicUsers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Ids != null && __isset.ids) {
            field.Name = "ids";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Ids.Count));
              foreach (string _iter101 in Ids)
              {
                oprot.WriteString(_iter101);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPublicUsers_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Ids != null && __isset.ids) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ids: ");
          __sb.Append(Ids.ToDebugString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPublicUsers_result : TBase
    {
      private List<THPublicUser> _success;
      private THErrors _errors;

      public List<THPublicUser> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getPublicUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THPublicUser>();
                    TList _list102 = iprot.ReadListBegin();
                    for( int _i103 = 0; _i103 < _list102.Count; ++_i103)
                    {
                      THPublicUser _elem104;
                      _elem104 = new THPublicUser();
                      _elem104.Read(iprot);
                      Success.Add(_elem104);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPublicUsers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THPublicUser _iter105 in Success)
                {
                  _iter105.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPublicUsers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findAppUsers_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private THUsersQuery _query;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public THUsersQuery Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool query;
      }

      public findAppUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Query = new THUsersQuery();
                  Query.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findAppUsers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Query != null && __isset.query) {
            field.Name = "query";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Query.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findAppUsers_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Query != null && __isset.query) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Query: ");
          __sb.Append(Query== null ? "<null>" : Query.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findAppUsers_result : TBase
    {
      private List<THUserReference> _success;
      private THErrors _errors;

      public List<THUserReference> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public findAppUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THUserReference>();
                    TList _list106 = iprot.ReadListBegin();
                    for( int _i107 = 0; _i107 < _list106.Count; ++_i107)
                    {
                      THUserReference _elem108;
                      _elem108 = new THUserReference();
                      _elem108.Read(iprot);
                      Success.Add(_elem108);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findAppUsers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THUserReference _iter109 in Success)
                {
                  _iter109.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findAppUsers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateAppUser_args : TBase
    {
      private string _sessionId;
      private string _userId;
      private THPrivateUser _request;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public THPrivateUser Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool userId;
        public bool request;
      }

      public updateAppUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  UserId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Request = new THPrivateUser();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateAppUser_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (UserId != null && __isset.userId) {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserId);
            oprot.WriteFieldEnd();
          }
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateAppUser_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateAppUser_result : TBase
    {
      private THPrivateUser _success;
      private THErrors _errors;

      public THPrivateUser Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public updateAppUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THPrivateUser();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateAppUser_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateAppUser_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPrivateUser_args : TBase
    {
      private string _sessionId;
      private string _userId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool userId;
      }

      public getPrivateUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  UserId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPrivateUser_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (UserId != null && __isset.userId) {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPrivateUser_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPrivateUser_result : TBase
    {
      private THPrivateUser _success;
      private THErrors _errors;

      public THPrivateUser Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getPrivateUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THPrivateUser();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPrivateUser_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPrivateUser_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateAppleAppSiteAssociation_args : TBase
    {
      private string _sessionId;
      private string _prefix;
      private string _inviteDomain;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Prefix
      {
        get
        {
          return _prefix;
        }
        set
        {
          __isset.prefix = true;
          this._prefix = value;
        }
      }

      public string InviteDomain
      {
        get
        {
          return _inviteDomain;
        }
        set
        {
          __isset.inviteDomain = true;
          this._inviteDomain = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool prefix;
        public bool inviteDomain;
      }

      public updateAppleAppSiteAssociation_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Prefix = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  InviteDomain = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateAppleAppSiteAssociation_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Prefix != null && __isset.prefix) {
            field.Name = "prefix";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Prefix);
            oprot.WriteFieldEnd();
          }
          if (InviteDomain != null && __isset.inviteDomain) {
            field.Name = "inviteDomain";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(InviteDomain);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateAppleAppSiteAssociation_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Prefix != null && __isset.prefix) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Prefix: ");
          __sb.Append(Prefix);
        }
        if (InviteDomain != null && __isset.inviteDomain) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InviteDomain: ");
          __sb.Append(InviteDomain);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateAppleAppSiteAssociation_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public updateAppleAppSiteAssociation_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateAppleAppSiteAssociation_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateAppleAppSiteAssociation_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateAndroidAppLinks_args : TBase
    {
      private string _sessionId;
      private string _prefix;
      private string _inviteDomain;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Prefix
      {
        get
        {
          return _prefix;
        }
        set
        {
          __isset.prefix = true;
          this._prefix = value;
        }
      }

      public string InviteDomain
      {
        get
        {
          return _inviteDomain;
        }
        set
        {
          __isset.inviteDomain = true;
          this._inviteDomain = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool prefix;
        public bool inviteDomain;
      }

      public updateAndroidAppLinks_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Prefix = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  InviteDomain = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateAndroidAppLinks_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Prefix != null && __isset.prefix) {
            field.Name = "prefix";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Prefix);
            oprot.WriteFieldEnd();
          }
          if (InviteDomain != null && __isset.inviteDomain) {
            field.Name = "inviteDomain";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(InviteDomain);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateAndroidAppLinks_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Prefix != null && __isset.prefix) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Prefix: ");
          __sb.Append(Prefix);
        }
        if (InviteDomain != null && __isset.inviteDomain) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InviteDomain: ");
          __sb.Append(InviteDomain);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateAndroidAppLinks_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public updateAndroidAppLinks_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateAndroidAppLinks_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateAndroidAppLinks_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class processCustomDomain_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private string _domain;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string Domain
      {
        get
        {
          return _domain;
        }
        set
        {
          __isset.domain = true;
          this._domain = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool domain;
      }

      public processCustomDomain_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Domain = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("processCustomDomain_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Domain != null && __isset.domain) {
            field.Name = "domain";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Domain);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("processCustomDomain_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Domain != null && __isset.domain) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Domain: ");
          __sb.Append(Domain);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class processCustomDomain_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public processCustomDomain_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("processCustomDomain_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("processCustomDomain_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeCustomDomain_args : TBase
    {
      private string _sessionId;
      private string _appId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
      }

      public removeCustomDomain_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeCustomDomain_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeCustomDomain_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeCustomDomain_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public removeCustomDomain_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeCustomDomain_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeCustomDomain_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class validateDomain_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private string _domain;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string Domain
      {
        get
        {
          return _domain;
        }
        set
        {
          __isset.domain = true;
          this._domain = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool domain;
      }

      public validateDomain_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Domain = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("validateDomain_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Domain != null && __isset.domain) {
            field.Name = "domain";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Domain);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("validateDomain_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Domain != null && __isset.domain) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Domain: ");
          __sb.Append(Domain);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class validateDomain_result : TBase
    {
      private ValidateDomainResponse _success;
      private THErrors _errors;

      public ValidateDomainResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public validateDomain_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new ValidateDomainResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("validateDomain_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("validateDomain_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getDomainNameServers_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private string _domain;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string Domain
      {
        get
        {
          return _domain;
        }
        set
        {
          __isset.domain = true;
          this._domain = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool domain;
      }

      public getDomainNameServers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Domain = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getDomainNameServers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Domain != null && __isset.domain) {
            field.Name = "domain";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Domain);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getDomainNameServers_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Domain != null && __isset.domain) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Domain: ");
          __sb.Append(Domain);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getDomainNameServers_result : TBase
    {
      private List<string> _success;
      private THErrors _errors;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getDomainNameServers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<string>();
                    TList _list110 = iprot.ReadListBegin();
                    for( int _i111 = 0; _i111 < _list110.Count; ++_i111)
                    {
                      string _elem112;
                      _elem112 = iprot.ReadString();
                      Success.Add(_elem112);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getDomainNameServers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.String, Success.Count));
                foreach (string _iter113 in Success)
                {
                  oprot.WriteString(_iter113);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getDomainNameServers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateInviteProviders_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private List<THInviteProvider> _providers;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public List<THInviteProvider> Providers
      {
        get
        {
          return _providers;
        }
        set
        {
          __isset.providers = true;
          this._providers = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool providers;
      }

      public updateInviteProviders_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    Providers = new List<THInviteProvider>();
                    TList _list114 = iprot.ReadListBegin();
                    for( int _i115 = 0; _i115 < _list114.Count; ++_i115)
                    {
                      THInviteProvider _elem116;
                      _elem116 = new THInviteProvider();
                      _elem116.Read(iprot);
                      Providers.Add(_elem116);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateInviteProviders_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Providers != null && __isset.providers) {
            field.Name = "providers";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Providers.Count));
              foreach (THInviteProvider _iter117 in Providers)
              {
                _iter117.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateInviteProviders_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Providers != null && __isset.providers) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Providers: ");
          __sb.Append(Providers.ToDebugString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateInviteProviders_result : TBase
    {
      private List<THInviteProvider> _success;
      private THErrors _errors;

      public List<THInviteProvider> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public updateInviteProviders_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THInviteProvider>();
                    TList _list118 = iprot.ReadListBegin();
                    for( int _i119 = 0; _i119 < _list118.Count; ++_i119)
                    {
                      THInviteProvider _elem120;
                      _elem120 = new THInviteProvider();
                      _elem120.Read(iprot);
                      Success.Add(_elem120);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateInviteProviders_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THInviteProvider _iter121 in Success)
                {
                  _iter121.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateInviteProviders_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class inspectLink_args : TBase
    {
      private string _sessionId;
      private string _linkUrl;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string LinkUrl
      {
        get
        {
          return _linkUrl;
        }
        set
        {
          __isset.linkUrl = true;
          this._linkUrl = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool linkUrl;
      }

      public inspectLink_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  LinkUrl = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("inspectLink_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (LinkUrl != null && __isset.linkUrl) {
            field.Name = "linkUrl";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LinkUrl);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("inspectLink_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (LinkUrl != null && __isset.linkUrl) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LinkUrl: ");
          __sb.Append(LinkUrl);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class inspectLink_result : TBase
    {
      private THLinkDetails _success;
      private THErrors _errors;

      public THLinkDetails Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public inspectLink_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THLinkDetails();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("inspectLink_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("inspectLink_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setPushCertificate_args : TBase
    {
      private string _sessionId;
      private THSetPushCertificateRequest _request;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THSetPushCertificateRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool request;
      }

      public setPushCertificate_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Request = new THSetPushCertificateRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setPushCertificate_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setPushCertificate_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setPushCertificate_result : TBase
    {
      private THAppPlatform _success;
      private THErrors _errors;

      public THAppPlatform Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public setPushCertificate_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THAppPlatform();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setPushCertificate_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setPushCertificate_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendDeviceNotifications_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private THCustomNotification _data;
      private List<string> _deviceIds;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public THCustomNotification Data
      {
        get
        {
          return _data;
        }
        set
        {
          __isset.data = true;
          this._data = value;
        }
      }

      public List<string> DeviceIds
      {
        get
        {
          return _deviceIds;
        }
        set
        {
          __isset.deviceIds = true;
          this._deviceIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool data;
        public bool deviceIds;
      }

      public sendDeviceNotifications_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Data = new THCustomNotification();
                  Data.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.List) {
                  {
                    DeviceIds = new List<string>();
                    TList _list122 = iprot.ReadListBegin();
                    for( int _i123 = 0; _i123 < _list122.Count; ++_i123)
                    {
                      string _elem124;
                      _elem124 = iprot.ReadString();
                      DeviceIds.Add(_elem124);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("sendDeviceNotifications_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Data != null && __isset.data) {
            field.Name = "data";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Data.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (DeviceIds != null && __isset.deviceIds) {
            field.Name = "deviceIds";
            field.Type = TType.List;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, DeviceIds.Count));
              foreach (string _iter125 in DeviceIds)
              {
                oprot.WriteString(_iter125);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sendDeviceNotifications_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Data != null && __isset.data) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Data: ");
          __sb.Append(Data== null ? "<null>" : Data.ToString());
        }
        if (DeviceIds != null && __isset.deviceIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DeviceIds: ");
          __sb.Append(DeviceIds.ToDebugString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendDeviceNotifications_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public sendDeviceNotifications_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("sendDeviceNotifications_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sendDeviceNotifications_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getDeviceNotificationsInfo_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private List<string> _deviceIds;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public List<string> DeviceIds
      {
        get
        {
          return _deviceIds;
        }
        set
        {
          __isset.deviceIds = true;
          this._deviceIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool deviceIds;
      }

      public getDeviceNotificationsInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    DeviceIds = new List<string>();
                    TList _list126 = iprot.ReadListBegin();
                    for( int _i127 = 0; _i127 < _list126.Count; ++_i127)
                    {
                      string _elem128;
                      _elem128 = iprot.ReadString();
                      DeviceIds.Add(_elem128);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getDeviceNotificationsInfo_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (DeviceIds != null && __isset.deviceIds) {
            field.Name = "deviceIds";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, DeviceIds.Count));
              foreach (string _iter129 in DeviceIds)
              {
                oprot.WriteString(_iter129);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getDeviceNotificationsInfo_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (DeviceIds != null && __isset.deviceIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DeviceIds: ");
          __sb.Append(DeviceIds.ToDebugString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getDeviceNotificationsInfo_result : TBase
    {
      private List<THDeviceNotificationsInfo> _success;
      private THErrors _errors;

      public List<THDeviceNotificationsInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getDeviceNotificationsInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THDeviceNotificationsInfo>();
                    TList _list130 = iprot.ReadListBegin();
                    for( int _i131 = 0; _i131 < _list130.Count; ++_i131)
                    {
                      THDeviceNotificationsInfo _elem132;
                      _elem132 = new THDeviceNotificationsInfo();
                      _elem132.Read(iprot);
                      Success.Add(_elem132);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getDeviceNotificationsInfo_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THDeviceNotificationsInfo _iter133 in Success)
                {
                  _iter133.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getDeviceNotificationsInfo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAppActivities_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private string _feed;
      private THActivitiesQuery _query;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string Feed
      {
        get
        {
          return _feed;
        }
        set
        {
          __isset.feed = true;
          this._feed = value;
        }
      }

      public THActivitiesQuery Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool feed;
        public bool query;
      }

      public getAppActivities_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Feed = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Struct) {
                  Query = new THActivitiesQuery();
                  Query.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAppActivities_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Feed != null && __isset.feed) {
            field.Name = "feed";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Feed);
            oprot.WriteFieldEnd();
          }
          if (Query != null && __isset.query) {
            field.Name = "query";
            field.Type = TType.Struct;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            Query.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAppActivities_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Feed != null && __isset.feed) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Feed: ");
          __sb.Append(Feed);
        }
        if (Query != null && __isset.query) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Query: ");
          __sb.Append(Query== null ? "<null>" : Query.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAppActivities_result : TBase
    {
      private List<THActivityPost> _success;
      private THErrors _errors;

      public List<THActivityPost> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getAppActivities_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THActivityPost>();
                    TList _list134 = iprot.ReadListBegin();
                    for( int _i135 = 0; _i135 < _list134.Count; ++_i135)
                    {
                      THActivityPost _elem136;
                      _elem136 = new THActivityPost();
                      _elem136.Read(iprot);
                      Success.Add(_elem136);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAppActivities_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THActivityPost _iter137 in Success)
                {
                  _iter137.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAppActivities_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAppComments_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private string _activityId;
      private THActivitiesQuery _query;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string ActivityId
      {
        get
        {
          return _activityId;
        }
        set
        {
          __isset.activityId = true;
          this._activityId = value;
        }
      }

      public THActivitiesQuery Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool activityId;
        public bool query;
      }

      public getAppComments_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  ActivityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Struct) {
                  Query = new THActivitiesQuery();
                  Query.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAppComments_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (ActivityId != null && __isset.activityId) {
            field.Name = "activityId";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ActivityId);
            oprot.WriteFieldEnd();
          }
          if (Query != null && __isset.query) {
            field.Name = "query";
            field.Type = TType.Struct;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            Query.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAppComments_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (ActivityId != null && __isset.activityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityId: ");
          __sb.Append(ActivityId);
        }
        if (Query != null && __isset.query) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Query: ");
          __sb.Append(Query== null ? "<null>" : Query.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAppComments_result : TBase
    {
      private List<THActivityPost> _success;
      private THErrors _errors;

      public List<THActivityPost> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getAppComments_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THActivityPost>();
                    TList _list138 = iprot.ReadListBegin();
                    for( int _i139 = 0; _i139 < _list138.Count; ++_i139)
                    {
                      THActivityPost _elem140;
                      _elem140 = new THActivityPost();
                      _elem140.Read(iprot);
                      Success.Add(_elem140);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAppComments_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THActivityPost _iter141 in Success)
                {
                  _iter141.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAppComments_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAppActivity_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private string _activityId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string ActivityId
      {
        get
        {
          return _activityId;
        }
        set
        {
          __isset.activityId = true;
          this._activityId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool activityId;
      }

      public getAppActivity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  ActivityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAppActivity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (ActivityId != null && __isset.activityId) {
            field.Name = "activityId";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ActivityId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAppActivity_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (ActivityId != null && __isset.activityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityId: ");
          __sb.Append(ActivityId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAppActivity_result : TBase
    {
      private THActivityPost _success;
      private THErrors _errors;

      public THActivityPost Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getAppActivity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THActivityPost();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAppActivity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAppActivity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class postAppActivity_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private string _feed;
      private THActivityPostContent _activityPostContent;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string Feed
      {
        get
        {
          return _feed;
        }
        set
        {
          __isset.feed = true;
          this._feed = value;
        }
      }

      public THActivityPostContent ActivityPostContent
      {
        get
        {
          return _activityPostContent;
        }
        set
        {
          __isset.activityPostContent = true;
          this._activityPostContent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool feed;
        public bool activityPostContent;
      }

      public postAppActivity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Feed = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Struct) {
                  ActivityPostContent = new THActivityPostContent();
                  ActivityPostContent.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("postAppActivity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Feed != null && __isset.feed) {
            field.Name = "feed";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Feed);
            oprot.WriteFieldEnd();
          }
          if (ActivityPostContent != null && __isset.activityPostContent) {
            field.Name = "activityPostContent";
            field.Type = TType.Struct;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            ActivityPostContent.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("postAppActivity_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Feed != null && __isset.feed) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Feed: ");
          __sb.Append(Feed);
        }
        if (ActivityPostContent != null && __isset.activityPostContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityPostContent: ");
          __sb.Append(ActivityPostContent== null ? "<null>" : ActivityPostContent.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class postAppActivity_result : TBase
    {
      private THActivityPost _success;
      private THErrors _errors;

      public THActivityPost Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public postAppActivity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THActivityPost();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("postAppActivity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("postAppActivity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateAppActivity_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private string _activityId;
      private THActivityPostContent _activityPostContent;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string ActivityId
      {
        get
        {
          return _activityId;
        }
        set
        {
          __isset.activityId = true;
          this._activityId = value;
        }
      }

      public THActivityPostContent ActivityPostContent
      {
        get
        {
          return _activityPostContent;
        }
        set
        {
          __isset.activityPostContent = true;
          this._activityPostContent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool activityId;
        public bool activityPostContent;
      }

      public updateAppActivity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  ActivityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Struct) {
                  ActivityPostContent = new THActivityPostContent();
                  ActivityPostContent.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateAppActivity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (ActivityId != null && __isset.activityId) {
            field.Name = "activityId";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ActivityId);
            oprot.WriteFieldEnd();
          }
          if (ActivityPostContent != null && __isset.activityPostContent) {
            field.Name = "activityPostContent";
            field.Type = TType.Struct;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            ActivityPostContent.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateAppActivity_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (ActivityId != null && __isset.activityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityId: ");
          __sb.Append(ActivityId);
        }
        if (ActivityPostContent != null && __isset.activityPostContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityPostContent: ");
          __sb.Append(ActivityPostContent== null ? "<null>" : ActivityPostContent.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateAppActivity_result : TBase
    {
      private THActivityPost _success;
      private THErrors _errors;

      public THActivityPost Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public updateAppActivity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THActivityPost();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateAppActivity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateAppActivity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findAppTags_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private THTagsQuery _query;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public THTagsQuery Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool query;
      }

      public findAppTags_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Query = new THTagsQuery();
                  Query.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findAppTags_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Query != null && __isset.query) {
            field.Name = "query";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Query.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findAppTags_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Query != null && __isset.query) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Query: ");
          __sb.Append(Query== null ? "<null>" : Query.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findAppTags_result : TBase
    {
      private List<string> _success;
      private THErrors _errors;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public findAppTags_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<string>();
                    TList _list142 = iprot.ReadListBegin();
                    for( int _i143 = 0; _i143 < _list142.Count; ++_i143)
                    {
                      string _elem144;
                      _elem144 = iprot.ReadString();
                      Success.Add(_elem144);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findAppTags_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.String, Success.Count));
                foreach (string _iter145 in Success)
                {
                  oprot.WriteString(_iter145);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findAppTags_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAppFeedStickyActivities_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private string _feed;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string Feed
      {
        get
        {
          return _feed;
        }
        set
        {
          __isset.feed = true;
          this._feed = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool feed;
      }

      public getAppFeedStickyActivities_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Feed = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAppFeedStickyActivities_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Feed != null && __isset.feed) {
            field.Name = "feed";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Feed);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAppFeedStickyActivities_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Feed != null && __isset.feed) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Feed: ");
          __sb.Append(Feed);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAppFeedStickyActivities_result : TBase
    {
      private List<THActivityPost> _success;
      private THErrors _errors;

      public List<THActivityPost> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getAppFeedStickyActivities_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THActivityPost>();
                    TList _list146 = iprot.ReadListBegin();
                    for( int _i147 = 0; _i147 < _list146.Count; ++_i147)
                    {
                      THActivityPost _elem148;
                      _elem148 = new THActivityPost();
                      _elem148.Read(iprot);
                      Success.Add(_elem148);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAppFeedStickyActivities_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THActivityPost _iter149 in Success)
                {
                  _iter149.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAppFeedStickyActivities_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class postAppFeedStickyActivity_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private string _feed;
      private THActivityPostContent _activityPostContent;
      private int _stickyStart;
      private int _stickyEnd;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string Feed
      {
        get
        {
          return _feed;
        }
        set
        {
          __isset.feed = true;
          this._feed = value;
        }
      }

      public THActivityPostContent ActivityPostContent
      {
        get
        {
          return _activityPostContent;
        }
        set
        {
          __isset.activityPostContent = true;
          this._activityPostContent = value;
        }
      }

      public int StickyStart
      {
        get
        {
          return _stickyStart;
        }
        set
        {
          __isset.stickyStart = true;
          this._stickyStart = value;
        }
      }

      public int StickyEnd
      {
        get
        {
          return _stickyEnd;
        }
        set
        {
          __isset.stickyEnd = true;
          this._stickyEnd = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool feed;
        public bool activityPostContent;
        public bool stickyStart;
        public bool stickyEnd;
      }

      public postAppFeedStickyActivity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Feed = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Struct) {
                  ActivityPostContent = new THActivityPostContent();
                  ActivityPostContent.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  StickyStart = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  StickyEnd = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("postAppFeedStickyActivity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Feed != null && __isset.feed) {
            field.Name = "feed";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Feed);
            oprot.WriteFieldEnd();
          }
          if (ActivityPostContent != null && __isset.activityPostContent) {
            field.Name = "activityPostContent";
            field.Type = TType.Struct;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            ActivityPostContent.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.stickyStart) {
            field.Name = "stickyStart";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(StickyStart);
            oprot.WriteFieldEnd();
          }
          if (__isset.stickyEnd) {
            field.Name = "stickyEnd";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(StickyEnd);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("postAppFeedStickyActivity_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Feed != null && __isset.feed) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Feed: ");
          __sb.Append(Feed);
        }
        if (ActivityPostContent != null && __isset.activityPostContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityPostContent: ");
          __sb.Append(ActivityPostContent== null ? "<null>" : ActivityPostContent.ToString());
        }
        if (__isset.stickyStart) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("StickyStart: ");
          __sb.Append(StickyStart);
        }
        if (__isset.stickyEnd) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("StickyEnd: ");
          __sb.Append(StickyEnd);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class postAppFeedStickyActivity_result : TBase
    {
      private THActivityPost _success;
      private THErrors _errors;

      public THActivityPost Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public postAppFeedStickyActivity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THActivityPost();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("postAppFeedStickyActivity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("postAppFeedStickyActivity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateAppFeedStickyActivity_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private string _activityId;
      private THActivityPostContent _activityPostContent;
      private int _stickyStart;
      private int _stickyEnd;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string ActivityId
      {
        get
        {
          return _activityId;
        }
        set
        {
          __isset.activityId = true;
          this._activityId = value;
        }
      }

      public THActivityPostContent ActivityPostContent
      {
        get
        {
          return _activityPostContent;
        }
        set
        {
          __isset.activityPostContent = true;
          this._activityPostContent = value;
        }
      }

      public int StickyStart
      {
        get
        {
          return _stickyStart;
        }
        set
        {
          __isset.stickyStart = true;
          this._stickyStart = value;
        }
      }

      public int StickyEnd
      {
        get
        {
          return _stickyEnd;
        }
        set
        {
          __isset.stickyEnd = true;
          this._stickyEnd = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool activityId;
        public bool activityPostContent;
        public bool stickyStart;
        public bool stickyEnd;
      }

      public updateAppFeedStickyActivity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  ActivityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Struct) {
                  ActivityPostContent = new THActivityPostContent();
                  ActivityPostContent.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  StickyStart = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  StickyEnd = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateAppFeedStickyActivity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (ActivityId != null && __isset.activityId) {
            field.Name = "activityId";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ActivityId);
            oprot.WriteFieldEnd();
          }
          if (ActivityPostContent != null && __isset.activityPostContent) {
            field.Name = "activityPostContent";
            field.Type = TType.Struct;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            ActivityPostContent.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.stickyStart) {
            field.Name = "stickyStart";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(StickyStart);
            oprot.WriteFieldEnd();
          }
          if (__isset.stickyEnd) {
            field.Name = "stickyEnd";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(StickyEnd);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateAppFeedStickyActivity_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (ActivityId != null && __isset.activityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityId: ");
          __sb.Append(ActivityId);
        }
        if (ActivityPostContent != null && __isset.activityPostContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityPostContent: ");
          __sb.Append(ActivityPostContent== null ? "<null>" : ActivityPostContent.ToString());
        }
        if (__isset.stickyStart) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("StickyStart: ");
          __sb.Append(StickyStart);
        }
        if (__isset.stickyEnd) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("StickyEnd: ");
          __sb.Append(StickyEnd);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateAppFeedStickyActivity_result : TBase
    {
      private THActivityPost _success;
      private THErrors _errors;

      public THActivityPost Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public updateAppFeedStickyActivity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THActivityPost();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateAppFeedStickyActivity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateAppFeedStickyActivity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class postAppComment_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private string _activityId;
      private THActivityPostContent _activityPostContent;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string ActivityId
      {
        get
        {
          return _activityId;
        }
        set
        {
          __isset.activityId = true;
          this._activityId = value;
        }
      }

      public THActivityPostContent ActivityPostContent
      {
        get
        {
          return _activityPostContent;
        }
        set
        {
          __isset.activityPostContent = true;
          this._activityPostContent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool activityId;
        public bool activityPostContent;
      }

      public postAppComment_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  ActivityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Struct) {
                  ActivityPostContent = new THActivityPostContent();
                  ActivityPostContent.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("postAppComment_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (ActivityId != null && __isset.activityId) {
            field.Name = "activityId";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ActivityId);
            oprot.WriteFieldEnd();
          }
          if (ActivityPostContent != null && __isset.activityPostContent) {
            field.Name = "activityPostContent";
            field.Type = TType.Struct;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            ActivityPostContent.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("postAppComment_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (ActivityId != null && __isset.activityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityId: ");
          __sb.Append(ActivityId);
        }
        if (ActivityPostContent != null && __isset.activityPostContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityPostContent: ");
          __sb.Append(ActivityPostContent== null ? "<null>" : ActivityPostContent.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class postAppComment_result : TBase
    {
      private THActivityPost _success;
      private THErrors _errors;

      public THActivityPost Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public postAppComment_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THActivityPost();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("postAppComment_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("postAppComment_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class likeAppActivity_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private string _activityId;
      private bool _isLiked;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string ActivityId
      {
        get
        {
          return _activityId;
        }
        set
        {
          __isset.activityId = true;
          this._activityId = value;
        }
      }

      public bool IsLiked
      {
        get
        {
          return _isLiked;
        }
        set
        {
          __isset.isLiked = true;
          this._isLiked = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool activityId;
        public bool isLiked;
      }

      public likeAppActivity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  ActivityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Bool) {
                  IsLiked = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("likeAppActivity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (ActivityId != null && __isset.activityId) {
            field.Name = "activityId";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ActivityId);
            oprot.WriteFieldEnd();
          }
          if (__isset.isLiked) {
            field.Name = "isLiked";
            field.Type = TType.Bool;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IsLiked);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("likeAppActivity_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (ActivityId != null && __isset.activityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityId: ");
          __sb.Append(ActivityId);
        }
        if (__isset.isLiked) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IsLiked: ");
          __sb.Append(IsLiked);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class likeAppActivity_result : TBase
    {
      private THActivityPost _success;
      private THErrors _errors;

      public THActivityPost Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public likeAppActivity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THActivityPost();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("likeAppActivity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("likeAppActivity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteAppActivities_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private List<string> _activityIds;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public List<string> ActivityIds
      {
        get
        {
          return _activityIds;
        }
        set
        {
          __isset.activityIds = true;
          this._activityIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool activityIds;
      }

      public deleteAppActivities_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    ActivityIds = new List<string>();
                    TList _list150 = iprot.ReadListBegin();
                    for( int _i151 = 0; _i151 < _list150.Count; ++_i151)
                    {
                      string _elem152;
                      _elem152 = iprot.ReadString();
                      ActivityIds.Add(_elem152);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteAppActivities_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (ActivityIds != null && __isset.activityIds) {
            field.Name = "activityIds";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, ActivityIds.Count));
              foreach (string _iter153 in ActivityIds)
              {
                oprot.WriteString(_iter153);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteAppActivities_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (ActivityIds != null && __isset.activityIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityIds: ");
          __sb.Append(ActivityIds.ToDebugString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteAppActivities_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public deleteAppActivities_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteAppActivities_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteAppActivities_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAppActivityFeedList_args : TBase
    {
      private string _sessionId;
      private string _appId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
      }

      public getAppActivityFeedList_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAppActivityFeedList_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAppActivityFeedList_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAppActivityFeedList_result : TBase
    {
      private List<string> _success;
      private THErrors _errors;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getAppActivityFeedList_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<string>();
                    TList _list154 = iprot.ReadListBegin();
                    for( int _i155 = 0; _i155 < _list154.Count; ++_i155)
                    {
                      string _elem156;
                      _elem156 = iprot.ReadString();
                      Success.Add(_elem156);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAppActivityFeedList_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.String, Success.Count));
                foreach (string _iter157 in Success)
                {
                  oprot.WriteString(_iter157);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAppActivityFeedList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getActivitiesV2_args : TBase
    {
      private GetActivitiesV2Request _request;

      public GetActivitiesV2Request Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getActivitiesV2_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetActivitiesV2Request();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getActivitiesV2_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getActivitiesV2_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getActivitiesV2_result : TBase
    {
      private GetActivitiesV2Response _success;
      private THErrors _errors;

      public GetActivitiesV2Response Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getActivitiesV2_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetActivitiesV2Response();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getActivitiesV2_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getActivitiesV2_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getActivityByID_args : TBase
    {
      private GetActivityByIDRequest _request;

      public GetActivityByIDRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getActivityByID_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetActivityByIDRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getActivityByID_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getActivityByID_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getActivityByID_result : TBase
    {
      private GetActivityByIDResponse _success;
      private THErrors _errors;

      public GetActivityByIDResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getActivityByID_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetActivityByIDResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getActivityByID_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getActivityByID_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAnnouncements_args : TBase
    {
      private GetAnnouncementsRequest _request;

      public GetAnnouncementsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getAnnouncements_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetAnnouncementsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAnnouncements_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAnnouncements_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAnnouncements_result : TBase
    {
      private GetAnnouncementsResponse _success;
      private THErrors _errors;

      public GetAnnouncementsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getAnnouncements_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetAnnouncementsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAnnouncements_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAnnouncements_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createActivity_args : TBase
    {
      private CreateActivityRequest _request;

      public CreateActivityRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public createActivity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new CreateActivityRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createActivity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createActivity_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createActivity_result : TBase
    {
      private CreateActivityResponse _success;
      private THErrors _errors;

      public CreateActivityResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public createActivity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new CreateActivityResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createActivity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createActivity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateActivity_args : TBase
    {
      private UpdateActivityRequest _request;

      public UpdateActivityRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public updateActivity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new UpdateActivityRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateActivity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateActivity_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateActivity_result : TBase
    {
      private UpdateActivityResponse _success;
      private THErrors _errors;

      public UpdateActivityResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public updateActivity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new UpdateActivityResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateActivity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateActivity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteActivities_args : TBase
    {
      private DeleteActivitiesRequest _request;

      public DeleteActivitiesRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public deleteActivities_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DeleteActivitiesRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteActivities_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteActivities_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteActivities_result : TBase
    {
      private DeleteActivitiesResponse _success;
      private THErrors _errors;

      public DeleteActivitiesResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public deleteActivities_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DeleteActivitiesResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteActivities_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteActivities_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createAnnouncement_args : TBase
    {
      private CreateAnnouncementRequest _request;

      public CreateAnnouncementRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public createAnnouncement_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new CreateAnnouncementRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createAnnouncement_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createAnnouncement_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createAnnouncement_result : TBase
    {
      private CreateAnnouncementResponse _success;
      private THErrors _errors;

      public CreateAnnouncementResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public createAnnouncement_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new CreateAnnouncementResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createAnnouncement_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createAnnouncement_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateAnnouncement_args : TBase
    {
      private UpdateAnnouncementRequest _request;

      public UpdateAnnouncementRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public updateAnnouncement_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new UpdateAnnouncementRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateAnnouncement_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateAnnouncement_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateAnnouncement_result : TBase
    {
      private UpdateAnnouncementResponse _success;
      private THErrors _errors;

      public UpdateAnnouncementResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public updateAnnouncement_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new UpdateAnnouncementResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateAnnouncement_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateAnnouncement_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getReactions_args : TBase
    {
      private GetReactionsRequest _request;

      public GetReactionsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getReactions_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetReactionsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getReactions_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getReactions_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getReactions_result : TBase
    {
      private GetReactionsResponse _success;
      private THErrors _errors;

      public GetReactionsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getReactions_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetReactionsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getReactions_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getReactions_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createReaction_args : TBase
    {
      private CreateReactionRequest _request;

      public CreateReactionRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public createReaction_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new CreateReactionRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createReaction_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createReaction_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createReaction_result : TBase
    {
      private CreateReactionResponse _success;
      private THErrors _errors;

      public CreateReactionResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public createReaction_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new CreateReactionResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createReaction_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createReaction_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteReaction_args : TBase
    {
      private DeleteReactionRequest _request;

      public DeleteReactionRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public deleteReaction_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DeleteReactionRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteReaction_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteReaction_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteReaction_result : TBase
    {
      private DeleteReactionResponse _success;
      private THErrors _errors;

      public DeleteReactionResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public deleteReaction_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DeleteReactionResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteReaction_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteReaction_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reportEntityV2_args : TBase
    {
      private ReportEntityV2Request _request;

      public ReportEntityV2Request Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public reportEntityV2_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new ReportEntityV2Request();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("reportEntityV2_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("reportEntityV2_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reportEntityV2_result : TBase
    {
      private ReportEntityV2Response _success;
      private THErrors _errors;

      public ReportEntityV2Response Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public reportEntityV2_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new ReportEntityV2Response();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("reportEntityV2_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("reportEntityV2_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class activityTrackView_args : TBase
    {
      private ActivityTrackViewRequest _request;

      public ActivityTrackViewRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public activityTrackView_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new ActivityTrackViewRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("activityTrackView_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("activityTrackView_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class activityTrackView_result : TBase
    {
      private ActivityTrackViewResponse _success;
      private THErrors _errors;

      public ActivityTrackViewResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public activityTrackView_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new ActivityTrackViewResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("activityTrackView_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("activityTrackView_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetActivities_args : TBase
    {
      private DDGetActivitiesRequest _request;

      public DDGetActivitiesRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddGetActivities_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDGetActivitiesRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetActivities_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetActivities_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetActivities_result : TBase
    {
      private DDGetActivitiesResponse _success;
      private THErrors _errors;

      public DDGetActivitiesResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddGetActivities_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDGetActivitiesResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetActivities_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetActivities_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetActivityByID_args : TBase
    {
      private DDGetActivityByIDRequest _request;

      public DDGetActivityByIDRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddGetActivityByID_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDGetActivityByIDRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetActivityByID_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetActivityByID_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetActivityByID_result : TBase
    {
      private DDGetActivityByIDResponse _success;
      private THErrors _errors;

      public DDGetActivityByIDResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddGetActivityByID_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDGetActivityByIDResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetActivityByID_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetActivityByID_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddFindTags_args : TBase
    {
      private DDFindTagsRequest _request;

      public DDFindTagsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddFindTags_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDFindTagsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddFindTags_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddFindTags_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddFindTags_result : TBase
    {
      private DDFindTagsResponse _success;
      private THErrors _errors;

      public DDFindTagsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddFindTags_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDFindTagsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddFindTags_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddFindTags_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddCreateActivity_args : TBase
    {
      private DDCreateActivityRequest _request;

      public DDCreateActivityRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddCreateActivity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDCreateActivityRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddCreateActivity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddCreateActivity_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddCreateActivity_result : TBase
    {
      private DDCreateActivityResponse _success;
      private THErrors _errors;

      public DDCreateActivityResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddCreateActivity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDCreateActivityResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddCreateActivity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddCreateActivity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddUpdateActivity_args : TBase
    {
      private DDUpdateActivityRequest _request;

      public DDUpdateActivityRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddUpdateActivity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDUpdateActivityRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddUpdateActivity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddUpdateActivity_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddUpdateActivity_result : TBase
    {
      private DDUpdateActivityResponse _success;
      private THErrors _errors;

      public DDUpdateActivityResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddUpdateActivity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDUpdateActivityResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddUpdateActivity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddUpdateActivity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddUpdateActivitiesStatus_args : TBase
    {
      private DDUpdateActivitiesStatusRequest _request;

      public DDUpdateActivitiesStatusRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddUpdateActivitiesStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDUpdateActivitiesStatusRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddUpdateActivitiesStatus_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddUpdateActivitiesStatus_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddUpdateActivitiesStatus_result : TBase
    {
      private DDUpdateActivitiesStatusResponse _success;
      private THErrors _errors;

      public DDUpdateActivitiesStatusResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddUpdateActivitiesStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDUpdateActivitiesStatusResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddUpdateActivitiesStatus_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddUpdateActivitiesStatus_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetAnnouncements_args : TBase
    {
      private DDGetAnnouncementsRequest _request;

      public DDGetAnnouncementsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddGetAnnouncements_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDGetAnnouncementsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetAnnouncements_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetAnnouncements_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetAnnouncements_result : TBase
    {
      private DDGetAnnouncementsResponse _success;
      private THErrors _errors;

      public DDGetAnnouncementsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddGetAnnouncements_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDGetAnnouncementsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetAnnouncements_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetAnnouncements_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddCreateAnnouncement_args : TBase
    {
      private DDCreateAnnouncementRequest _request;

      public DDCreateAnnouncementRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddCreateAnnouncement_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDCreateAnnouncementRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddCreateAnnouncement_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddCreateAnnouncement_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddCreateAnnouncement_result : TBase
    {
      private DDCreateAnnouncementResponse _success;
      private THErrors _errors;

      public DDCreateAnnouncementResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddCreateAnnouncement_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDCreateAnnouncementResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddCreateAnnouncement_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddCreateAnnouncement_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddUpdateAnnouncement_args : TBase
    {
      private DDUpdateAnnouncementRequest _request;

      public DDUpdateAnnouncementRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddUpdateAnnouncement_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDUpdateAnnouncementRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddUpdateAnnouncement_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddUpdateAnnouncement_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddUpdateAnnouncement_result : TBase
    {
      private DDUpdateAnnouncementResponse _success;
      private THErrors _errors;

      public DDUpdateAnnouncementResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddUpdateAnnouncement_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDUpdateAnnouncementResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddUpdateAnnouncement_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddUpdateAnnouncement_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetReactions_args : TBase
    {
      private DDGetReactionsRequest _request;

      public DDGetReactionsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddGetReactions_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDGetReactionsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetReactions_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetReactions_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetReactions_result : TBase
    {
      private DDGetReactionsResponse _success;
      private THErrors _errors;

      public DDGetReactionsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddGetReactions_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDGetReactionsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetReactions_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetReactions_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddCreateReactions_args : TBase
    {
      private DDCreateReactionsRequest _request;

      public DDCreateReactionsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddCreateReactions_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDCreateReactionsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddCreateReactions_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddCreateReactions_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddCreateReactions_result : TBase
    {
      private DDCreateReactionsResponse _success;
      private THErrors _errors;

      public DDCreateReactionsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddCreateReactions_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDCreateReactionsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddCreateReactions_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddCreateReactions_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddDeleteReactions_args : TBase
    {
      private DDDeleteReactionsRequest _request;

      public DDDeleteReactionsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddDeleteReactions_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDDeleteReactionsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddDeleteReactions_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddDeleteReactions_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddDeleteReactions_result : TBase
    {
      private DDDeleteReactionsResponse _success;
      private THErrors _errors;

      public DDDeleteReactionsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddDeleteReactions_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDDeleteReactionsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddDeleteReactions_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddDeleteReactions_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddPurgeActivities_args : TBase
    {
      private DDPurgeActivitiesRequest _request;

      public DDPurgeActivitiesRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddPurgeActivities_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDPurgeActivitiesRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddPurgeActivities_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddPurgeActivities_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddPurgeActivities_result : TBase
    {
      private DDPurgeActivitiesResponse _success;
      private THErrors _errors;

      public DDPurgeActivitiesResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddPurgeActivities_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDPurgeActivitiesResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddPurgeActivities_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddPurgeActivities_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetActivitiesForModeration_args : TBase
    {
      private DDGetActivitiesForModerationRequest _request;

      public DDGetActivitiesForModerationRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddGetActivitiesForModeration_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDGetActivitiesForModerationRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetActivitiesForModeration_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetActivitiesForModeration_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddGetActivitiesForModeration_result : TBase
    {
      private DDGetActivitiesForModerationResponse _success;
      private THErrors _errors;

      public DDGetActivitiesForModerationResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddGetActivitiesForModeration_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDGetActivitiesForModerationResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddGetActivitiesForModeration_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddGetActivitiesForModeration_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class runETLQuery_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private List<Query> _queries;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public List<Query> Queries
      {
        get
        {
          return _queries;
        }
        set
        {
          __isset.queries = true;
          this._queries = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool queries;
      }

      public runETLQuery_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    Queries = new List<Query>();
                    TList _list158 = iprot.ReadListBegin();
                    for( int _i159 = 0; _i159 < _list158.Count; ++_i159)
                    {
                      Query _elem160;
                      _elem160 = new Query();
                      _elem160.Read(iprot);
                      Queries.Add(_elem160);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("runETLQuery_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Queries != null && __isset.queries) {
            field.Name = "queries";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Queries.Count));
              foreach (Query _iter161 in Queries)
              {
                _iter161.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("runETLQuery_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Queries != null && __isset.queries) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Queries: ");
          __sb.Append(Queries.ToDebugString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class runETLQuery_result : TBase
    {
      private List<string> _success;
      private THErrors _errors;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public runETLQuery_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<string>();
                    TList _list162 = iprot.ReadListBegin();
                    for( int _i163 = 0; _i163 < _list162.Count; ++_i163)
                    {
                      string _elem164;
                      _elem164 = iprot.ReadString();
                      Success.Add(_elem164);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("runETLQuery_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.String, Success.Count));
                foreach (string _iter165 in Success)
                {
                  oprot.WriteString(_iter165);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("runETLQuery_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getETLQueryResults_args : TBase
    {
      private string _sessionId;
      private List<string> _queryId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public List<string> QueryId
      {
        get
        {
          return _queryId;
        }
        set
        {
          __isset.queryId = true;
          this._queryId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool queryId;
      }

      public getETLQueryResults_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    QueryId = new List<string>();
                    TList _list166 = iprot.ReadListBegin();
                    for( int _i167 = 0; _i167 < _list166.Count; ++_i167)
                    {
                      string _elem168;
                      _elem168 = iprot.ReadString();
                      QueryId.Add(_elem168);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getETLQueryResults_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (QueryId != null && __isset.queryId) {
            field.Name = "queryId";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, QueryId.Count));
              foreach (string _iter169 in QueryId)
              {
                oprot.WriteString(_iter169);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getETLQueryResults_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (QueryId != null && __isset.queryId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("QueryId: ");
          __sb.Append(QueryId.ToDebugString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getETLQueryResults_result : TBase
    {
      private string _success;
      private THErrors _errors;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getETLQueryResults_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getETLQueryResults_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getETLQueryResults_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createCampaign_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private string _name;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool name;
      }

      public createCampaign_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createCampaign_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createCampaign_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createCampaign_result : TBase
    {
      private Campaign _success;
      private THErrors _errors;

      public Campaign Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public createCampaign_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Campaign();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createCampaign_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createCampaign_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateCampaign_args : TBase
    {
      private string _sessionId;
      private Campaign _campaign;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public Campaign Campaign
      {
        get
        {
          return _campaign;
        }
        set
        {
          __isset.campaign = true;
          this._campaign = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool campaign;
      }

      public updateCampaign_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Campaign = new Campaign();
                  Campaign.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateCampaign_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Campaign != null && __isset.campaign) {
            field.Name = "campaign";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Campaign.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateCampaign_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Campaign != null && __isset.campaign) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Campaign: ");
          __sb.Append(Campaign== null ? "<null>" : Campaign.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateCampaign_result : TBase
    {
      private Campaign _success;
      private THErrors _errors;

      public Campaign Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public updateCampaign_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Campaign();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateCampaign_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateCampaign_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setMarketingLink_args : TBase
    {
      private string _sessionId;
      private MarketingLink _link;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public MarketingLink Link
      {
        get
        {
          return _link;
        }
        set
        {
          __isset.link = true;
          this._link = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool link;
      }

      public setMarketingLink_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Link = new MarketingLink();
                  Link.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setMarketingLink_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Link != null && __isset.link) {
            field.Name = "link";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Link.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setMarketingLink_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Link != null && __isset.link) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Link: ");
          __sb.Append(Link== null ? "<null>" : Link.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setMarketingLink_result : TBase
    {
      private MarketingLink _success;
      private THErrors _errors;

      public MarketingLink Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public setMarketingLink_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MarketingLink();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setMarketingLink_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setMarketingLink_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMarketingLink_args : TBase
    {
      private string _sessionId;
      private string _id;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool id;
      }

      public getMarketingLink_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getMarketingLink_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Id != null && __isset.id) {
            field.Name = "id";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getMarketingLink_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMarketingLink_result : TBase
    {
      private MarketingLink _success;
      private THErrors _errors;

      public MarketingLink Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getMarketingLink_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MarketingLink();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getMarketingLink_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getMarketingLink_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCampaigns_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private LinkStatus _status;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref=".LinkStatus"/>
      /// </summary>
      public LinkStatus Status
      {
        get
        {
          return _status;
        }
        set
        {
          __isset.status = true;
          this._status = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool status;
      }

      public getCampaigns_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Status = (LinkStatus)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getCampaigns_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (__isset.status) {
            field.Name = "status";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Status);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCampaigns_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (__isset.status) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Status: ");
          __sb.Append(Status);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCampaigns_result : TBase
    {
      private List<Campaign> _success;
      private THErrors _errors;

      public List<Campaign> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getCampaigns_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Campaign>();
                    TList _list170 = iprot.ReadListBegin();
                    for( int _i171 = 0; _i171 < _list170.Count; ++_i171)
                    {
                      Campaign _elem172;
                      _elem172 = new Campaign();
                      _elem172.Read(iprot);
                      Success.Add(_elem172);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getCampaigns_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Campaign _iter173 in Success)
                {
                  _iter173.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCampaigns_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setBannerLink_args : TBase
    {
      private string _sessionId;
      private BannerLink _link;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public BannerLink Link
      {
        get
        {
          return _link;
        }
        set
        {
          __isset.link = true;
          this._link = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool link;
      }

      public setBannerLink_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Link = new BannerLink();
                  Link.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setBannerLink_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Link != null && __isset.link) {
            field.Name = "link";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Link.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setBannerLink_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Link != null && __isset.link) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Link: ");
          __sb.Append(Link== null ? "<null>" : Link.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setBannerLink_result : TBase
    {
      private BannerLink _success;
      private THErrors _errors;

      public BannerLink Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public setBannerLink_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new BannerLink();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setBannerLink_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setBannerLink_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBannerLink_args : TBase
    {
      private string _sessionId;
      private string _id;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool id;
      }

      public getBannerLink_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getBannerLink_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Id != null && __isset.id) {
            field.Name = "id";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getBannerLink_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBannerLink_result : TBase
    {
      private BannerLink _success;
      private THErrors _errors;

      public BannerLink Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getBannerLink_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new BannerLink();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getBannerLink_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getBannerLink_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBannerLinks_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private LinkStatus _status;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref=".LinkStatus"/>
      /// </summary>
      public LinkStatus Status
      {
        get
        {
          return _status;
        }
        set
        {
          __isset.status = true;
          this._status = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool status;
      }

      public getBannerLinks_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Status = (LinkStatus)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getBannerLinks_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (__isset.status) {
            field.Name = "status";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Status);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getBannerLinks_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (__isset.status) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Status: ");
          __sb.Append(Status);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBannerLinks_result : TBase
    {
      private List<BannerLink> _success;
      private THErrors _errors;

      public List<BannerLink> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getBannerLinks_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<BannerLink>();
                    TList _list174 = iprot.ReadListBegin();
                    for( int _i175 = 0; _i175 < _list174.Count; ++_i175)
                    {
                      BannerLink _elem176;
                      _elem176 = new BannerLink();
                      _elem176.Read(iprot);
                      Success.Add(_elem176);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getBannerLinks_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (BannerLink _iter177 in Success)
                {
                  _iter177.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getBannerLinks_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getReportedActivities_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private THReportedActivitiesQuery _query;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public THReportedActivitiesQuery Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool query;
      }

      public getReportedActivities_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Query = new THReportedActivitiesQuery();
                  Query.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getReportedActivities_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Query != null && __isset.query) {
            field.Name = "query";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Query.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getReportedActivities_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Query != null && __isset.query) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Query: ");
          __sb.Append(Query== null ? "<null>" : Query.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getReportedActivities_result : TBase
    {
      private List<THReportedActivityPost> _success;
      private THErrors _errors;

      public List<THReportedActivityPost> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getReportedActivities_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THReportedActivityPost>();
                    TList _list178 = iprot.ReadListBegin();
                    for( int _i179 = 0; _i179 < _list178.Count; ++_i179)
                    {
                      THReportedActivityPost _elem180;
                      _elem180 = new THReportedActivityPost();
                      _elem180.Read(iprot);
                      Success.Add(_elem180);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getReportedActivities_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THReportedActivityPost _iter181 in Success)
                {
                  _iter181.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getReportedActivities_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class closeReports_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private List<string> _activityIds;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public List<string> ActivityIds
      {
        get
        {
          return _activityIds;
        }
        set
        {
          __isset.activityIds = true;
          this._activityIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool activityIds;
      }

      public closeReports_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    ActivityIds = new List<string>();
                    TList _list182 = iprot.ReadListBegin();
                    for( int _i183 = 0; _i183 < _list182.Count; ++_i183)
                    {
                      string _elem184;
                      _elem184 = iprot.ReadString();
                      ActivityIds.Add(_elem184);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("closeReports_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (ActivityIds != null && __isset.activityIds) {
            field.Name = "activityIds";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, ActivityIds.Count));
              foreach (string _iter185 in ActivityIds)
              {
                oprot.WriteString(_iter185);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("closeReports_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (ActivityIds != null && __isset.activityIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActivityIds: ");
          __sb.Append(ActivityIds.ToDebugString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class closeReports_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public closeReports_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("closeReports_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("closeReports_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class banUsers_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private List<string> _userIds;
      private long _banExpiry;
      private string _reason;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public List<string> UserIds
      {
        get
        {
          return _userIds;
        }
        set
        {
          __isset.userIds = true;
          this._userIds = value;
        }
      }

      public long BanExpiry
      {
        get
        {
          return _banExpiry;
        }
        set
        {
          __isset.banExpiry = true;
          this._banExpiry = value;
        }
      }

      public string Reason
      {
        get
        {
          return _reason;
        }
        set
        {
          __isset.reason = true;
          this._reason = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool userIds;
        public bool banExpiry;
        public bool reason;
      }

      public banUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    UserIds = new List<string>();
                    TList _list186 = iprot.ReadListBegin();
                    for( int _i187 = 0; _i187 < _list186.Count; ++_i187)
                    {
                      string _elem188;
                      _elem188 = iprot.ReadString();
                      UserIds.Add(_elem188);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I64) {
                  BanExpiry = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.String) {
                  Reason = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("banUsers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (UserIds != null && __isset.userIds) {
            field.Name = "userIds";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, UserIds.Count));
              foreach (string _iter189 in UserIds)
              {
                oprot.WriteString(_iter189);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.banExpiry) {
            field.Name = "banExpiry";
            field.Type = TType.I64;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(BanExpiry);
            oprot.WriteFieldEnd();
          }
          if (Reason != null && __isset.reason) {
            field.Name = "reason";
            field.Type = TType.String;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Reason);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("banUsers_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (UserIds != null && __isset.userIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserIds: ");
          __sb.Append(UserIds.ToDebugString());
        }
        if (__isset.banExpiry) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("BanExpiry: ");
          __sb.Append(BanExpiry);
        }
        if (Reason != null && __isset.reason) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Reason: ");
          __sb.Append(Reason);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class banUsers_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public banUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("banUsers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("banUsers_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class unbanUsers_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private List<string> _userIds;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public List<string> UserIds
      {
        get
        {
          return _userIds;
        }
        set
        {
          __isset.userIds = true;
          this._userIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool userIds;
      }

      public unbanUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    UserIds = new List<string>();
                    TList _list190 = iprot.ReadListBegin();
                    for( int _i191 = 0; _i191 < _list190.Count; ++_i191)
                    {
                      string _elem192;
                      _elem192 = iprot.ReadString();
                      UserIds.Add(_elem192);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("unbanUsers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (UserIds != null && __isset.userIds) {
            field.Name = "userIds";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, UserIds.Count));
              foreach (string _iter193 in UserIds)
              {
                oprot.WriteString(_iter193);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("unbanUsers_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (UserIds != null && __isset.userIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserIds: ");
          __sb.Append(UserIds.ToDebugString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class unbanUsers_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public unbanUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("unbanUsers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("unbanUsers_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBannedUsers_args : TBase
    {
      private string _sessionId;
      private string _appId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
      }

      public getBannedUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getBannedUsers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getBannedUsers_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBannedUsers_result : TBase
    {
      private List<THBannedPublicUser> _success;
      private THErrors _errors;

      public List<THBannedPublicUser> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getBannedUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THBannedPublicUser>();
                    TList _list194 = iprot.ReadListBegin();
                    for( int _i195 = 0; _i195 < _list194.Count; ++_i195)
                    {
                      THBannedPublicUser _elem196;
                      _elem196 = new THBannedPublicUser();
                      _elem196.Read(iprot);
                      Success.Add(_elem196);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getBannedUsers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THBannedPublicUser _iter197 in Success)
                {
                  _iter197.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getBannedUsers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAudiences_args : TBase
    {
      private string _sessionId;
      private string _appId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
      }

      public getAudiences_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAudiences_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAudiences_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAudiences_result : TBase
    {
      private List<Audience> _success;
      private THErrors _errors;

      public List<Audience> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getAudiences_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Audience>();
                    TList _list198 = iprot.ReadListBegin();
                    for( int _i199 = 0; _i199 < _list198.Count; ++_i199)
                    {
                      Audience _elem200;
                      _elem200 = new Audience();
                      _elem200.Read(iprot);
                      Success.Add(_elem200);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAudiences_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Audience _iter201 in Success)
                {
                  _iter201.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAudiences_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setAudience_args : TBase
    {
      private string _sessionId;
      private Audience _audience;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public Audience Audience
      {
        get
        {
          return _audience;
        }
        set
        {
          __isset.audience = true;
          this._audience = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool audience;
      }

      public setAudience_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Audience = new Audience();
                  Audience.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setAudience_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Audience != null && __isset.audience) {
            field.Name = "audience";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Audience.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setAudience_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Audience != null && __isset.audience) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Audience: ");
          __sb.Append(Audience== null ? "<null>" : Audience.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setAudience_result : TBase
    {
      private Audience _success;
      private THErrors _errors;

      public Audience Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public setAudience_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Audience();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setAudience_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setAudience_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAudience_args : TBase
    {
      private string _sessionId;
      private string _audienceId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AudienceId
      {
        get
        {
          return _audienceId;
        }
        set
        {
          __isset.audienceId = true;
          this._audienceId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool audienceId;
      }

      public getAudience_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AudienceId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAudience_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AudienceId != null && __isset.audienceId) {
            field.Name = "audienceId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AudienceId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAudience_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AudienceId != null && __isset.audienceId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AudienceId: ");
          __sb.Append(AudienceId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAudience_result : TBase
    {
      private Audience _success;
      private THErrors _errors;

      public Audience Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getAudience_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Audience();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAudience_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAudience_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteAudience_args : TBase
    {
      private string _sessionId;
      private string _audienceId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AudienceId
      {
        get
        {
          return _audienceId;
        }
        set
        {
          __isset.audienceId = true;
          this._audienceId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool audienceId;
      }

      public deleteAudience_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AudienceId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteAudience_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AudienceId != null && __isset.audienceId) {
            field.Name = "audienceId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AudienceId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteAudience_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AudienceId != null && __isset.audienceId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AudienceId: ");
          __sb.Append(AudienceId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteAudience_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public deleteAudience_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteAudience_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteAudience_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getWebhookEvents_args : TBase
    {
      private string _sessionId;
      private string _appId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
      }

      public getWebhookEvents_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getWebhookEvents_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getWebhookEvents_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getWebhookEvents_result : TBase
    {
      private List<WebhookEvent> _success;
      private THErrors _errors;

      public List<WebhookEvent> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getWebhookEvents_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<WebhookEvent>();
                    TList _list202 = iprot.ReadListBegin();
                    for( int _i203 = 0; _i203 < _list202.Count; ++_i203)
                    {
                      WebhookEvent _elem204;
                      _elem204 = new WebhookEvent();
                      _elem204.Read(iprot);
                      Success.Add(_elem204);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getWebhookEvents_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (WebhookEvent _iter205 in Success)
                {
                  _iter205.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getWebhookEvents_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getWebhookSettings_args : TBase
    {
      private string _sessionId;
      private string _appId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
      }

      public getWebhookSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getWebhookSettings_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getWebhookSettings_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getWebhookSettings_result : TBase
    {
      private WebhookSettings _success;
      private THErrors _errors;

      public WebhookSettings Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getWebhookSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new WebhookSettings();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getWebhookSettings_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getWebhookSettings_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateWebhookSettings_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private WebhookSettings _settings;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public WebhookSettings Settings
      {
        get
        {
          return _settings;
        }
        set
        {
          __isset.settings = true;
          this._settings = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool settings;
      }

      public updateWebhookSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Settings = new WebhookSettings();
                  Settings.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateWebhookSettings_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Settings != null && __isset.settings) {
            field.Name = "settings";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Settings.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateWebhookSettings_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Settings != null && __isset.settings) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Settings: ");
          __sb.Append(Settings== null ? "<null>" : Settings.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateWebhookSettings_result : TBase
    {
      private WebhookSettings _success;
      private THErrors _errors;

      public WebhookSettings Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public updateWebhookSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new WebhookSettings();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateWebhookSettings_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateWebhookSettings_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setTestDevice_args : TBase
    {
      private string _sessionId;
      private string _companyId;
      private THTestDevice _device;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string CompanyId
      {
        get
        {
          return _companyId;
        }
        set
        {
          __isset.companyId = true;
          this._companyId = value;
        }
      }

      public THTestDevice Device
      {
        get
        {
          return _device;
        }
        set
        {
          __isset.device = true;
          this._device = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool companyId;
        public bool device;
      }

      public setTestDevice_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CompanyId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Device = new THTestDevice();
                  Device.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setTestDevice_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (CompanyId != null && __isset.companyId) {
            field.Name = "companyId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CompanyId);
            oprot.WriteFieldEnd();
          }
          if (Device != null && __isset.device) {
            field.Name = "device";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Device.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setTestDevice_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (CompanyId != null && __isset.companyId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CompanyId: ");
          __sb.Append(CompanyId);
        }
        if (Device != null && __isset.device) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Device: ");
          __sb.Append(Device== null ? "<null>" : Device.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setTestDevice_result : TBase
    {
      private THTestDevice _success;
      private THErrors _errors;

      public THTestDevice Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public setTestDevice_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THTestDevice();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setTestDevice_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setTestDevice_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTestDevices_args : TBase
    {
      private string _sessionId;
      private string _companyId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string CompanyId
      {
        get
        {
          return _companyId;
        }
        set
        {
          __isset.companyId = true;
          this._companyId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool companyId;
      }

      public getTestDevices_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CompanyId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getTestDevices_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (CompanyId != null && __isset.companyId) {
            field.Name = "companyId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CompanyId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getTestDevices_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (CompanyId != null && __isset.companyId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CompanyId: ");
          __sb.Append(CompanyId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTestDevices_result : TBase
    {
      private List<THTestDevice> _success;
      private THErrors _errors;

      public List<THTestDevice> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getTestDevices_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THTestDevice>();
                    TList _list206 = iprot.ReadListBegin();
                    for( int _i207 = 0; _i207 < _list206.Count; ++_i207)
                    {
                      THTestDevice _elem208;
                      _elem208 = new THTestDevice();
                      _elem208.Read(iprot);
                      Success.Add(_elem208);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getTestDevices_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THTestDevice _iter209 in Success)
                {
                  _iter209.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getTestDevices_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTestDeviceRemoteLogs_args : TBase
    {
      private GetTestDeviceRemoteLogsRequest _request;

      public GetTestDeviceRemoteLogsRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getTestDeviceRemoteLogs_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new GetTestDeviceRemoteLogsRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getTestDeviceRemoteLogs_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getTestDeviceRemoteLogs_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTestDeviceRemoteLogs_result : TBase
    {
      private GetTestDeviceRemoteLogsResponse _success;
      private THErrors _errors;

      public GetTestDeviceRemoteLogsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getTestDeviceRemoteLogs_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GetTestDeviceRemoteLogsResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getTestDeviceRemoteLogs_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getTestDeviceRemoteLogs_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteTestDevice_args : TBase
    {
      private string _sessionId;
      private string _id;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool id;
      }

      public deleteTestDevice_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteTestDevice_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Id != null && __isset.id) {
            field.Name = "id";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteTestDevice_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteTestDevice_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public deleteTestDevice_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteTestDevice_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteTestDevice_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class describeNotifications_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private THListNotificationsTextsQuery _query;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public THListNotificationsTextsQuery Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool query;
      }

      public describeNotifications_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Query = new THListNotificationsTextsQuery();
                  Query.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("describeNotifications_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Query != null && __isset.query) {
            field.Name = "query";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Query.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("describeNotifications_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Query != null && __isset.query) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Query: ");
          __sb.Append(Query== null ? "<null>" : Query.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class describeNotifications_result : TBase
    {
      private Dictionary<int, THNotificationSpec> _success;
      private THErrors _errors;

      public Dictionary<int, THNotificationSpec> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public describeNotifications_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map) {
                  {
                    Success = new Dictionary<int, THNotificationSpec>();
                    TMap _map210 = iprot.ReadMapBegin();
                    for( int _i211 = 0; _i211 < _map210.Count; ++_i211)
                    {
                      int _key212;
                      THNotificationSpec _val213;
                      _key212 = iprot.ReadI32();
                      _val213 = new THNotificationSpec();
                      _val213.Read(iprot);
                      Success[_key212] = _val213;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("describeNotifications_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Map;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Success.Count));
                foreach (int _iter214 in Success.Keys)
                {
                  oprot.WriteI32(_iter214);
                  Success[_iter214].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("describeNotifications_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNotificationsTexts_args : TBase
    {
      private string _sessionId;
      private THListNotificationsTextsQuery _query;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THListNotificationsTextsQuery Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool query;
      }

      public getNotificationsTexts_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Query = new THListNotificationsTextsQuery();
                  Query.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getNotificationsTexts_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Query != null && __isset.query) {
            field.Name = "query";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Query.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getNotificationsTexts_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Query != null && __isset.query) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Query: ");
          __sb.Append(Query== null ? "<null>" : Query.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNotificationsTexts_result : TBase
    {
      private Dictionary<int, Dictionary<string, string>> _success;
      private THErrors _errors;

      public Dictionary<int, Dictionary<string, string>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getNotificationsTexts_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map) {
                  {
                    Success = new Dictionary<int, Dictionary<string, string>>();
                    TMap _map215 = iprot.ReadMapBegin();
                    for( int _i216 = 0; _i216 < _map215.Count; ++_i216)
                    {
                      int _key217;
                      Dictionary<string, string> _val218;
                      _key217 = iprot.ReadI32();
                      {
                        _val218 = new Dictionary<string, string>();
                        TMap _map219 = iprot.ReadMapBegin();
                        for( int _i220 = 0; _i220 < _map219.Count; ++_i220)
                        {
                          string _key221;
                          string _val222;
                          _key221 = iprot.ReadString();
                          _val222 = iprot.ReadString();
                          _val218[_key221] = _val222;
                        }
                        iprot.ReadMapEnd();
                      }
                      Success[_key217] = _val218;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getNotificationsTexts_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Map;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Success.Count));
                foreach (int _iter223 in Success.Keys)
                {
                  oprot.WriteI32(_iter223);
                  {
                    oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success[_iter223].Count));
                    foreach (string _iter224 in Success[_iter223].Keys)
                    {
                      oprot.WriteString(_iter224);
                      oprot.WriteString(Success[_iter223][_iter224]);
                    }
                    oprot.WriteMapEnd();
                  }
                }
                oprot.WriteMapEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getNotificationsTexts_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTargetedNotifications_args : TBase
    {
      private string _sessionId;
      private string _appId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
      }

      public getTargetedNotifications_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getTargetedNotifications_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getTargetedNotifications_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTargetedNotifications_result : TBase
    {
      private List<THTargetedNotification> _success;
      private THErrors _errors;

      public List<THTargetedNotification> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getTargetedNotifications_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THTargetedNotification>();
                    TList _list225 = iprot.ReadListBegin();
                    for( int _i226 = 0; _i226 < _list225.Count; ++_i226)
                    {
                      THTargetedNotification _elem227;
                      _elem227 = new THTargetedNotification();
                      _elem227.Read(iprot);
                      Success.Add(_elem227);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getTargetedNotifications_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THTargetedNotification _iter228 in Success)
                {
                  _iter228.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getTargetedNotifications_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setTargetedNotification_args : TBase
    {
      private string _sessionId;
      private THTargetedNotification _notification;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THTargetedNotification Notification
      {
        get
        {
          return _notification;
        }
        set
        {
          __isset.notification = true;
          this._notification = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool notification;
      }

      public setTargetedNotification_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Notification = new THTargetedNotification();
                  Notification.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setTargetedNotification_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Notification != null && __isset.notification) {
            field.Name = "notification";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Notification.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setTargetedNotification_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Notification != null && __isset.notification) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Notification: ");
          __sb.Append(Notification== null ? "<null>" : Notification.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setTargetedNotification_result : TBase
    {
      private THTargetedNotification _success;
      private THErrors _errors;

      public THTargetedNotification Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public setTargetedNotification_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THTargetedNotification();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setTargetedNotification_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setTargetedNotification_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancelTargetedNotification_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private string _notificationId;
      private bool _remove;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string NotificationId
      {
        get
        {
          return _notificationId;
        }
        set
        {
          __isset.notificationId = true;
          this._notificationId = value;
        }
      }

      public bool Remove
      {
        get
        {
          return _remove;
        }
        set
        {
          __isset.@remove = true;
          this._remove = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool notificationId;
        public bool @remove;
      }

      public cancelTargetedNotification_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  NotificationId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Bool) {
                  Remove = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("cancelTargetedNotification_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (NotificationId != null && __isset.notificationId) {
            field.Name = "notificationId";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(NotificationId);
            oprot.WriteFieldEnd();
          }
          if (__isset.@remove) {
            field.Name = "remove";
            field.Type = TType.Bool;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Remove);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("cancelTargetedNotification_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (NotificationId != null && __isset.notificationId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NotificationId: ");
          __sb.Append(NotificationId);
        }
        if (__isset.@remove) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Remove: ");
          __sb.Append(Remove);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancelTargetedNotification_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public cancelTargetedNotification_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("cancelTargetedNotification_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("cancelTargetedNotification_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setTemplate_args : TBase
    {
      private string _sessionId;
      private THNotificationTemplate _tmpl;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THNotificationTemplate Tmpl
      {
        get
        {
          return _tmpl;
        }
        set
        {
          __isset.tmpl = true;
          this._tmpl = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool tmpl;
      }

      public setTemplate_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Tmpl = new THNotificationTemplate();
                  Tmpl.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setTemplate_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Tmpl != null && __isset.tmpl) {
            field.Name = "tmpl";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Tmpl.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setTemplate_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Tmpl != null && __isset.tmpl) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Tmpl: ");
          __sb.Append(Tmpl== null ? "<null>" : Tmpl.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setTemplate_result : TBase
    {
      private THNotificationTemplate _success;
      private THErrors _errors;

      public THNotificationTemplate Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public setTemplate_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THNotificationTemplate();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setTemplate_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setTemplate_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteTemplate_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private string _tmplId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string TmplId
      {
        get
        {
          return _tmplId;
        }
        set
        {
          __isset.tmplId = true;
          this._tmplId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool tmplId;
      }

      public deleteTemplate_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  TmplId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteTemplate_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (TmplId != null && __isset.tmplId) {
            field.Name = "tmplId";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(TmplId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteTemplate_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (TmplId != null && __isset.tmplId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TmplId: ");
          __sb.Append(TmplId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteTemplate_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public deleteTemplate_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteTemplate_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteTemplate_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTemplates_args : TBase
    {
      private string _sessionId;
      private string _appId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
      }

      public getTemplates_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getTemplates_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getTemplates_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTemplates_result : TBase
    {
      private List<THNotificationTemplate> _success;
      private THErrors _errors;

      public List<THNotificationTemplate> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getTemplates_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THNotificationTemplate>();
                    TList _list229 = iprot.ReadListBegin();
                    for( int _i230 = 0; _i230 < _list229.Count; ++_i230)
                    {
                      THNotificationTemplate _elem231;
                      _elem231 = new THNotificationTemplate();
                      _elem231.Read(iprot);
                      Success.Add(_elem231);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getTemplates_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THNotificationTemplate _iter232 in Success)
                {
                  _iter232.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getTemplates_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompanyApiKeys_args : TBase
    {
      private string _sessionId;
      private string _companyId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string CompanyId
      {
        get
        {
          return _companyId;
        }
        set
        {
          __isset.companyId = true;
          this._companyId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool companyId;
      }

      public getCompanyApiKeys_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CompanyId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getCompanyApiKeys_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (CompanyId != null && __isset.companyId) {
            field.Name = "companyId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CompanyId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCompanyApiKeys_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (CompanyId != null && __isset.companyId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CompanyId: ");
          __sb.Append(CompanyId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompanyApiKeys_result : TBase
    {
      private List<THCompanyApiKey> _success;
      private THErrors _errors;

      public List<THCompanyApiKey> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getCompanyApiKeys_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THCompanyApiKey>();
                    TList _list233 = iprot.ReadListBegin();
                    for( int _i234 = 0; _i234 < _list233.Count; ++_i234)
                    {
                      THCompanyApiKey _elem235;
                      _elem235 = new THCompanyApiKey();
                      _elem235.Read(iprot);
                      Success.Add(_elem235);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getCompanyApiKeys_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THCompanyApiKey _iter236 in Success)
                {
                  _iter236.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCompanyApiKeys_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setCompanyApiKey_args : TBase
    {
      private string _sessionId;
      private THCompanyApiKey _apiKey;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THCompanyApiKey ApiKey
      {
        get
        {
          return _apiKey;
        }
        set
        {
          __isset.apiKey = true;
          this._apiKey = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool apiKey;
      }

      public setCompanyApiKey_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  ApiKey = new THCompanyApiKey();
                  ApiKey.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setCompanyApiKey_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (ApiKey != null && __isset.apiKey) {
            field.Name = "apiKey";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            ApiKey.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setCompanyApiKey_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (ApiKey != null && __isset.apiKey) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ApiKey: ");
          __sb.Append(ApiKey== null ? "<null>" : ApiKey.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setCompanyApiKey_result : TBase
    {
      private THCompanyApiKey _success;
      private THErrors _errors;

      public THCompanyApiKey Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public setCompanyApiKey_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THCompanyApiKey();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setCompanyApiKey_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setCompanyApiKey_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getEstimatedBalance_args : TBase
    {
      private string _sessionId;
      private string _companyId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string CompanyId
      {
        get
        {
          return _companyId;
        }
        set
        {
          __isset.companyId = true;
          this._companyId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool companyId;
      }

      public getEstimatedBalance_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CompanyId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getEstimatedBalance_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (CompanyId != null && __isset.companyId) {
            field.Name = "companyId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CompanyId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getEstimatedBalance_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (CompanyId != null && __isset.companyId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CompanyId: ");
          __sb.Append(CompanyId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getEstimatedBalance_result : TBase
    {
      private CalculationResult _success;
      private THErrors _errors;

      public CalculationResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getEstimatedBalance_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new CalculationResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getEstimatedBalance_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getEstimatedBalance_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getInvoices_args : TBase
    {
      private string _sessionId;
      private string _companyId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string CompanyId
      {
        get
        {
          return _companyId;
        }
        set
        {
          __isset.companyId = true;
          this._companyId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool companyId;
      }

      public getInvoices_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CompanyId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getInvoices_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (CompanyId != null && __isset.companyId) {
            field.Name = "companyId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CompanyId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getInvoices_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (CompanyId != null && __isset.companyId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CompanyId: ");
          __sb.Append(CompanyId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getInvoices_result : TBase
    {
      private List<Invoice> _success;
      private THErrors _errors;

      public List<Invoice> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getInvoices_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Invoice>();
                    TList _list237 = iprot.ReadListBegin();
                    for( int _i238 = 0; _i238 < _list237.Count; ++_i238)
                    {
                      Invoice _elem239;
                      _elem239 = new Invoice();
                      _elem239.Read(iprot);
                      Success.Add(_elem239);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getInvoices_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Invoice _iter240 in Success)
                {
                  _iter240.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getInvoices_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPaymentMethod_args : TBase
    {
      private string _sessionId;
      private string _companyId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string CompanyId
      {
        get
        {
          return _companyId;
        }
        set
        {
          __isset.companyId = true;
          this._companyId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool companyId;
      }

      public getPaymentMethod_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CompanyId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPaymentMethod_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (CompanyId != null && __isset.companyId) {
            field.Name = "companyId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CompanyId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPaymentMethod_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (CompanyId != null && __isset.companyId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CompanyId: ");
          __sb.Append(CompanyId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPaymentMethod_result : TBase
    {
      private PaymentMethodDetails _success;
      private THErrors _errors;

      public PaymentMethodDetails Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getPaymentMethod_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new PaymentMethodDetails();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPaymentMethod_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPaymentMethod_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setCreditCard_args : TBase
    {
      private string _sessionId;
      private string _companyId;
      private string _stripeResponse;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string CompanyId
      {
        get
        {
          return _companyId;
        }
        set
        {
          __isset.companyId = true;
          this._companyId = value;
        }
      }

      public string StripeResponse
      {
        get
        {
          return _stripeResponse;
        }
        set
        {
          __isset.stripeResponse = true;
          this._stripeResponse = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool companyId;
        public bool stripeResponse;
      }

      public setCreditCard_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CompanyId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  StripeResponse = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setCreditCard_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (CompanyId != null && __isset.companyId) {
            field.Name = "companyId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CompanyId);
            oprot.WriteFieldEnd();
          }
          if (StripeResponse != null && __isset.stripeResponse) {
            field.Name = "stripeResponse";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(StripeResponse);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setCreditCard_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (CompanyId != null && __isset.companyId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CompanyId: ");
          __sb.Append(CompanyId);
        }
        if (StripeResponse != null && __isset.stripeResponse) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("StripeResponse: ");
          __sb.Append(StripeResponse);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setCreditCard_result : TBase
    {
      private PaymentMethodDetails _success;
      private THErrors _errors;

      public PaymentMethodDetails Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public setCreditCard_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new PaymentMethodDetails();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setCreditCard_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setCreditCard_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPaymentIntentClientSecret_args : TBase
    {
      private string _sessionId;
      private string _companyId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string CompanyId
      {
        get
        {
          return _companyId;
        }
        set
        {
          __isset.companyId = true;
          this._companyId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool companyId;
      }

      public getPaymentIntentClientSecret_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CompanyId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPaymentIntentClientSecret_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (CompanyId != null && __isset.companyId) {
            field.Name = "companyId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CompanyId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPaymentIntentClientSecret_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (CompanyId != null && __isset.companyId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CompanyId: ");
          __sb.Append(CompanyId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPaymentIntentClientSecret_result : TBase
    {
      private string _success;
      private THErrors _errors;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getPaymentIntentClientSecret_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPaymentIntentClientSecret_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPaymentIntentClientSecret_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSFTriggers_args : TBase
    {
      private string _sessionId;
      private string _appId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
      }

      public getSFTriggers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getSFTriggers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSFTriggers_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSFTriggers_result : TBase
    {
      private List<SFTrigger> _success;
      private THErrors _errors;

      public List<SFTrigger> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getSFTriggers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<SFTrigger>();
                    TList _list241 = iprot.ReadListBegin();
                    for( int _i242 = 0; _i242 < _list241.Count; ++_i242)
                    {
                      SFTrigger _elem243;
                      _elem243 = new SFTrigger();
                      _elem243.Read(iprot);
                      Success.Add(_elem243);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getSFTriggers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (SFTrigger _iter244 in Success)
                {
                  _iter244.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSFTriggers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setSFTrigger_args : TBase
    {
      private string _sessionId;
      private SFTrigger _trigger;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public SFTrigger Trigger
      {
        get
        {
          return _trigger;
        }
        set
        {
          __isset.trigger = true;
          this._trigger = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool trigger;
      }

      public setSFTrigger_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Trigger = new SFTrigger();
                  Trigger.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setSFTrigger_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Trigger != null && __isset.trigger) {
            field.Name = "trigger";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Trigger.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setSFTrigger_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Trigger != null && __isset.trigger) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Trigger: ");
          __sb.Append(Trigger== null ? "<null>" : Trigger.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setSFTrigger_result : TBase
    {
      private SFTrigger _success;
      private THErrors _errors;

      public SFTrigger Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public setSFTrigger_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new SFTrigger();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setSFTrigger_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setSFTrigger_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteSFTrigger_args : TBase
    {
      private string _sessionId;
      private long _triggerId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public long TriggerId
      {
        get
        {
          return _triggerId;
        }
        set
        {
          __isset.triggerId = true;
          this._triggerId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool triggerId;
      }

      public deleteSFTrigger_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  TriggerId = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteSFTrigger_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (__isset.triggerId) {
            field.Name = "triggerId";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(TriggerId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteSFTrigger_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (__isset.triggerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TriggerId: ");
          __sb.Append(TriggerId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteSFTrigger_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public deleteSFTrigger_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteSFTrigger_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteSFTrigger_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSFActions_args : TBase
    {
      private string _sessionId;
      private long _triggerId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public long TriggerId
      {
        get
        {
          return _triggerId;
        }
        set
        {
          __isset.triggerId = true;
          this._triggerId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool triggerId;
      }

      public getSFActions_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  TriggerId = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getSFActions_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (__isset.triggerId) {
            field.Name = "triggerId";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(TriggerId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSFActions_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (__isset.triggerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TriggerId: ");
          __sb.Append(TriggerId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSFActions_result : TBase
    {
      private List<SFAction> _success;
      private THErrors _errors;

      public List<SFAction> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getSFActions_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<SFAction>();
                    TList _list245 = iprot.ReadListBegin();
                    for( int _i246 = 0; _i246 < _list245.Count; ++_i246)
                    {
                      SFAction _elem247;
                      _elem247 = new SFAction();
                      _elem247.Read(iprot);
                      Success.Add(_elem247);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getSFActions_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (SFAction _iter248 in Success)
                {
                  _iter248.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSFActions_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setSFAction_args : TBase
    {
      private string _sessionId;
      private SFAction _action;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public SFAction Action
      {
        get
        {
          return _action;
        }
        set
        {
          __isset.action = true;
          this._action = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool action;
      }

      public setSFAction_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Action = new SFAction();
                  Action.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setSFAction_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Action != null && __isset.action) {
            field.Name = "action";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Action.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setSFAction_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Action != null && __isset.action) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Action: ");
          __sb.Append(Action== null ? "<null>" : Action.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setSFAction_result : TBase
    {
      private SFAction _success;
      private THErrors _errors;

      public SFAction Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public setSFAction_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new SFAction();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setSFAction_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setSFAction_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteSFAction_args : TBase
    {
      private string _sessionId;
      private long _actionId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public long ActionId
      {
        get
        {
          return _actionId;
        }
        set
        {
          __isset.actionId = true;
          this._actionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool actionId;
      }

      public deleteSFAction_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  ActionId = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteSFAction_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (__isset.actionId) {
            field.Name = "actionId";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(ActionId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteSFAction_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (__isset.actionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActionId: ");
          __sb.Append(ActionId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteSFAction_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public deleteSFAction_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteSFAction_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteSFAction_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notificationTemplateInUse_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private string _tpl;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string Tpl
      {
        get
        {
          return _tpl;
        }
        set
        {
          __isset.tpl = true;
          this._tpl = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool tpl;
      }

      public notificationTemplateInUse_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Tpl = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("notificationTemplateInUse_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (Tpl != null && __isset.tpl) {
            field.Name = "tpl";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Tpl);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("notificationTemplateInUse_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (Tpl != null && __isset.tpl) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Tpl: ");
          __sb.Append(Tpl);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notificationTemplateInUse_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public notificationTemplateInUse_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("notificationTemplateInUse_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("notificationTemplateInUse_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class audienceInUse_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private long _audienceId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public long AudienceId
      {
        get
        {
          return _audienceId;
        }
        set
        {
          __isset.audienceId = true;
          this._audienceId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool audienceId;
      }

      public audienceInUse_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  AudienceId = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("audienceInUse_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (__isset.audienceId) {
            field.Name = "audienceId";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(AudienceId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("audienceInUse_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (__isset.audienceId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AudienceId: ");
          __sb.Append(AudienceId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class audienceInUse_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public audienceInUse_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("audienceInUse_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("audienceInUse_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPromoCodes_args : TBase
    {
      private string _sessionId;
      private string _appId;
      private string _offsetId;
      private int _limit;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string OffsetId
      {
        get
        {
          return _offsetId;
        }
        set
        {
          __isset.offsetId = true;
          this._offsetId = value;
        }
      }

      public int Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool appId;
        public bool offsetId;
        public bool limit;
      }

      public getPromoCodes_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  OffsetId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  Limit = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPromoCodes_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (OffsetId != null && __isset.offsetId) {
            field.Name = "offsetId";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(OffsetId);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPromoCodes_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (OffsetId != null && __isset.offsetId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OffsetId: ");
          __sb.Append(OffsetId);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPromoCodes_result : TBase
    {
      private List<THPromoCode> _success;
      private THErrors _errors;

      public List<THPromoCode> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public getPromoCodes_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THPromoCode>();
                    TList _list249 = iprot.ReadListBegin();
                    for( int _i250 = 0; _i250 < _list249.Count; ++_i250)
                    {
                      THPromoCode _elem251;
                      _elem251 = new THPromoCode();
                      _elem251.Read(iprot);
                      Success.Add(_elem251);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getPromoCodes_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THPromoCode _iter252 in Success)
                {
                  _iter252.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPromoCodes_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deletePromoCode_args : TBase
    {
      private string _sessionId;
      private string _id;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool id;
      }

      public deletePromoCode_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deletePromoCode_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Id != null && __isset.id) {
            field.Name = "id";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deletePromoCode_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deletePromoCode_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public deletePromoCode_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deletePromoCode_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deletePromoCode_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddFindUsers_args : TBase
    {
      private DDFindUsersRequest _request;

      public DDFindUsersRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ddFindUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new DDFindUsersRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddFindUsers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddFindUsers_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ddFindUsers_result : TBase
    {
      private DDFindUsersResponse _success;
      private THErrors _errors;

      public DDFindUsersResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public ddFindUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DDFindUsersResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ddFindUsers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ddFindUsers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class parseIAP_args : TBase
    {
      private string _sessionId;
      private byte[] _receipt;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public byte[] Receipt
      {
        get
        {
          return _receipt;
        }
        set
        {
          __isset.receipt = true;
          this._receipt = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool receipt;
      }

      public parseIAP_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Receipt = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("parseIAP_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Receipt != null && __isset.receipt) {
            field.Name = "receipt";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Receipt);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("parseIAP_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Receipt != null && __isset.receipt) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Receipt: ");
          __sb.Append(Receipt);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class parseIAP_result : TBase
    {
      private List<THReceiptOld> _success;
      private THErrors _errors;

      public List<THReceiptOld> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public parseIAP_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<THReceiptOld>();
                    TList _list253 = iprot.ReadListBegin();
                    for( int _i254 = 0; _i254 < _list253.Count; ++_i254)
                    {
                      THReceiptOld _elem255;
                      _elem255 = new THReceiptOld();
                      _elem255.Read(iprot);
                      Success.Add(_elem255);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("parseIAP_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (THReceiptOld _iter256 in Success)
                {
                  _iter256.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("parseIAP_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success.ToDebugString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class validateIAP_args : TBase
    {
      private string _sessionId;
      private byte[] _receipt;
      private byte[] _signature;
      private string _checkpoint;
      private bool _isSubscription;
      private bool _validateOnline;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public byte[] Receipt
      {
        get
        {
          return _receipt;
        }
        set
        {
          __isset.receipt = true;
          this._receipt = value;
        }
      }

      public byte[] Signature
      {
        get
        {
          return _signature;
        }
        set
        {
          __isset.signature = true;
          this._signature = value;
        }
      }

      public string Checkpoint
      {
        get
        {
          return _checkpoint;
        }
        set
        {
          __isset.checkpoint = true;
          this._checkpoint = value;
        }
      }

      public bool IsSubscription
      {
        get
        {
          return _isSubscription;
        }
        set
        {
          __isset.isSubscription = true;
          this._isSubscription = value;
        }
      }

      public bool ValidateOnline
      {
        get
        {
          return _validateOnline;
        }
        set
        {
          __isset.validateOnline = true;
          this._validateOnline = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool receipt;
        public bool signature;
        public bool checkpoint;
        public bool isSubscription;
        public bool validateOnline;
      }

      public validateIAP_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Receipt = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Signature = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  Checkpoint = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.Bool) {
                  IsSubscription = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.Bool) {
                  ValidateOnline = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("validateIAP_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionId != null && __isset.sessionId) {
            field.Name = "sessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionId);
            oprot.WriteFieldEnd();
          }
          if (Receipt != null && __isset.receipt) {
            field.Name = "receipt";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Receipt);
            oprot.WriteFieldEnd();
          }
          if (Signature != null && __isset.signature) {
            field.Name = "signature";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Signature);
            oprot.WriteFieldEnd();
          }
          if (Checkpoint != null && __isset.checkpoint) {
            field.Name = "checkpoint";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Checkpoint);
            oprot.WriteFieldEnd();
          }
          if (__isset.isSubscription) {
            field.Name = "isSubscription";
            field.Type = TType.Bool;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IsSubscription);
            oprot.WriteFieldEnd();
          }
          if (__isset.validateOnline) {
            field.Name = "validateOnline";
            field.Type = TType.Bool;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(ValidateOnline);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("validateIAP_args(");
        bool __first = true;
        if (SessionId != null && __isset.sessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionId: ");
          __sb.Append(SessionId);
        }
        if (Receipt != null && __isset.receipt) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Receipt: ");
          __sb.Append(Receipt);
        }
        if (Signature != null && __isset.signature) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Signature: ");
          __sb.Append(Signature);
        }
        if (Checkpoint != null && __isset.checkpoint) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Checkpoint: ");
          __sb.Append(Checkpoint);
        }
        if (__isset.isSubscription) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IsSubscription: ");
          __sb.Append(IsSubscription);
        }
        if (__isset.validateOnline) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ValidateOnline: ");
          __sb.Append(ValidateOnline);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class validateIAP_result : TBase
    {
      private THReceipt _success;
      private THErrors _errors;

      public THReceipt Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public validateIAP_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new THReceipt();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("validateIAP_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("validateIAP_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class trackLatency_args : TBase
    {
      private TrackLatencyRequest _request;

      public TrackLatencyRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public trackLatency_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new TrackLatencyRequest();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("trackLatency_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("trackLatency_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class trackLatency_result : TBase
    {
      private bool _success;
      private THErrors _errors;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public THErrors Errors
      {
        get
        {
          return _errors;
        }
        set
        {
          __isset.errors = true;
          this._errors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool errors;
      }

      public trackLatency_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Errors = new THErrors();
                  Errors.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("trackLatency_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.errors) {
            if (Errors != null) {
              field.Name = "Errors";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Errors.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("trackLatency_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Errors != null && __isset.errors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Errors: ");
          __sb.Append(Errors== null ? "<null>" : Errors.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
#endif
